<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒋家威的博客</title>
  
  
  <link href="https://github.com/jiangjiawei520/atom.xml" rel="self"/>
  
  <link href="https://github.com/jiangjiawei520/"/>
  <updated>2024-06-03T10:27:48.678Z</updated>
  <id>https://github.com/jiangjiawei520/</id>
  
  <author>
    <name>JiaWei Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chrome离线安装</title>
    <link href="https://github.com/jiangjiawei520/post/fe2744a8.html"/>
    <id>https://github.com/jiangjiawei520/post/fe2744a8.html</id>
    <published>2024-05-21T09:52:15.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在线安装包下载"><a href="#在线安装包下载" class="headerlink" title="在线安装包下载"></a>在线安装包下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.cn/chrome/index.html</span><br></pre></td></tr></table></figure><h2 id="离线安装包下载"><a href="#离线安装包下载" class="headerlink" title="离线安装包下载"></a>离线安装包下载</h2><p>​原来浏览器地址的最后面加上”?standalone&#x3D;1”，<strong>Standalone</strong>这个单词，它本身的意思就是脱机的，单独的意思，即不依赖网络而存在的本地安装版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.cn/chrome/index.html?standalone=1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在线安装包下载&quot;&gt;&lt;a href=&quot;#在线安装包下载&quot; class=&quot;headerlink&quot; title=&quot;在线安装包下载&quot;&gt;&lt;/a&gt;在线安装包下载&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="Windows" scheme="https://github.com/jiangjiawei520/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://github.com/jiangjiawei520/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>MobaXterm有用配置</title>
    <link href="https://github.com/jiangjiawei520/post/b983b141.html"/>
    <id>https://github.com/jiangjiawei520/post/b983b141.html</id>
    <published>2024-05-01T14:16:00.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关闭自动弹出SFTP"><a href="#关闭自动弹出SFTP" class="headerlink" title="关闭自动弹出SFTP"></a>关闭自动弹出SFTP</h2><p>Moba在连接上远程电脑之后，将自动打开左侧的SFTP侧边栏。有时我们并不需要SFTP，同时主窗口是黑色的，SFTP又是白色的，显得有点刺眼，因此可以将自动弹出SFTP功能关闭掉。</p><p>在菜单栏点击 「settings」 –&gt; 「Configuration」，在弹出的对话框中选择 「SSH」，再将 「automaticall switch to SSH-browser tab after login」 前面的对勾去掉即可。</p><p><img src="/imgs/image-20240531145708740.png" alt="image-20240531145708740"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关闭自动弹出SFTP&quot;&gt;&lt;a href=&quot;#关闭自动弹出SFTP&quot; class=&quot;headerlink&quot; title=&quot;关闭自动弹出SFTP&quot;&gt;&lt;/a&gt;关闭自动弹出SFTP&lt;/h2&gt;&lt;p&gt;Moba在连接上远程电脑之后，将自动打开左侧的SFTP侧边栏。有时我们并不需</summary>
      
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    <category term="shell" scheme="https://github.com/jiangjiawei520/categories/linux/shell/"/>
    
    
    <category term="MobaXterm" scheme="https://github.com/jiangjiawei520/tags/MobaXterm/"/>
    
    <category term="shell" scheme="https://github.com/jiangjiawei520/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>日常更新记录</title>
    <link href="https://github.com/jiangjiawei520/post/49a13fa5.html"/>
    <id>https://github.com/jiangjiawei520/post/49a13fa5.html</id>
    <published>2024-05-01T00:00:00.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h2><h3 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h3><h4 id="2024年5月31日"><a href="#2024年5月31日" class="headerlink" title="2024年5月31日"></a>2024年5月31日</h4><ul><li><input checked="" disabled="" type="checkbox"> 1、办公流程粤政易消息模版整改（禅道5969）</li><li><input checked="" disabled="" type="checkbox"> 2、办公管理之荣誉奖项需求调整（禅道5970）</li><li><input checked="" disabled="" type="checkbox"> 3、管理制度增加文件名称查重功能（禅道5971）</li><li><input checked="" disabled="" type="checkbox"> 4、《数据提取备案申请》数据详情字段信息问题修复（禅道6011）</li><li><input disabled="" type="checkbox"> 5、OA流程我的已办新增《台账导出》功能（禅道5972）–&gt;自己发给自己，会导出（待办+已办+抄送）</li><li><input checked="" disabled="" type="checkbox"> 6、待办箱和抄送箱信息完善【区分已阅和未阅】（禅道5883）</li><li><input checked="" disabled="" type="checkbox"> 7、数据提取备案数据内容表单项输入方式变更为文本域类型</li><li><input disabled="" type="checkbox"> 8、数据质检报告，错误明细excel与gdb增加时间戳。</li><li><input disabled="" type="checkbox"> 9、图层数据更新功能（数据中台）</li></ul><h5 id="办公流程粤政易消息模版整改"><a href="#办公流程粤政易消息模版整改" class="headerlink" title="办公流程粤政易消息模版整改"></a><strong>办公流程粤政易消息模版整改</strong></h5><h6 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h6><p>需要再apollo放开端口，否没有权限401</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># geo-zhglpt-springboot-1.0.0.jar的application.properties</span><br><span class="line"># 配置文件添加配置（测试环境ip172.16.2.68，生产ip172.16.2.75）</span><br><span class="line"># 综管平台用戶接口</span><br><span class="line">userSystem.getOauthidUrl = http://172.16.2.75:9000/user/user-system/secUser/selectOauthidByUserId</span><br><span class="line"># 粤政易模版接口</span><br><span class="line">newPortal.templateUrl =http://172.16.2.75:9000/findApp/commonApply/getMsgTemplate</span><br></pre></td></tr></table></figure><h6 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE sjzx.bgzx_business_apply_info ADD biz_id varchar(36) NULL COMMENT &#x27;业务id&#x27;; </span><br><span class="line">ALTER TABLE sjzx.bgzx_business_apply_info CHANGE biz_id biz_id varchar(36) NULL COMMENT &#x27;业务id&#x27; AFTER process_instance_title; UPDATE sjzx.bgzx_business_apply_info SET biz_id = JSON_UNQUOTE(JSON_EXTRACT(process_business_json, &#x27;$.formId&#x27;));</span><br></pre></td></tr></table></figure><h6 id="后端包"><a href="#后端包" class="headerlink" title="后端包"></a>后端包</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\172.16.2.52\00\综管平台更新\202405281405\new-portal-1.0.jar</span><br><span class="line">\\172.16.2.52\00\综管平台更新\202405281405\geo-zhglpt-springboot-1.0.0.jar</span><br></pre></td></tr></table></figure><h5 id="办公管理之荣誉奖项需求调整"><a href="#办公管理之荣誉奖项需求调整" class="headerlink" title="办公管理之荣誉奖项需求调整"></a><strong>办公管理之荣誉奖项需求调整</strong></h5><h6 id="字典调整"><a href="#字典调整" class="headerlink" title="字典调整"></a>字典调整</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">荣誉奖项类型</span><br></pre></td></tr></table></figure><h5 id="管理制度增加文件名称查重功能"><a href="#管理制度增加文件名称查重功能" class="headerlink" title="管理制度增加文件名称查重功能"></a>管理制度增加文件名称查重功能</h5><h5 id="《数据提取备案申请》数据详情字段信息问题修复"><a href="#《数据提取备案申请》数据详情字段信息问题修复" class="headerlink" title="《数据提取备案申请》数据详情字段信息问题修复"></a>《数据提取备案申请》数据详情字段信息问题修复</h5><h6 id="sql-1"><a href="#sql-1" class="headerlink" title="sql"></a>sql</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `zgpt_data_content` </span><br><span class="line">ADD COLUMN `number` int(8) NULL COMMENT &#x27;份数&#x27; AFTER `unit`;</span><br></pre></td></tr></table></figure><h5 id="OA流程我的已办新增《台账导出》功能"><a href="#OA流程我的已办新增《台账导出》功能" class="headerlink" title="OA流程我的已办新增《台账导出》功能"></a>OA流程我的已办新增《台账导出》功能</h5><h5 id="我的待办-我的已办-添加未读标记"><a href="#我的待办-我的已办-添加未读标记" class="headerlink" title="[我的待办&#x2F;我的已办]添加未读标记"></a>[我的待办&#x2F;我的已办]添加未读标记</h5><h6 id="sql-2"><a href="#sql-2" class="headerlink" title="sql"></a>sql</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE process_instance_info ADD COLUMN read_flag char(1) DEFAULT &#x27;N&#x27;;</span><br><span class="line"></span><br><span class="line">ALTER TABLE process_instance_info </span><br><span class="line">MODIFY COLUMN `read_flag` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT &#x27;N&#x27; COMMENT &#x27;是否已读（N-否，Y-是）&#x27; AFTER `handle_status`;</span><br></pre></td></tr></table></figure><h6 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">处理之前的数据为已阅</span><br><span class="line"></span><br><span class="line">select * from process_instance_info where  read_flag=&#x27;N&#x27;</span><br><span class="line">update process_instance_info set read_flag=&#x27;Y&#x27; where read_flag=&#x27;N&#x27;</span><br></pre></td></tr></table></figure><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><p><img src="/../imgs/image-20240531183133323.png" alt="image-20240531183133323"></p><h5 id="数据提取备案数据内容表单项输入方式变更为文本域类型"><a href="#数据提取备案数据内容表单项输入方式变更为文本域类型" class="headerlink" title="数据提取备案数据内容表单项输入方式变更为文本域类型"></a>数据提取备案数据内容表单项输入方式变更为文本域类型</h5><h5 id="图层数据更新功能（数据中台）"><a href="#图层数据更新功能（数据中台）" class="headerlink" title="图层数据更新功能（数据中台）"></a>图层数据更新功能（数据中台）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 数据版本更新定时任务配置</span><br><span class="line">geo.scheduled.enable = true</span><br><span class="line">geo.scheduled。fixedDelay = 5000</span><br></pre></td></tr></table></figure><p>菜单、字典配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server         : 192.168.101.160</span><br><span class="line"> Source Server Type    : PostgreSQL</span><br><span class="line"> Source Server Version : 120001</span><br><span class="line"> Source Host           : 192.168.101.160:54321</span><br><span class="line"> Source Catalog        : zhglpt</span><br><span class="line"> Source Schema         : public</span><br><span class="line"></span><br><span class="line"> Target Server Type    : PostgreSQL</span><br><span class="line"> Target Server Version : 120001</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 28/05/2024 17:28:17</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for data_update_layer</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &quot;public&quot;.&quot;data_update_layer&quot;;</span><br><span class="line">CREATE TABLE &quot;public&quot;.&quot;data_update_layer&quot; (</span><br><span class="line">  &quot;id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;project_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;name&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;alias&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;geometry_type&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;type&quot; int4 NOT NULL,</span><br><span class="line">  &quot;adjust_layer_filter&quot; varchar(255) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;adjust_field_map&quot; varchar(255) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;sort&quot; int4 NOT NULL,</span><br><span class="line">  &quot;create_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL,</span><br><span class="line">  &quot;update_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;id&quot; IS &#x27;图层ID&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;project_id&quot; IS &#x27;数据更新方案ID&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;name&quot; IS &#x27;图层名称&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;alias&quot; IS &#x27;图层别名&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;geometry_type&quot; IS &#x27;图形类型&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;type&quot; IS &#x27;图层类型，值可为：1（更新图层）、2（调整图层）、3（更新过程图层）&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;adjust_layer_filter&quot; IS &#x27;调整图层要素筛选条件，此字段值在type为2时有效&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;adjust_field_map&quot; IS &#x27;调整图层查询字段与更新图层字段匹配配置&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;sort&quot; IS &#x27;显示顺序&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;create_time&quot; IS &#x27;记录创建时间&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer&quot;.&quot;update_time&quot; IS &#x27;记录更新时间&#x27;;</span><br><span class="line">COMMENT ON TABLE &quot;public&quot;.&quot;data_update_layer&quot; IS &#x27;数据图层信息表&#x27;;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for data_update_layer_field</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &quot;public&quot;.&quot;data_update_layer_field&quot;;</span><br><span class="line">CREATE TABLE &quot;public&quot;.&quot;data_update_layer_field&quot; (</span><br><span class="line">  &quot;id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;layer_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;name&quot; varchar(255) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;alias&quot; varchar(255) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;type&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;length&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;nullable&quot; bool NOT NULL,</span><br><span class="line">  &quot;pk&quot; bool NOT NULL,</span><br><span class="line">  &quot;sort&quot; int4 NOT NULL,</span><br><span class="line">  &quot;create_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL,</span><br><span class="line">  &quot;update_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;id&quot; IS &#x27;字段ID&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;layer_id&quot; IS &#x27;图层ID&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;name&quot; IS &#x27;字段名称&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;alias&quot; IS &#x27;字段别名&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;type&quot; IS &#x27;字段类型，值包括：String、SmallInteger、Integer、Single、Double、Date、Blob&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;length&quot; IS &#x27;字段长度&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;nullable&quot; IS &#x27;是否可为空值&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;pk&quot; IS &#x27;是否为主键&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;sort&quot; IS &#x27;显示顺序&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;create_time&quot; IS &#x27;记录创建时间&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_layer_field&quot;.&quot;update_time&quot; IS &#x27;记录更新时间&#x27;;</span><br><span class="line">COMMENT ON TABLE &quot;public&quot;.&quot;data_update_layer_field&quot; IS &#x27;图层字段信息表&#x27;;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for data_update_project</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &quot;public&quot;.&quot;data_update_project&quot;;</span><br><span class="line">CREATE TABLE &quot;public&quot;.&quot;data_update_project&quot; (</span><br><span class="line">  &quot;id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;name&quot; varchar(255) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;lastest_data_source_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;process_data_source_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;history_data_source_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;layer_store_type&quot; int4 NOT NULL,</span><br><span class="line">  &quot;push_type&quot; int4 NOT NULL,</span><br><span class="line">  &quot;push_data_source_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;push_layer_name&quot; varchar(255) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;deleted&quot; bool NOT NULL DEFAULT false,</span><br><span class="line">  &quot;create_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL,</span><br><span class="line">  &quot;update_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;id&quot; IS &#x27;数据更新方案ID&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;name&quot; IS &#x27;数据更新方案名称&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;lastest_data_source_id&quot; IS &#x27;最新库数据源Id&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;process_data_source_id&quot; IS &#x27;更新过程库数据源Id&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;history_data_source_id&quot; IS &#x27;历史库数据源Id&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;layer_store_type&quot; IS &#x27;图层存放方式，值可为：1（分区县存放与省级汇总）、2（单图层）&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;push_type&quot; IS &#x27;数据推送方式，值可为：1（无）、2（更新后立即推送）、3（手动推送）&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;push_data_source_id&quot; IS &#x27;推送目标图层所在数据源Id&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;push_layer_name&quot; IS &#x27;推送目标图层名称&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;deleted&quot; IS &#x27;是否已删除，默认为false&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;create_time&quot; IS &#x27;记录创建时间&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_project&quot;.&quot;update_time&quot; IS &#x27;记录更新时间&#x27;;</span><br><span class="line">COMMENT ON TABLE &quot;public&quot;.&quot;data_update_project&quot; IS &#x27;数据更新方案表&#x27;;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for data_update_task</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &quot;public&quot;.&quot;data_update_task&quot;;</span><br><span class="line">CREATE TABLE &quot;public&quot;.&quot;data_update_task&quot; (</span><br><span class="line">  &quot;id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;name&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;project_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;version_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;type&quot; int4 NOT NULL,</span><br><span class="line">  &quot;status&quot; int4 NOT NULL,</span><br><span class="line">  &quot;jszx_taskid&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;weight&quot; int4,</span><br><span class="line">  &quot;create_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL,</span><br><span class="line">  &quot;update_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;id&quot; IS &#x27;任务ID&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;name&quot; IS &#x27;任务名称&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;project_id&quot; IS &#x27;数据更新方案Id&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;version_id&quot; IS &#x27;版本号&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;type&quot; IS &#x27;任务类型，值可为：11（更新）、12（更新回滚）、13（更新回退）、14（更新回退回滚）、21（推送）、22（推送回滚）、23（推送回退）、24（推送回退回滚）&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;status&quot; IS &#x27;任务状态，值可为：1（排队中）、2（执行中）、3（执行成功）、4（执行失败）&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;jszx_taskid&quot; IS &#x27;计算中心任务Id&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;weight&quot; IS &#x27;任务执行权重，用于控制排队任务执行优先级，值越大越优先执行。回滚类型的任务优先级最高&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;create_time&quot; IS &#x27;记录创建时间&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_task&quot;.&quot;update_time&quot; IS &#x27;记录创建时间&#x27;;</span><br><span class="line">COMMENT ON TABLE &quot;public&quot;.&quot;data_update_task&quot; IS &#x27;数据更新任务表&#x27;;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for data_update_version_status_log</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &quot;public&quot;.&quot;data_update_version_status_log&quot;;</span><br><span class="line">CREATE TABLE &quot;public&quot;.&quot;data_update_version_status_log&quot; (</span><br><span class="line">  &quot;id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;version_id&quot; varchar(50) COLLATE &quot;pg_catalog&quot;.&quot;default&quot; NOT NULL,</span><br><span class="line">  &quot;status_type&quot; int4 NOT NULL,</span><br><span class="line">  &quot;status&quot; int4 NOT NULL,</span><br><span class="line">  &quot;remark&quot; varchar(1000) COLLATE &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  &quot;create_time&quot; &quot;sys&quot;.&quot;date&quot; NOT NULL</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_version_status_log&quot;.&quot;id&quot; IS &#x27;日志ID&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_version_status_log&quot;.&quot;version_id&quot; IS &#x27;版本号&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_version_status_log&quot;.&quot;status_type&quot; IS &#x27;版本类型，1为更新状态，2为推送状态&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_version_status_log&quot;.&quot;status&quot; IS &#x27;具体状态，根据status_type不同，对应更新状态或者推送状态具体值&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_version_status_log&quot;.&quot;remark&quot; IS &#x27;状态变化说明&#x27;;</span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;data_update_version_status_log&quot;.&quot;create_time&quot; IS &#x27;记录创建时间&#x27;;</span><br><span class="line">COMMENT ON TABLE &quot;public&quot;.&quot;data_update_version_status_log&quot; IS &#x27;数据版本状态变化日志表&#x27;;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Indexes structure for table data_update_layer</span><br><span class="line">-- ----------------------------</span><br><span class="line">CREATE INDEX &quot;layer_project_id_idx&quot; ON &quot;public&quot;.&quot;data_update_layer&quot; USING btree (</span><br><span class="line">  &quot;project_id&quot; COLLATE &quot;pg_catalog&quot;.&quot;default&quot; &quot;pg_catalog&quot;.&quot;text_ops&quot; ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Primary Key structure for table data_update_layer</span><br><span class="line">-- ----------------------------</span><br><span class="line">ALTER TABLE &quot;public&quot;.&quot;data_update_layer&quot; ADD CONSTRAINT &quot;data_update_layer_pkey&quot; PRIMARY KEY (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Indexes structure for table data_update_layer_field</span><br><span class="line">-- ----------------------------</span><br><span class="line">CREATE INDEX &quot;layer_field_layer_id_idx&quot; ON &quot;public&quot;.&quot;data_update_layer_field&quot; USING btree (</span><br><span class="line">  &quot;layer_id&quot; COLLATE &quot;pg_catalog&quot;.&quot;default&quot; &quot;pg_catalog&quot;.&quot;text_ops&quot; ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Primary Key structure for table data_update_layer_field</span><br><span class="line">-- ----------------------------</span><br><span class="line">ALTER TABLE &quot;public&quot;.&quot;data_update_layer_field&quot; ADD CONSTRAINT &quot;data_update_layer_field_pkey&quot; PRIMARY KEY (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Primary Key structure for table data_update_project</span><br><span class="line">-- ----------------------------</span><br><span class="line">ALTER TABLE &quot;public&quot;.&quot;data_update_project&quot; ADD CONSTRAINT &quot;data_update_project_pkey&quot; PRIMARY KEY (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Indexes structure for table data_update_task</span><br><span class="line">-- ----------------------------</span><br><span class="line">CREATE INDEX &quot;task_project_id_idx&quot; ON &quot;public&quot;.&quot;data_update_task&quot; USING btree (</span><br><span class="line">  &quot;project_id&quot; COLLATE &quot;pg_catalog&quot;.&quot;default&quot; &quot;pg_catalog&quot;.&quot;text_ops&quot; ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line">CREATE INDEX &quot;task_version_id_idx&quot; ON &quot;public&quot;.&quot;data_update_task&quot; USING btree (</span><br><span class="line">  &quot;version_id&quot; COLLATE &quot;pg_catalog&quot;.&quot;default&quot; &quot;pg_catalog&quot;.&quot;text_ops&quot; ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Primary Key structure for table data_update_task</span><br><span class="line">-- ----------------------------</span><br><span class="line">ALTER TABLE &quot;public&quot;.&quot;data_update_task&quot; ADD CONSTRAINT &quot;data_update_task_pkey&quot; PRIMARY KEY (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Indexes structure for table data_update_version_status_log</span><br><span class="line">-- ----------------------------</span><br><span class="line">CREATE INDEX &quot;version_status_log_version_id&quot; ON &quot;public&quot;.&quot;data_update_version_status_log&quot; USING btree (</span><br><span class="line">  &quot;version_id&quot; COLLATE &quot;pg_catalog&quot;.&quot;default&quot; &quot;pg_catalog&quot;.&quot;text_ops&quot; ASC NULLS LAST</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Primary Key structure for table data_update_version_status_log</span><br><span class="line">-- ----------------------------</span><br><span class="line">ALTER TABLE &quot;public&quot;.&quot;data_update_version_status_log&quot; ADD CONSTRAINT &quot;data_update_version_status_log_pkey&quot; PRIMARY KEY (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ALTER TABLE &quot;public&quot;.&quot;process_instance_info&quot; ADD COLUMN &quot;read_flag&quot; char(1) DEFAULT &#x27;N&#x27;;</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN &quot;public&quot;.&quot;process_instance_info&quot;.&quot;read_flag&quot; IS &#x27;是否已读（N-否，Y-是）&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2024年&quot;&gt;&lt;a href=&quot;#2024年&quot; class=&quot;headerlink&quot; title=&quot;2024年&quot;&gt;&lt;/a&gt;2024年&lt;/h2&gt;&lt;h3 id=&quot;5月&quot;&gt;&lt;a href=&quot;#5月&quot; class=&quot;headerlink&quot; title=&quot;5月&quot;&gt;&lt;/a&gt;5</summary>
      
    
    
    
    <category term="更新记录" scheme="https://github.com/jiangjiawei520/categories/%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="更新记录" scheme="https://github.com/jiangjiawei520/tags/%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Python之vscode将项目打包成exe文件</title>
    <link href="https://github.com/jiangjiawei520/post/b12f19ab.html"/>
    <id>https://github.com/jiangjiawei520/post/b12f19ab.html</id>
    <published>2024-04-30T15:06:40.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>环境：python 3.8(否则无法下载安装PySide2)</p><h5 id="1、打开VSCode并打开你的Python项目。"><a href="#1、打开VSCode并打开你的Python项目。" class="headerlink" title="1、打开VSCode并打开你的Python项目。"></a>1、打开VSCode并打开你的Python项目。</h5><h5 id="2、在VSCode终端中安装pyinstaller："><a href="#2、在VSCode终端中安装pyinstaller：" class="headerlink" title="2、在VSCode终端中安装pyinstaller："></a>2、在VSCode终端中安装<code>pyinstaller</code>：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h5 id="3、运行以下命令使用pyinstaller将Python项目打包成exe文件："><a href="#3、运行以下命令使用pyinstaller将Python项目打包成exe文件：" class="headerlink" title="3、运行以下命令使用pyinstaller将Python项目打包成exe文件："></a>3、运行以下命令使用<code>pyinstaller</code>将Python项目打包成exe文件：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F your_script.py --name=my_program</span><br></pre></td></tr></table></figure><h5 id="其中your-script-py是你的Python脚本的文件名；my-program为生成的应用名称"><a href="#其中your-script-py是你的Python脚本的文件名；my-program为生成的应用名称" class="headerlink" title="其中your_script.py是你的Python脚本的文件名；my_program为生成的应用名称"></a>其中<code>your_script.py</code>是你的Python脚本的文件名；my_program为生成的应用名称</h5><h5 id="4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。"><a href="#4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。" class="headerlink" title="4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。"></a>4、打包完成后，在你的项目目录中会生成一个<code>dist</code>文件夹，里面包含了打包后的可执行文件。</h5><blockquote><p>  <strong><strong>请注意，使用<code>pyinstaller</code>打包成exe文件时可能会遇到一些依赖项缺失或路径问题，你可能需要进行一些额外的配置。另外，如果你的项目有一些特殊的资源文件（如图片、配置文件等），你也需要确保这些资源文件能够被正确地打包进exe文件中。</strong></strong> </p></blockquote><span id="more"></span><h4 id="演示步骤"><a href="#演示步骤" class="headerlink" title="演示步骤"></a>演示步骤</h4><h5 id="1、打开VSCode并打开你的Python项目。-1"><a href="#1、打开VSCode并打开你的Python项目。-1" class="headerlink" title="1、打开VSCode并打开你的Python项目。"></a>1、打开VSCode并打开你的Python项目。</h5><img alt="" height="1200" src="/imgs/32340822a74047e3b51c3b9ad858c991.png" width="1200"><h5 id="2、在VSCode终端中安装pyinstaller：-1"><a href="#2、在VSCode终端中安装pyinstaller：-1" class="headerlink" title="2、在VSCode终端中安装pyinstaller："></a>2、在VSCode终端中安装<code>pyinstaller</code>：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a><img alt="" height="1200" src="/imgs/423ed294b3064d28a988a77164cda1c2.png" width="1200"></h5><blockquote><p>  我之前已经安装过了，所以显示的是下面的样子。 </p></blockquote><img alt="" height="1200" src="/imgs/b927321e516844f698be54e6cdcf02b8.png" width="1200"><h5 id="3、运行以下命令使用pyinstaller将Python项目打包成exe文件：-1"><a href="#3、运行以下命令使用pyinstaller将Python项目打包成exe文件：-1" class="headerlink" title="3、运行以下命令使用pyinstaller将Python项目打包成exe文件："></a>3、运行以下命令使用<code>pyinstaller</code>将Python项目打包成exe文件：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F your_script.py</span><br></pre></td></tr></table></figure><img alt="" height="1200" src="/imgs/d79d52bdf321469bbea4c2e19fc3b5ea.png" width="1200"><blockquote><p>  **打包完成 ** </p></blockquote><img alt="" height="1200" src="/imgs/5969cef4ca4b49b1a4926b6925a54546.png" width="1200"><img alt="" height="136" src="/imgs/22b6e1d144724b49be931c552ff5ad3c.png" width="706"><h5 id="4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。-1"><a href="#4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。-1" class="headerlink" title="4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。"></a>4、打包完成后，在你的项目目录中会生成一个<code>dist</code>文件夹，里面包含了打包后的可执行文件。</h5><p><img alt="" height="174" src="/imgs/7b171c11fb2f454b9c8bfe6785ed4ebc.png" width="391"> </p><img alt="" height="228" src="/imgs/86d32b54438641af876a1343e62de693.png" width="391"><img alt="" height="372" src="/imgs/f7d9e2f5ed42439d92fc66ce6f4c212e.png" width="859"><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><blockquote><p>  <strong>运行成功</strong> </p></blockquote><img alt="" height="784" src="/imgs/6e9b480bf7564e7583a33fb6e2d63eb6.png" width="1176"><img alt="" height="253" src="/imgs/48f9f74d673c4a60a49ad9106ce8dd08.png" width="265">]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h4&gt;&lt;p&gt;环境：python 3.8(否则无法下载安装PySide2)&lt;/p&gt;
&lt;h5 id=&quot;1、打开VSCode并打开你的Python项目。&quot;&gt;&lt;a href=&quot;#1、打开VSCode并打开你的Python项目。&quot; class=&quot;headerlink&quot; title=&quot;1、打开VSCode并打开你的Python项目。&quot;&gt;&lt;/a&gt;1、打开VSCode并打开你的Python项目。&lt;/h5&gt;&lt;h5 id=&quot;2、在VSCode终端中安装pyinstaller：&quot;&gt;&lt;a href=&quot;#2、在VSCode终端中安装pyinstaller：&quot; class=&quot;headerlink&quot; title=&quot;2、在VSCode终端中安装pyinstaller：&quot;&gt;&lt;/a&gt;2、在VSCode终端中安装&lt;code&gt;pyinstaller&lt;/code&gt;：&lt;/h5&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pyinstaller&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;3、运行以下命令使用pyinstaller将Python项目打包成exe文件：&quot;&gt;&lt;a href=&quot;#3、运行以下命令使用pyinstaller将Python项目打包成exe文件：&quot; class=&quot;headerlink&quot; title=&quot;3、运行以下命令使用pyinstaller将Python项目打包成exe文件：&quot;&gt;&lt;/a&gt;3、运行以下命令使用&lt;code&gt;pyinstaller&lt;/code&gt;将Python项目打包成exe文件：&lt;/h5&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pyinstaller -F your_script.py --name=my_program&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;其中your-script-py是你的Python脚本的文件名；my-program为生成的应用名称&quot;&gt;&lt;a href=&quot;#其中your-script-py是你的Python脚本的文件名；my-program为生成的应用名称&quot; class=&quot;headerlink&quot; title=&quot;其中your_script.py是你的Python脚本的文件名；my_program为生成的应用名称&quot;&gt;&lt;/a&gt;其中&lt;code&gt;your_script.py&lt;/code&gt;是你的Python脚本的文件名；my_program为生成的应用名称&lt;/h5&gt;&lt;h5 id=&quot;4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。&quot;&gt;&lt;a href=&quot;#4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。&quot; class=&quot;headerlink&quot; title=&quot;4、打包完成后，在你的项目目录中会生成一个dist文件夹，里面包含了打包后的可执行文件。&quot;&gt;&lt;/a&gt;4、打包完成后，在你的项目目录中会生成一个&lt;code&gt;dist&lt;/code&gt;文件夹，里面包含了打包后的可执行文件。&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;  &lt;strong&gt;&lt;strong&gt;请注意，使用&lt;code&gt;pyinstaller&lt;/code&gt;打包成exe文件时可能会遇到一些依赖项缺失或路径问题，你可能需要进行一些额外的配置。另外，如果你的项目有一些特殊的资源文件（如图片、配置文件等），你也需要确保这些资源文件能够被正确地打包进exe文件中。&lt;/strong&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/categories/python/"/>
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python之算法双指针</title>
    <link href="https://github.com/jiangjiawei520/post/d6f65b2b.html"/>
    <id>https://github.com/jiangjiawei520/post/d6f65b2b.html</id>
    <published>2024-04-30T15:06:07.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<p>双指针（Two Pointers）：指的是在遍历元素的过程中，不是使用单个指针进行访问，而是使用两个指针进行访问，从而达到相应的目的。</p><p>双指针分为「对撞指针」、「快慢指针」、「分离双指针」。</p><blockquote><p>          对撞指针：两个指针方向相反。适合解决查找有序数组中满足某些约束条件的一组元素问题、字符串反转问题。<br>           快慢指针：两个指针方向相同。适合解决数组中的移动、删除元素问题，或者链表中的判断是否有环、长度问题。<br>           分离双指针：两个指针分别属于不同的数组 &#x2F; 链表。适合解决有序数组合并，求交集、并集问题。 </p></blockquote><h4 id="一，对撞指针"><a href="#一，对撞指针" class="headerlink" title="一，对撞指针"></a>一，对撞指针</h4><h5 id="1-盛最多水的容器"><a href="#1-盛最多水的容器" class="headerlink" title="1.盛最多水的容器"></a>1.盛最多水的容器</h5><img src="/imgs/8081a82411af4a6bbee48be7ecf8dadf.png" alt=""><span id="more"></span><blockquote><p>  输入：[1,8,6,2,5,4,8,3,7]<br> 输出：49<br> 解释：图中垂直线代表输入数组<br> [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def maxArea(self, height: List[int]) -&gt; int:</span><br><span class="line">        result = 0</span><br><span class="line">        left = 0</span><br><span class="line">        right = len(height) - 1</span><br><span class="line">        while left &lt; right:</span><br><span class="line">            # 求解矩形的面积</span><br><span class="line">            l = right - left</span><br><span class="line">            h = min(height[left], height[right])</span><br><span class="line">            area = l*h</span><br><span class="line">            # 需要不断维持更新最大值</span><br><span class="line">            result = max(result, area)</span><br><span class="line">            # 应该使得 较低直线的高度尽可能的高</span><br><span class="line">            # 当left指向的直线高度较低，向右移动</span><br><span class="line">            if height[left] &lt; height[right]:</span><br><span class="line">                left += 1</span><br><span class="line">            # 当right指向的直线高度较低，向左移动</span><br><span class="line">            else:</span><br><span class="line">                right -= 1</span><br><span class="line">        return result</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-反转字符串"><a href="#2-反转字符串" class="headerlink" title="2.反转字符串"></a>2.反转字符串</h5><blockquote><p>  输入：s &#x3D; [“h”,“e”,“l”,“l”,“o”]<br> 输出：[“o”,“l”,“l”,“e”,“h”] </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def reverseString(self, s: List[str]) -&gt; None:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Do not return anything, modify s in-place instead.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        left = 0</span><br><span class="line">        right = len(s) - 1</span><br><span class="line">        while left &lt; right:</span><br><span class="line">            s[left], s[right] = s[right], s[left]</span><br><span class="line">            left += 1</span><br><span class="line">            right -= 1</span><br><span class="line">        return s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二，快慢指针"><a href="#二，快慢指针" class="headerlink" title="二，快慢指针"></a>二，快慢指针</h4><h5 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def removeDuplicates(self, nums: List[int]) -&gt; int:</span><br><span class="line">        # 定义两个指针</span><br><span class="line">        slow = 0</span><br><span class="line">        fast = 1</span><br><span class="line">        # 可以视作把非重复元素放在数组左边</span><br><span class="line">        while fast &lt; len(nums):</span><br><span class="line">            if nums[slow] != nums[fast]:</span><br><span class="line">                slow += 1</span><br><span class="line">                nums[slow] = nums[fast]</span><br><span class="line">            fast += 1</span><br><span class="line">        return slow + 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三，分离指针"><a href="#三，分离指针" class="headerlink" title="三，分离指针"></a>三，分离指针</h4><h5 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h5><blockquote><p>  输入：nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]<br> 输出：[2] </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def intersection(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:</span><br><span class="line">        # 分离双指针一般用于处理有序数组合并，求交集、并集问题</span><br><span class="line">        # 1 先将两个数组排序</span><br><span class="line">        nums1.sort()</span><br><span class="line">        nums2.sort()</span><br><span class="line">        # 使用双指针求交集</span><br><span class="line">        point1 = 0</span><br><span class="line">        point2 = 0</span><br><span class="line">        result = []</span><br><span class="line">        while point1 &lt; len(nums1) and point2 &lt; len(nums2):</span><br><span class="line">            # 元素同时出现在两个数组</span><br><span class="line">            if nums1[point1] == nums2[point2]:</span><br><span class="line">                # 保证数组没有重复元素</span><br><span class="line">                if nums1[point1] not in result:</span><br><span class="line">                    result.append(nums1[point1])</span><br><span class="line">                # 齐头并进</span><br><span class="line">                point1 += 1</span><br><span class="line">                point2 += 1</span><br><span class="line">            # point1落后于point2，需要追赶</span><br><span class="line">            elif nums1[point1] &lt; nums2[point2]:</span><br><span class="line">                point1 += 1</span><br><span class="line">            # point2落后于point1，需要追赶   </span><br><span class="line">            else:</span><br><span class="line">                point2 += 1</span><br><span class="line">        return result</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h4><h5 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h5><blockquote><p>  输入：nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3, nums2 &#x3D; [2,5,6], n &#x3D; 3<br> 输出：[1,2,2,3,5,6] </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 定义两个指针，分别指向数组的尾部</span><br><span class="line">p1 = m-1</span><br><span class="line">p2 = n-1</span><br><span class="line">p = m + n - 1</span><br><span class="line">while p1 &gt;= 0 and p2 &gt;= 0:</span><br><span class="line">    if nums1[p1] &lt;= nums2[p2]:</span><br><span class="line">        nums1[p] = nums2[p2]</span><br><span class="line">        p2 -= 1</span><br><span class="line">    else:</span><br><span class="line">        nums1[p] = nums1[p1]</span><br><span class="line">        p1 -= 1</span><br><span class="line">    p -= 1</span><br><span class="line"># 最后把nums2中的剩余元素赋值到nums1中</span><br><span class="line">nums1[:p2+1] = nums2[:p2+1]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="删除有序数组中的重复项-II"><a href="#删除有序数组中的重复项-II" class="headerlink" title="删除有序数组中的重复项 II"></a>删除有序数组中的重复项 II</h4><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。<br> 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><blockquote><p>  输入：nums &#x3D; [1,1,1,2,2,3]<br> 输出：5, nums &#x3D; [1,1,2,2,3] </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def removeDuplicates(self, nums: List[int]) -&gt; int:</span><br><span class="line">        slow = 2</span><br><span class="line">        fast = 2</span><br><span class="line">        # 因为有序，所以当 nums[slow-2] = nums[slow]时，</span><br><span class="line">        # 必有nums[slow] = nums[slow-1] = nums[slow-2]</span><br><span class="line">        # 不相等时进行添加</span><br><span class="line">        while fast &lt; len(nums):</span><br><span class="line">            if nums[slow-2] != nums[fast]:</span><br><span class="line">                nums[slow] = nums[fast]</span><br><span class="line">                slow += 1</span><br><span class="line">            fast += 1</span><br><span class="line">        return slow</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三位数之和"><a href="#三位数之和" class="headerlink" title="三位数之和"></a>三位数之和</h4><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c &#x3D; 0 ？请你找出所有和为 0 且不重复的三元组。<br> 注意：答案中不可以包含重复的三元组。</p><blockquote><p>  输入：nums &#x3D; [-1,0,1,2,-1,-4]<br> 输出：[[-1,-1,2],[-1,0,1]] </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:</span><br><span class="line">        result = []                  # 结果输出</span><br><span class="line">        n = len(nums)</span><br><span class="line">        # 先将数组递增排列</span><br><span class="line">        nums.sort()</span><br><span class="line">        # 定义双指针 a, left, right</span><br><span class="line">        for i in range(n):</span><br><span class="line">            if i &gt; 0 and nums[i] == nums[i-1]:</span><br><span class="line">                continue</span><br><span class="line">            left = i+1</span><br><span class="line">            right = n-1</span><br><span class="line">            # 双指针寻找区间</span><br><span class="line">            while left &lt; right:</span><br><span class="line">                # 答案中不可以包含重复的三元组，对于重复的元素直接跳过</span><br><span class="line">                while left &lt; right and left &gt; i+1 and nums[left] == nums[left-1]:</span><br><span class="line">                    left += 1</span><br><span class="line">                while left &lt; right and right &lt; n-1 and nums[right] == nums[right+1]:</span><br><span class="line">                    right -= 1</span><br><span class="line">                # 满足条件的三元组</span><br><span class="line">                if left &lt; right and nums[i] + nums[left] + nums[right] == 0:</span><br><span class="line">                    result.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    left += 1</span><br><span class="line">                    right -= 1</span><br><span class="line">                elif nums[i] + nums[left] + nums[right] &gt; 0:</span><br><span class="line">                    right -= 1</span><br><span class="line">                else:</span><br><span class="line">                    left += 1</span><br><span class="line">        return result</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上问题都来源于力扣：</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;双指针（Two Pointers）：指的是在遍历元素的过程中，不是使用单个指针进行访问，而是使用两个指针进行访问，从而达到相应的目的。&lt;/p&gt;
&lt;p&gt;双指针分为「对撞指针」、「快慢指针」、「分离双指针」。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;          对撞指针：两个指针方向相反。适合解决查找有序数组中满足某些约束条件的一组元素问题、字符串反转问题。&lt;br&gt;           快慢指针：两个指针方向相同。适合解决数组中的移动、删除元素问题，或者链表中的判断是否有环、长度问题。&lt;br&gt;           分离双指针：两个指针分别属于不同的数组 &amp;#x2F; 链表。适合解决有序数组合并，求交集、并集问题。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一，对撞指针&quot;&gt;&lt;a href=&quot;#一，对撞指针&quot; class=&quot;headerlink&quot; title=&quot;一，对撞指针&quot;&gt;&lt;/a&gt;一，对撞指针&lt;/h4&gt;&lt;h5 id=&quot;1-盛最多水的容器&quot;&gt;&lt;a href=&quot;#1-盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;1.盛最多水的容器&quot;&gt;&lt;/a&gt;1.盛最多水的容器&lt;/h5&gt;&lt;img src=&quot;/imgs/8081a82411af4a6bbee48be7ecf8dadf.png&quot; alt=&quot;&quot;&gt;</summary>
    
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/categories/python/"/>
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python之__repr__</title>
    <link href="https://github.com/jiangjiawei520/post/c113cf7f.html"/>
    <id>https://github.com/jiangjiawei520/post/c113cf7f.html</id>
    <published>2024-04-28T15:19:01.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<p>__repr__是Python中的一个特殊方法，用于返回对象的可打印字符串表示形式。它应该返回一个字符串，该字符串应该是一个有效的Python表达式，可以用来创建该对象的副本。通常情况下，__repr__方法的返回值应该是一个能够明确表示对象的字符串。</p><p>例如，假设我们有一个名为Person的类，它有两个属性：name和age。我们可以为Person类定义一个__repr__方法来返回该对象的字符串表示形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return f&quot;Person(name=&#x27;&#123;self.name&#125;&#x27;, age=&#123;self.age&#125;)&quot;</span><br></pre></td></tr></table></figure><p>当我们打印一个Person对象时，它将调用__repr__方法来获取其字符串表示形式： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = Person(&quot;Alice&quot;, 25)</span><br><span class="line">print(person)  # 输出: Person(name=&#x27;Alice&#x27;, age=25)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;__repr__是Python中的一个特殊方法，用于返回对象的可打印字符串表示形式。它应该返回一个字符串，该字符串应该是一个有效的Python表达式，可以用来创建该对象的副本。通常情况下，__repr__方法的返回值应该是一个能够明确表示对象的字符串。&lt;/p&gt;
&lt;p&gt;例如，</summary>
      
    
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/categories/python/"/>
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python之可见性和装饰器</title>
    <link href="https://github.com/jiangjiawei520/post/acd3e07f.html"/>
    <id>https://github.com/jiangjiawei520/post/acd3e07f.html</id>
    <published>2024-04-28T14:12:36.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>​属性通常设置为private或protected，__name表示private属性，_name表示protected属性<br>​方法通常设置为public</p><h3 id="python中以单下划线和双下滑线开头的属性和方法"><a href="#python中以单下划线和双下滑线开头的属性和方法" class="headerlink" title="python中以单下划线和双下滑线开头的属性和方法"></a>python中以单下划线和双下滑线开头的属性和方法</h3><p>​以单下划线 (_) 开头的属性和方法（内部属性&#x2F;方法）：私有化属性或⽅法，类内部、类对象和⼦类可以访问。其他模块通过from module_name import *不能将其导入；但通过import module_name依然可以导入。</p><p>​以双下划线 (__) 开头并且不以双下划线结尾的属性和方法（私有属性&#x2F;方法）：某个属性或方法只能在当前类内部被使用，类外部不能调用。不能调用是因为Python私有属性存储时其名字做了修改，将“__属性名”存储时重命名为”_类名__属性名”。其他模块通过from module_name import *不能将其导入；但通过import module_name依然可以导入。</p><span id="more"></span><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="双下划线开头私有属性只能在当前类内部被访问，类外部直接访问时报错"><a href="#双下划线开头私有属性只能在当前类内部被访问，类外部直接访问时报错" class="headerlink" title="双下划线开头私有属性只能在当前类内部被访问，类外部直接访问时报错"></a>双下划线开头私有属性只能在当前类内部被访问，类外部直接访问时报错</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        # 创建私有属性</span><br><span class="line">        self.__name = name</span><br><span class="line">        # 创建公共属性</span><br><span class="line">        self.age = age</span><br><span class="line"> </span><br><span class="line">    def study(self, course_name):</span><br><span class="line">        print(&quot;&#123;&#125;正在学习&#123;&#125;&quot;.format(self.__name, course_name))  # self.__name 只能在当前类内部被调用</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">stu = Student(&quot;张三&quot;, 8)</span><br><span class="line"># print(stu.__name)  # &#x27;Student&#x27; object has no attribute &#x27;__name&#x27;  私有属性类不能在类外部直接访问</span><br><span class="line"> </span><br><span class="line">#类外部间接访问私有属性：通过公共方法在类内部访问私有属性</span><br><span class="line">stu.study(&quot;程序设计&quot;)  # 张三正在学习程序设计</span><br><span class="line"> </span><br><span class="line">print(stu.age)  # 8</span><br></pre></td></tr></table></figure><h4 id="单下划线开头的内部属性可以在类外部直接访问"><a href="#单下划线开头的内部属性可以在类外部直接访问" class="headerlink" title="单下划线开头的内部属性可以在类外部直接访问"></a>单下划线开头的内部属性可以在类外部直接访问</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class MyClass:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self._internal_var = &quot;Internal Variable&quot;</span><br><span class="line">        self.__private_var = &quot;Private Variable&quot;</span><br><span class="line"> </span><br><span class="line">    def _internal_method(self):</span><br><span class="line">        print(&quot;This is an internal method.&quot;)</span><br><span class="line"> </span><br><span class="line">    def __private_method(self):</span><br><span class="line">        print(&quot;This is a private method.&quot;)</span><br><span class="line"> </span><br><span class="line">    def public_method(self):</span><br><span class="line">        print(&quot;This is a public method.&quot;)</span><br><span class="line">        self._internal_method()</span><br><span class="line">        self.__private_method()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">obj = MyClass()</span><br><span class="line">print(obj._internal_var)  # 内部属性可以在类外部被直接访问。输出: Internal Variable</span><br><span class="line"> </span><br><span class="line"># print(obj.__private_var)  # 报错。原因是私有属性无法在类外部直接访问</span><br><span class="line"> </span><br><span class="line">obj.public_method()  # 输出: This is a public method.</span><br><span class="line">                     #      This is an internal method.</span><br><span class="line">                     #      This is a private method.</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>​装饰器的作用：不修改被修饰对象源代码和调用方式前提下，为被修饰对象添加额外功能（即有新需求时，可以对现有代码进行扩展，但是不能对源代码进行修改）。<br>​装饰器的使用方法：通常放在类、函数或方法声明之前，通过@符号将装饰器应用于类、函数或方法。<br>​装饰器的使用场景：插入日志、性能测试、事务处理、缓存、权限校验等应用场景，有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</p><h3 id="无参装饰器"><a href="#无参装饰器" class="headerlink" title="无参装饰器"></a>无参装饰器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 定义一个装饰器</span><br><span class="line">def display_time(func):  # 参数func等同于：调用装饰器后要运行哪个函数，则将哪个函数带入</span><br><span class="line">    def wrapper():  # 运行这个函数时需要运行哪些内容</span><br><span class="line">        t1 = time.time()  # 启一个记录初始时间的定时器</span><br><span class="line">        # func()  # 运行一下装饰器中调用的函数（但是这种方法装饰器中调用的函数返回值不会传入装饰器中）</span><br><span class="line">        res = func()  # 将装饰器中调用的函数返回值记录一下放在res中</span><br><span class="line">        t2 = time.time()  # 启一个记录截止时间的定时器</span><br><span class="line">        print(t2 - t1)</span><br><span class="line">        return res  # 在装饰器中将函数的返回结果再次返回</span><br><span class="line">    return wrapper</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 定义一个求质数的方法</span><br><span class="line">def is_prime(num):</span><br><span class="line">    if num &lt;= 1:</span><br><span class="line">        return False</span><br><span class="line">    if num == 2:</span><br><span class="line">        return True</span><br><span class="line">    for i in range(2, num):</span><br><span class="line">        if num % i == 0:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@display_time  # 等同于：count_prime_nums=display_time(count_prime_nums)</span><br><span class="line">def count_prime_nums():  # 求2~10000之间的所有质数</span><br><span class="line">    count1 = 0</span><br><span class="line">    for i in range(2, 10000):</span><br><span class="line">        if is_prime(i):</span><br><span class="line">            # print(i)</span><br><span class="line">            count1 += 1  # 统计质数总个数</span><br><span class="line">    return count1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    c = count_prime_nums()</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><p>总结：</p><p>​python解释器解释到@display_time就会调用display_time函数。<br>​调用display_time函数时，会将被装饰函数count_prime_nums当做实参传入，返回一个闭包函数wrapper，将wrapper赋值给函数名count_prime_nums。<br>​调用count_prime_nums函数，执行的是wrapper()，在wrapper的函数体内再执行原始的count_prime_nums函数。<br>​当被装饰函数count_prime_nums有返回值时，wrapper函数则需要将被装饰函数的值进行返回。如果不返回，则输出的结果就是None。</p><h3 id="有参装饰器"><a href="#有参装饰器" class="headerlink" title="有参装饰器"></a>有参装饰器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 定义一个装饰器</span><br><span class="line">def display_time(func):  # 参数func等同于：调用装饰器后要运行哪个函数，则将哪个函数带入</span><br><span class="line">    def wrapper(*args):  # 运行这个函数时需要运行哪些内容</span><br><span class="line">        t1 = time.time()  # 启一个记录初始时间的定时器</span><br><span class="line">        # func()  # 运行一下装饰器中调用的函数（但是这种方法装饰器中调用的函数返回值不会传入装饰器中）</span><br><span class="line">        res = func(*args)  # 将装饰器中调用的函数返回值记录一下放在res中</span><br><span class="line">        t2 = time.time()  # 启一个记录截止时间的定时器</span><br><span class="line">        print(t2 - t1)</span><br><span class="line">        return res  # 在装饰器中将函数的返回结果再次返回</span><br><span class="line">    return wrapper</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 定义一个求质数的方法</span><br><span class="line">def is_prime(num):</span><br><span class="line">    if num &lt;= 1:</span><br><span class="line">        return False</span><br><span class="line">    if num == 2:</span><br><span class="line">        return True</span><br><span class="line">    for i in range(2, num):</span><br><span class="line">        if num % i == 0:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@display_time  # 调用装饰器</span><br><span class="line">def count_prime_nums(max_num):  # 求2~10000之间的所有质数</span><br><span class="line">    count1 = 0</span><br><span class="line">    for i in range(2, max_num):</span><br><span class="line">        if is_prime(i):</span><br><span class="line">            # print(i)</span><br><span class="line">            count1 += 1  # 统计2~10000之前的质数总个数</span><br><span class="line">    return count1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    c = count_prime_nums(2000)</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><p>总结：</p><p>​被装饰函数func的参数是什么样子，wrapper的参数就应该什么样子<br>​func的返回值什么样子，wrapper的返回值就应该什么样子<br>​func的属性什么样子，wrapper的属性就应该什么样子 &#x3D;&#x3D;》from functools import wraps</p><h2 id="property对象和装饰器"><a href="#property对象和装饰器" class="headerlink" title="property对象和装饰器"></a>property对象和装饰器</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>简化访问私有属性，提供开放性接口，供外界访问。</p><h3 id="property实现原理"><a href="#property实现原理" class="headerlink" title="property实现原理"></a>property实现原理</h3><p>属性定义为私有属性时，往往需要两个函数分别用来获取属性值（get方法）和设置属性值（set方法），使用property取代get和set方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">使用property对象修改私有属性值</span><br><span class="line">property(fget=None, fset=None, fdel=None, doc=None)</span><br><span class="line">说明：</span><br><span class="line">fget 是获取属性值的函数。</span><br><span class="line">fset 是设置（修改）属性值的函数。</span><br><span class="line">fdel 是删除属性值的函数。</span><br><span class="line">doc 是属性描述信息。如果省略，会把 fget 方法的文档字符串（docstring）拿来用（如果有的话）。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__num = 100</span><br><span class="line"> </span><br><span class="line">    # get_num函数专门用来获取__num属性值</span><br><span class="line">    def get_num(self):</span><br><span class="line">        return self.__num</span><br><span class="line"> </span><br><span class="line">    # set_num函数专门用来设置__num属性值    </span><br><span class="line">    def set_num(self, new_num):</span><br><span class="line">        self.__num = new_num</span><br><span class="line"> </span><br><span class="line">    # 定义的num就是在外面用到的属性名，property括号中前面放get方法的名字，后面放set方法的名字</span><br><span class="line">    num = property(get_num, set_num)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">t = Test()</span><br><span class="line">t.num = 200  # 直接通过访问属性的形式来调用set_num()方法，并将等号右边的参数传进去</span><br><span class="line">print(t.num)  # 通过同样的方式来调用get_num()方法</span><br><span class="line"># 虽然都是t.num的方式调用方法，Python解释器会根据是否有赋值来选择调用的方法</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">使用property装饰器修改私有属性值</span><br><span class="line">被 @property 装饰的方法是获取属性值的方法，被装饰方法的名字会被用做属性名</span><br><span class="line">被 @属性名.setter 装饰的方法是设置属性值的方法</span><br><span class="line">被 @属性名.deleter 装饰的方法是删除属性值的方法</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__num = 100</span><br><span class="line"> </span><br><span class="line">    # 在get方法的上面写上@property，函数的名字就是属性的名字</span><br><span class="line">    @property</span><br><span class="line">    def num(self):</span><br><span class="line">        return self.__num</span><br><span class="line"> </span><br><span class="line">    # 在set方法的上面写上@属性名.setter，函数的名字跟get方法相同，都等于属性的名字</span><br><span class="line">    @num.setter</span><br><span class="line">    def num(self, new_num):</span><br><span class="line">        self.__num = new_num</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">t = Test()</span><br><span class="line">t.num = 200  # 调用了下面的num()方法进行设置</span><br><span class="line">print(t.num)  # 调用了上面的num()方法获取值</span><br></pre></td></tr></table></figure><h3 id="使用property细节问题"><a href="#使用property细节问题" class="headerlink" title="使用property细节问题"></a>使用property细节问题</h3><p>getter方法名和属性名一致（上例中是num）。<br>setter方法名必须与getter方法名相同。<br>必须先定义getter方法，setter方法才能使用。<br>@property装饰器则是Python中的一种语法糖，它可以将一个类方法转换为一个属性，使得我们可以像访问普通属性一样调用该方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1.属性是公有属性时，使用property，必须使用setter方法</span><br><span class="line">2.若省略setter方法，此时该属性变成只读属性。如果此时仍然设置属性，会抛出异常 AttributeError: can&#x27;t set attribute。</span><br><span class="line">3.如果报错 RecursionError: maximum recursion depth exceeded while calling a Python object，很可能是对象属性名和 @property 装饰的方法名重名了，一般会在对象属性名前加一个下划线 _ 避免重名，并且表明这是一个受保护的属性。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Student:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name  </span><br><span class="line">        self.age = age</span><br><span class="line"> </span><br><span class="line">    # 获取私有属性</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        return self._name</span><br><span class="line"> </span><br><span class="line">    @name.setter</span><br><span class="line">    def name(self, value):</span><br><span class="line">        self._name = value</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">stu = Student(&quot;张三&quot;, 8)</span><br><span class="line">stu.name = &quot;李四&quot;</span><br><span class="line">print(stu.name)  # 李四</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;可见性&quot;&gt;&lt;a href=&quot;#可见性&quot; class=&quot;headerlink&quot; title=&quot;可见性&quot;&gt;&lt;/a&gt;可见性&lt;/h2&gt;&lt;p&gt;​	属性通常设置为private或protected，__name表示private属性，_name表示protected属性&lt;br&gt;​	方法通常设置为public&lt;/p&gt;
&lt;h3 id=&quot;python中以单下划线和双下滑线开头的属性和方法&quot;&gt;&lt;a href=&quot;#python中以单下划线和双下滑线开头的属性和方法&quot; class=&quot;headerlink&quot; title=&quot;python中以单下划线和双下滑线开头的属性和方法&quot;&gt;&lt;/a&gt;python中以单下划线和双下滑线开头的属性和方法&lt;/h3&gt;&lt;p&gt;​	以单下划线 (_) 开头的属性和方法（内部属性&amp;#x2F;方法）：私有化属性或⽅法，类内部、类对象和⼦类可以访问。其他模块通过from module_name import *不能将其导入；但通过import module_name依然可以导入。&lt;/p&gt;
&lt;p&gt;​	以双下划线 (__) 开头并且不以双下划线结尾的属性和方法（私有属性&amp;#x2F;方法）：某个属性或方法只能在当前类内部被使用，类外部不能调用。不能调用是因为Python私有属性存储时其名字做了修改，将“__属性名”存储时重命名为”_类名__属性名”。其他模块通过from module_name import *不能将其导入；但通过import module_name依然可以导入。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/categories/python/"/>
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python之列表、元组、字典、字符串和集合的区别与联系</title>
    <link href="https://github.com/jiangjiawei520/post/32391538.html"/>
    <id>https://github.com/jiangjiawei520/post/32391538.html</id>
    <published>2024-04-25T16:17:21.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python容器定义"><a href="#Python容器定义" class="headerlink" title="Python容器定义"></a>Python容器定义</h2><p>容器：用来存储和组织其他对象的对象。容器里面可以放很多东西，这些东西可以是字符串，可以是整数，可以是自定义类型，然后把这些东西有组织的存放在内存中<br>Python容器：列表(list)，元组(tuple)，集合(set)，字典(dict)，队列(queue)等</p><h2 id="区别与联系概括-★★★★★"><a href="#区别与联系概括-★★★★★" class="headerlink" title="区别与联系概括 ★★★★★"></a>区别与联系概括 ★★★★★</h2><table><thead><tr><th>数据类型</th><th>列表 (list)</th><th>元组 (tuple)</th><th>集合 (set)</th><th>字典 (dictionary)</th><th></th></tr></thead><tbody><tr><td>表示</td><td><code>[]</code></td><td><code>()</code></td><td><code>&#123;&#125;</code></td><td><code>&#123;&#125;</code></td><td></td></tr><tr><td>举例</td><td>a_list &#x3D; [1, True, ‘aa’]</td><td>a_tuple &#x3D; (1, True, ‘aa’)； t2 &#x3D; (1<code>,</code>)</td><td>a_set &#x3D; {1, True, ‘aa’}; s &#x3D; set( [1, True, ‘aa’])</td><td>a_dict &#x3D; {‘name’: ‘xuan’, ‘age’: 21}</td><td></td></tr><tr><td>是否有序</td><td>有序</td><td>有序</td><td><code>无序</code></td><td><code>无序</code></td><td></td></tr><tr><td>是否读写</td><td>读写</td><td><code>只读</code></td><td>读写</td><td>读写</td><td></td></tr><tr><td>空定义</td><td>a_list &#x3D; []</td><td>a_tuple &#x3D; ()</td><td>a_set &#x3D; set(); <br/>not_sure &#x3D; {}空字典</td><td>a_dict &#x3D; {}</td><td></td></tr><tr><td>元素可修改</td><td>a_list[0] &#x3D; 23</td><td><code>否</code></td><td><code>否</code></td><td>a_dict[‘age’] &#x3D; 30</td><td></td></tr><tr><td>下标访问</td><td>a_list[0] &#x3D; 23</td><td>a_tuple[0]</td><td><code>否</code></td><td>a_dict[‘age’] &#x3D; 30</td><td></td></tr><tr><td>添加元素</td><td><strong>+、append、extend、insert</strong></td><td><code>不可添加</code></td><td><strong>add、update</strong></td><td>a_dict[‘new_key’] &#x3D; ‘value’</td><td></td></tr><tr><td>删除元素</td><td><strong>del、remove、pop()、pop(1)、clear</strong></td><td><code>不可删除</code></td><td><strong>discard、remove、pop、clear</strong></td><td><strong>pop、popitem、clear</strong></td><td></td></tr><tr><td>元素查找</td><td><strong>index、count、in</strong></td><td><strong>in</strong></td><td><strong>in</strong></td><td>a_dict[‘key’]</td><td></td></tr><tr><td>布尔真值</td><td>非空</td><td>非空</td><td>非空</td><td>非空</td><td></td></tr><tr><td>定义</td><td>列表(list)是有序的集合，可以存放不同数据类型的数据，并且list中的每个元素的都对应着一个索引来标记其位置，且索引从0开始。</td><td>tuple与list类似，不同之处在于tuple中的元素不能进行修改。而且tuple使用小括号，list使用方括号。</td><td>set()函数是创建一个无序不重复元素集，可添加，删除数据，还可以计算交集、差集、并集等。<br/>python 的集合类型和 其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.集合对象还支持union(联合), intersection(交), difference(差)和sysmmetricdifference(对称差集)等数学运算,和我们初中数学学的集合的非常的相似。</td><td>dic字典是另一种可变的容器模型，且可存储任意类型对象。字典的每个键值(key:value)对用冒号(<code>:</code>)分割，每个对之间用逗号(,)分割，整个字典包括在花括号{}中</td><td></td></tr></tbody></table><span id="more"></span><h2 id="全方位分析-★★★☆☆"><a href="#全方位分析-★★★☆☆" class="headerlink" title="全方位分析 ★★★☆☆"></a>全方位分析 ★★★☆☆</h2><table><thead><tr><th>数据结构</th><th>表示</th><th>分析</th></tr></thead><tbody><tr><td><strong>列表list</strong></td><td>[]</td><td>列表list，用中括号“[ ]”表示<br/>1.任意对象的有序集合<br/>列表是一组任意类型的值，按照一定顺序组合而成的<br/>2.通过偏移读取<br/>组成列表的值叫做元素(Elements)。每一个元素被标识一个索引，第一个索引是0，序列的功能都能实现<br/>3.可变长度，异构以及任意嵌套<br/>列表中的元素可以是任意类型，甚至是列表类型，也就是说列表可以嵌套<br/>4.可变的序列<br/>支持索引、切片、合并、删除等等操作，它们都是在原处进行修改列表<br/>5.对象引用数组<br/>列表可以当成普通的数组，每当用到引用时，Python总是会将这个引用指向一个对象，所以程序只需处理对象的操作。当把一个对象赋给一个数据结构元素或变量名时，Python总是会存储对象的引用，而不是对象的一个拷贝</td></tr><tr><td><strong>元组tuple</strong></td><td>()</td><td>1.任意对象的有序集合<br/>与列表相同<br/>2.通过偏移存取<br/>与列表相同<br/>3.属于不可变序列类型<br/>类似于字符串，但元组是不可变的，不支持在列表中任何原处修改操作，不支持任何方法调用<br/>4.固定长度、异构、任意嵌套<br/>固定长度即元组不可变，在不被拷贝的情况下长度固定，其他同列表<br/>5.对象引用的数组<br/>与列表相似，元组是对象引用的数组&gt;<br/><br/>tuple和list相比<br/>1.比列表操作速度快<br/>2.对数据“写保护“<br/>3.可用于字符串格式化中<br/>4.可作为字典的key<br/></td></tr><tr><td><strong>字典dic</strong></td><td>{}</td><td>1.通过键而不是偏移量来读取<br/>字典就是一个关联数组，是一个通过关键字索引的对象的集合，使用键-值（key-value）进行存储，查找速度快<br/><br/>2.任意对象的无序集合<br/>字典中的项没有特定顺序，以“键”为象征<br/><br/>3.可变长、异构、任意嵌套<br/>同列表，嵌套可以包含列表和其他的字典等<br/><br/>4.属于可变映射类型<br/>因为是无序，故不能进行序列操作，但可以在远处修改，通过键映射到值。字典是唯一内置的映射类型（键映射到值的对象）<br/><br/>5.对象引用表<br/>字典存储的是对象引用，不是拷贝，和列表一样。字典的key是不能变的，list不能作为key，字符串、元组、整数等都可以<br/><br/>dic和list比较，dict有以下几个特点:<br/>1.查找和插入的速度极快，不会随着key的增加而增加<br/>2.需要占用大量的内存，内存浪费多<br/>而list相反：<br/>1.查找和插入的时间随着元素的增加而增加<br/>2.占用空间小，浪费内存很少<br/>所以，dict是用空间来换取时间的一种方法<br/></td></tr><tr><td><strong>集合</strong></td><td>()</td><td>1.是一组key的集合，但不存储value，并且key不能重复<br/><br/>创建一个set，需要提供一个list作为输入集合,s &#x3D; set([1,2,3]),注意，传入的参数 [1, 2, 3] 是一个list，而显示的 set([1, 2, 3]) 只是告诉你这个set内部有1，2，3这3个元素，显示的[ ]不表示这是一个list<br/><br/>2.重复元素在set中自动被过滤<br/><br/>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作<br/>还有一种集合是forzenset( )，是冻结的集合，它是不可变的，存在哈希值，好处是它可以作为字典的key，也可以作为其它集合的元素。缺点是一旦创建便不能更改，没有add，remove方法<br/><br/>3. set和dict对比<br/><br/>1.set和dict的唯一区别仅在于没有存储对应的value<br/>2.set的原理和dict一样，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”&lt;br&#x2F;</td></tr></tbody></table><h2 id="相互PK-★★☆☆☆"><a href="#相互PK-★★☆☆☆" class="headerlink" title="相互PK ★★☆☆☆"></a>相互PK ★★☆☆☆</h2><table><thead><tr><th>比较</th><th>详情</th></tr></thead><tbody><tr><td><strong>字典dict和列表list的比较</strong></td><td>dict的查找和插入的速度极快，不会随着key的增加而变慢。但是需要占用大量的内存，内存浪费多。相反，list查找和插入的时间随着元素的增加而增加。但是占用空间小，浪费内存很少。</td></tr><tr><td><strong>字典dict和集合set比较</strong></td><td>唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</td></tr><tr><td><strong>元组tuple与列表list比较</strong></td><td>tuple与list类似，不同之处在于tuple中的元素不能进行修改。而且tuple使用小括号，list使用方括号。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Python容器定义&quot;&gt;&lt;a href=&quot;#Python容器定义&quot; class=&quot;headerlink&quot; title=&quot;Python容器定义&quot;&gt;&lt;/a&gt;Python容器定义&lt;/h2&gt;&lt;p&gt;容器：用来存储和组织其他对象的对象。容器里面可以放很多东西，这些东西可以是字符串，可以是整数，可以是自定义类型，然后把这些东西有组织的存放在内存中&lt;br&gt;Python容器：列表(list)，元组(tuple)，集合(set)，字典(dict)，队列(queue)等&lt;/p&gt;
&lt;h2 id=&quot;区别与联系概括-★★★★★&quot;&gt;&lt;a href=&quot;#区别与联系概括-★★★★★&quot; class=&quot;headerlink&quot; title=&quot;区别与联系概括 ★★★★★&quot;&gt;&lt;/a&gt;区别与联系概括 ★★★★★&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;列表 (list)&lt;/th&gt;
&lt;th&gt;元组 (tuple)&lt;/th&gt;
&lt;th&gt;集合 (set)&lt;/th&gt;
&lt;th&gt;字典 (dictionary)&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;表示&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;举例&lt;/td&gt;
&lt;td&gt;a_list &amp;#x3D; [1, True, ‘aa’]&lt;/td&gt;
&lt;td&gt;a_tuple &amp;#x3D; (1, True, ‘aa’)； t2 &amp;#x3D; (1&lt;code&gt;,&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;a_set &amp;#x3D; {1, True, ‘aa’}; s &amp;#x3D; set( [1, True, ‘aa’])&lt;/td&gt;
&lt;td&gt;a_dict &amp;#x3D; {‘name’: ‘xuan’, ‘age’: 21}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否有序&lt;/td&gt;
&lt;td&gt;有序&lt;/td&gt;
&lt;td&gt;有序&lt;/td&gt;
&lt;td&gt;&lt;code&gt;无序&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;无序&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否读写&lt;/td&gt;
&lt;td&gt;读写&lt;/td&gt;
&lt;td&gt;&lt;code&gt;只读&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读写&lt;/td&gt;
&lt;td&gt;读写&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空定义&lt;/td&gt;
&lt;td&gt;a_list &amp;#x3D; []&lt;/td&gt;
&lt;td&gt;a_tuple &amp;#x3D; ()&lt;/td&gt;
&lt;td&gt;a_set &amp;#x3D; set(); &lt;br/&gt;not_sure &amp;#x3D; {}空字典&lt;/td&gt;
&lt;td&gt;a_dict &amp;#x3D; {}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;元素可修改&lt;/td&gt;
&lt;td&gt;a_list[0] &amp;#x3D; 23&lt;/td&gt;
&lt;td&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘age’] &amp;#x3D; 30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;下标访问&lt;/td&gt;
&lt;td&gt;a_list[0] &amp;#x3D; 23&lt;/td&gt;
&lt;td&gt;a_tuple[0]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘age’] &amp;#x3D; 30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;添加元素&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;+、append、extend、insert&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;不可添加&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;add、update&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘new_key’] &amp;#x3D; ‘value’&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除元素&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;del、remove、pop()、pop(1)、clear&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;不可删除&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;discard、remove、pop、clear&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;pop、popitem、clear&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;元素查找&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;index、count、in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘key’]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布尔真值&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定义&lt;/td&gt;
&lt;td&gt;列表(list)是有序的集合，可以存放不同数据类型的数据，并且list中的每个元素的都对应着一个索引来标记其位置，且索引从0开始。&lt;/td&gt;
&lt;td&gt;tuple与list类似，不同之处在于tuple中的元素不能进行修改。而且tuple使用小括号，list使用方括号。&lt;/td&gt;
&lt;td&gt;set()函数是创建一个无序不重复元素集，可添加，删除数据，还可以计算交集、差集、并集等。&lt;br/&gt;python 的集合类型和 其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.集合对象还支持union(联合), intersection(交), difference(差)和sysmmetricdifference(对称差集)等数学运算,和我们初中数学学的集合的非常的相似。&lt;/td&gt;
&lt;td&gt;dic字典是另一种可变的容器模型，且可存储任意类型对象。字典的每个键值(key:value)对用冒号(&lt;code&gt;:&lt;/code&gt;)分割，每个对之间用逗号(,)分割，整个字典包括在花括号{}中&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/categories/python/"/>
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>docker容器常用知识</title>
    <link href="https://github.com/jiangjiawei520/post/999a0a70.html"/>
    <id>https://github.com/jiangjiawei520/post/999a0a70.html</id>
    <published>2024-04-22T09:18:39.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a><strong>Docker 是什么？</strong></h2><p>​    1. Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架包括系统。</p><p>​    2. Docker 是基于Go语言实现的云开源项目，诞生于2013年初，最初是dotCloud公司发起。由镜像(Image)、容器(Container)、仓库(Repository) 三大核心组成。</p><pre><code>   3. Docker 通过对应用组件的封装、分发、部署、运行等生命周期的管理，达到应用组件级别的“一次封装，到处运行”。这里应用组件，即可以是Web应用，也可以是一套数据库服务，甚至是一个操作系统或编译器。</code></pre><h2 id="为什么要使用-Docker？"><a href="#为什么要使用-Docker？" class="headerlink" title="为什么要使用 Docker？"></a><strong>为什么要使用 Docker？</strong></h2><p>​    1. Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><p>​    2. 更快速的交付和部署(使用docker，开发人员可以用镜像来快速构建一套标准的开发环境;开发完成之后，测试和运维人员可以直接使用相同环境来部署代码)。</p><p>​    3. 响应式部署和扩展(docker容器几乎可以在任意平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。可以在不同的平台轻松地迁移应用)。</p><p>​    4. 更简单的更新管理(使用Dockerfile，只需要修改小小的配置，就可以替代以往大量的更新工作)。</p><p>​      与传统的虚拟机对比</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529075343772-1700042586.png"><img src="/imgs/1610676-20200529075343772-1700042586.png" alt="img"></a></p><span id="more"></span><h2 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a><strong>Docker 架构</strong></h2><h3 id="Docker-核心三要素"><a href="#Docker-核心三要素" class="headerlink" title="Docker 核心三要素"></a>Docker 核心三要素</h3><p>​      1. 镜像（Image）：用于创建 Docker 容器的模板，相当于一个 root 文件系统。镜像内部是一个精简的操作系统和应用运行所需要的文件以及所有依赖（镜像不包含内核，容器都是共享所在Docker主机的内核），比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p><p>​      2. 容器（Container）：容器是镜像的运行时实例，可以从单个镜像启动一个或多个容器。</p><p>​      3. 仓库（Repository）：用于存放镜像，可以理解为代码控制中的代码仓库。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529083236188-1322739337.png"><img src="/imgs/1610676-20200529083236188-1322739337.png" alt="img"></a></p><h3 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h3><p>​      1. Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>​      2. Docker 容器通过 Docker 镜像来创建。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529083636028-1758306848.png"><img src="/imgs/1610676-20200529083636028-1758306848.png" alt="img"></a></p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529084433346-1189779290.png"><img src="/imgs/1610676-20200529084433346-1189779290.png" alt="img"></a></p><h2 id="核心架构-1"><a href="#核心架构-1" class="headerlink" title="核心架构"></a>核心架构</h2><p>​      1. Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>​      2. Docker 容器通过 Docker 镜像来创建。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529083636028-1758306848.png"><img src="/imgs/1610676-20200529083636028-1758306848-1713748943826-13.png" alt="img"></a></p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529084433346-1189779290.png"><img src="/imgs/1610676-20200529084433346-1189779290-1713748943827-15.png" alt="img"></a></p><p>​    3. 运行原理</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529084735750-1592954389.png"><img src="/imgs/1610676-20200529084735750-1592954389.png" alt="img"></a></p><p>​      1. 命令行工具或CLI在被称为用户空间的内存中运行，就像是在操作系统上运行的其他程序。运行 Docker 可以认为是在用户空间运行着两个程序：一个是 Docker 守护进程，另一个是 DockerCLI，DockerCLI 是与用户交互的 Docker 程序。上图也显示了三个运行着的容器，每个都是以 Docker 守护程序的子进程运行，封装在容器中。在容器中运行的程序只能访问该容器内部的内存空间和资源（除非特别规定可以访问容器外部资源）。</p><p>​      2. Docker 可以执行、复制和轻松的分发容器，Docker 通过一种打包和分发的软件完成传统容器的封装，这个用来充当容器（Container）分发角色的组件被称为 镜像（Image）。</p><h2 id="安装部署（Centos7）"><a href="#安装部署（Centos7）" class="headerlink" title="安装部署（Centos7）"></a><strong>安装部署（Centos7）</strong></h2><h3 id="查看内核版本（高于3-10）"><a href="#查看内核版本（高于3-10）" class="headerlink" title="查看内核版本（高于3.10）"></a>查看内核版本（高于3.10）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 [root@docker ~]# uname -r</span><br><span class="line">2 3.10.0-327.el7.x86_64  # 必须是3.10版本以上</span><br></pre></td></tr></table></figure><h3 id="卸载旧版本-Docker"><a href="#卸载旧版本-Docker" class="headerlink" title="卸载旧版本 Docker"></a>卸载旧版本 Docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 [root@docker ~]# yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line">2 Loaded plugins: fastestmirror</span><br><span class="line">3 No Match for argument: docker</span><br><span class="line">4 No Match for argument: docker-common</span><br><span class="line">5 No Match for argument: docker-selinux</span><br><span class="line">6 No Match for argument: docker-engine</span><br><span class="line">7 No Packages marked for removal</span><br></pre></td></tr></table></figure><h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 1 [root@localhost ~]# yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"> 2 Loaded plugins：fastestmirror</span><br><span class="line"> 3 Loading mirror speeds from cached hostfile</span><br><span class="line"> 4  * base: centos.ustc.edu.cn</span><br><span class="line"> 5  * extras: mirrors.aliyun.com</span><br><span class="line"> 6  * updates: mirrors.cn99.com</span><br><span class="line"> 7 软件包 device-mapper-persistent-data-0.7.3-3.el7.x86_64 已安装并且是最新版本</span><br><span class="line"> 8 软件包 7:lvm2-2.02.180-10.el7_6.8.x86_64 已安装并且是最新版本</span><br><span class="line"> 9 正在解决依赖关系</span><br><span class="line">10 --&gt; 正在检查事务</span><br><span class="line">11 ---&gt; 软件包 yum-utils.noarch.0.1.1.31-50.el7 将被 安装</span><br><span class="line">12 --&gt; 正在处理依赖关系 python-kitchen，它被软件包 yum-utils-1.1.31-50.el7.noarch </span><br></pre></td></tr></table></figure><h3 id="设置-yum-源"><a href="#设置-yum-源" class="headerlink" title="设置 yum 源"></a>设置 yum 源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 1 ### 中央仓库</span><br><span class="line"> 2 [root@localhost ~]# yum-config-manager --add-repo http://download.docker.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"> 3 Loaded plugins: fastestmirror</span><br><span class="line"> 4 adding repo from: http://download.docker.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"> 5 grabbing file http://download.docker.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"> 6 repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"> 7 </span><br><span class="line"> 8 ### 阿里云</span><br><span class="line"> 9 [root@localhost ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">10 Loaded plugins: fastestmirror</span><br><span class="line">11 adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">12 grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">13 repo saved to /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> 1 ### 查看仓库中 Docker的版本</span><br><span class="line"> 2 [root@docker ~]# yum list docker-ce --showduplicates | sort -r</span><br><span class="line"> 3  * updates: mirrors.nju.edu.cn</span><br><span class="line"> 4 Loading mirror speeds from cached hostfile</span><br><span class="line"> 5 Loaded plugins: fastestmirror</span><br><span class="line"> 6 Installed Packages</span><br><span class="line"> 7  * extras: mirrors.nju.edu.cn</span><br><span class="line"> 8 docker-ce.x86_64            3:19.03.9-3.el7                    docker-ce-stable </span><br><span class="line"> 9 docker-ce.x86_64            3:19.03.8-3.el7                    docker-ce-stable </span><br><span class="line">10 docker-ce.x86_64            3:19.03.7-3.el7                    docker-ce-stable 30 docker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable </span><br><span class="line">31 docker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable </span><br><span class="line">32 docker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable </span><br><span class="line">33 docker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable </span><br><span class="line">34 docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">35 docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">36 docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">37 docker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable 43 docker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable </span><br><span class="line">44 docker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">45 docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">46 docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">47 </span><br><span class="line">48 ### 安装最新版本</span><br><span class="line">49 [root@localhost ~]# yum install -y docker-ce</span><br><span class="line">50 Loaded plugins: fastestmirror</span><br><span class="line">51 Loading mirror speeds from cached hostfile</span><br><span class="line">52  * base: mirrors.nju.edu.cn</span><br><span class="line">53  * extras: mirrors.nju.edu.cn</span><br><span class="line">54  * updates: mirrors.nju.edu.cn</span><br><span class="line">55 Resolving Dependencies</span><br><span class="line">56 --&gt; Running transaction check</span><br><span class="line">57 ---&gt; Package docker-ce.x86_64 3:19.03.10-3.el7 will be installed</span><br><span class="line">58 --&gt; Processing Dependency: container-selinux &gt;= 2:2.74 for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">59 --&gt; Processing Dependency: containerd.io &gt;= 1.2.2-3 for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">60 --&gt; Processing Dependency: libseccomp &gt;= 2.3 for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">61 --&gt; Processing Dependency: docker-ce-cli for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">62 --&gt; Processing Dependency: libcgroup for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">63 --&gt; Processing Dependency: libseccomp.so.2()(64bit) for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">64 </span><br><span class="line">65 ### 安装特定版本</span><br><span class="line">66 yum install -y docker-ce-版本 docker-ce-selinux-版本 docker-ce-cli-版本 containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 [root@localhost ~]# systemctl start docker</span><br><span class="line">2 [root@localhost ~]# systemctl enable docker</span><br><span class="line">3 Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><h4 id="获取自己的镜像加速地址：点击“创建我的容器镜像”"><a href="#获取自己的镜像加速地址：点击“创建我的容器镜像”" class="headerlink" title="获取自己的镜像加速地址：点击“创建我的容器镜像”"></a><a href="https://dev.aliyun.com/search.html">获取自己的镜像加速地址</a>：点击“创建我的容器镜像”</h4><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529141619252-919434962.png"><img src="/imgs/1610676-20200529141619252-919434962.png" alt="img"></a></p><h4 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 [root@docker ~]# mkdir -p /etc/docker/daemon.json</span><br><span class="line">2 [root@docker ~]# vi /etc/docker/daemon.json</span><br><span class="line">4 &#123;</span><br><span class="line">5   &quot;registry-mirrors&quot;: [&quot;https://78ssvya7.mirror.aliyuncs.com&quot;]</span><br><span class="line">6 &#125;8 [root@docker ~]# systemctl daemon-reload</span><br><span class="line">9 [root@docker ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Docker-核心操作"><a href="#Docker-核心操作" class="headerlink" title="Docker 核心操作"></a><strong>Docker 核心操作</strong></h2><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>​    1. 简介：镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件。它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>​    2. 镜像分层</p><p>​      1. 原理：Docker 镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS（联合文件系统）：是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>​        1. 一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><p>​        2. Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>​        3. 共享资源。一个基础镜像可以实例多个容器。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529205925608-1115947547.png"><img src="/imgs/1610676-20200529205925608-1115947547.png" alt="img"></a></p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529205934949-2014645065.png"><img src="/imgs/1610676-20200529205934949-2014645065.png" alt="img"></a></p><h3 id="多架构镜像（Multi-architecture-Image）"><a href="#多架构镜像（Multi-architecture-Image）" class="headerlink" title="多架构镜像（Multi-architecture Image）"></a>多架构镜像（Multi-architecture Image）</h3><p>​      1. 原理：在拉取镜像的时候，Docker 客户端会调用 Docker 镜像仓库服务的 API 完成拉取。如果该镜像有 Manifest 列表，则 Docker 客户端会找到当前主机架构对应的 Manifest 并解析出组成该镜像的镜像层加密ID，然后从镜像仓库中拉取每个镜像层。</p><p>​      2. 作用：是为了解决镜像支持不同架构（Linux、Windows、ARM等）的问题。为了实现这个特性，镜像仓库服务API支持两种重要的结构：Manifest列表和Manifest。Manifest列表是指某个镜像标签支持的架构列表，其支持的每种架构都有自己的Manifest定义，其中列举了镜像的构成。如下图所示，图中左侧是Manifest列表，其中包含了该镜像支持的每种架构。Manifest列表的每一项都有一个箭头，指向具体的Manifest，其中包含了镜像配置和镜像层数据。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529210351739-1165288683.png"><img src="/imgs/1610676-20200529210351739-1165288683.png" alt="img"></a></p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p>​      <strong><a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529204157038-805203922.png"><img src="/imgs/1610676-20200529204157038-805203922.png" alt="img"></a></strong></p><h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><p>​    1. 容器是镜像的运行时实例，可以从单个镜像启动一个或多个容器。</p><p>​    2. 相对于虚拟机，容器较轻量级，而且容器启动非常快————与虚拟机运行在完整的操作系统之上相比，<strong>容器会共享其所在主机的操作系统&#x2F;内核</strong>（一个很简单是证明方法就是在容器内部查看下进程，在容器所在主机的操作系统上也能找到容器内部运行的进程（由于容器拥有隔离的PID，所以进程号会不同，但是进程确是相同的））。</p><p>​    3. Docker在创建容器的时候会为每个容器分配一个唯一的标识符，也会分配一个人性化的名称（如果用户没有指定名称的话）。</p><p>​    4. Docker容器有四种状态：运行中（Up）、暂停中（Paused）、已退出（Exited）、重新启动中（一种临时状态），状态转移图如下：</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530081044810-829723354.png"><img src="/imgs/1610676-20200530081044810-829723354.png" alt="img"></a></p><p>​    5. 常用操作</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530101902904-2079806059.png"><img src="/imgs/1610676-20200530101902904-2079806059.png" alt="img"></a></p><p>​    6. 重启策略（<code>--restart</code> 重启策略）</p><p>​      1. always：除非容器被明确停止，否则会一直尝试重启处于停止状态的容器。当Docker daemon重启的时候，停止的容器也会被重启。</p><p>​      2. unless-stopped：unless-stopped 和 always 最大区别的就是使用 unless-stopped 策略并处于已退出状态的容器，不会在Docker daemon重启的时候被重启。</p><p>​      3. on-failure：退出容器并且返回值不是0的时候重启容器，就算容器处于已退出状态，在Docker daemon重启的时候，容器也会重启。</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530153409959-450638579.png"><img src="/imgs/1610676-20200530153409959-450638579.png" alt="img"></a></p><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>​    1. 网络容器模型：Closed容器、Bridged容器（默认）、Joined容器、Open容器，所有的Docker容器都要符合这四种模型中的一种。这些模型定义了一个容器如何与其他的本地容器、主机网络进行通信。</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530114232299-740108263.png"><img src="/imgs/1610676-20200530114232299-740108263.png" alt="img"></a></p><p>​    2. Closed 容器：不允许任何的网络流量，运行在这种容器中的进程只能访问本地回环接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 # 可以看到，Closed容器只有一个回环接口</span><br><span class="line">2 [root@server ~]# docker run --name centos centos:latest ip a</span><br><span class="line">3 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">4     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5     inet 127.0.0.1/8 scope host lo</span><br><span class="line">6        valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>​    3. Bridged 容器：默认的网络容器模型，有两个接口，一个是本地回环接口，另一个接口通过网桥连接到主机网络。可以通过主机网络访问任何主机网络能访问的外部网络。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 一个本地回环接口，一个桥接到主机网络的接口</span><br><span class="line"> 2 [root@server ~]#  docker run --network bridge centos:latest ip a;</span><br><span class="line"> 3 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line"> 4     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line"> 5     inet 127.0.0.1/8 scope host lo</span><br><span class="line"> 6        valid_lft forever preferred_lft forever</span><br><span class="line"> 7 255: eth0@if256: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line"> 8     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"> 9     inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">10        valid_lft forever preferred_lft forever</span><br><span class="line">11 [root@server ~]#  ping -c 2 www.baidu.com</span><br><span class="line">12 PING www.a.shifen.com (180.101.49.12) 56(84) bytes of data.</span><br><span class="line">13 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=1 ttl=50 time=29.0 ms</span><br><span class="line">14 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=2 ttl=50 time=28.4 ms</span><br></pre></td></tr></table></figure><p>​    4. Joined 容器：所有容器共享一个网络栈，容器之间没有任何网络隔离。Joined容器通过将某一个容器接口的访问权限提供给另外一个新的容器来构建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 创建一个closed容器，看下其内部网络状态，可以看到容器内部监听的是39439端口</span><br><span class="line"> 2 [root@server ~]# docker run -d --name join-base-container --network none centos:latest</span><br><span class="line"> 3 e2907c7a889d209734f63309a5351687ac2761489e129cd6a7d6a392234a3cde</span><br><span class="line"> 4 [root@server ~]# docker exec join-base-container netstat -al</span><br><span class="line"> 5 Active Internet connections (servers and established)</span><br><span class="line"> 6 Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line"> 7 tcp        0      0 0.0.0.0:39439           0.0.0.0:*               LISTEN      </span><br><span class="line"> 8 Active UNIX domain sockets (servers and established)</span><br><span class="line"> 9 Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class="line">10 </span><br><span class="line">11 # 创建一个基于上面容器的joined容器，发现其共享了上面的close容器中的网络</span><br><span class="line">12 [root@server ~]# docker run --network container:join-base-container centos:latest netstat -al</span><br><span class="line">13 Active Internet connections (servers and established)</span><br><span class="line">14 Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line">15 tcp        0      0 0.0.0.0:39439           0.0.0.0:*               LISTEN      </span><br><span class="line">16 Active UNIX domain sockets (servers and established)</span><br><span class="line">17 Proto RefCnt Flags       Type       State         I-Node Path</span><br></pre></td></tr></table></figure><p>​    5. Open容器：没有网络容器，共享主机网络，并且对主机网络有完全的访问权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 发现open容器里能访问主机所有的网络接口</span><br><span class="line"> 2 [root@server ~]#  docker run --network host centos:latest ip a</span><br><span class="line"> 3 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line"> 4     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line"> 5     inet 127.0.0.1/8 scope host lo</span><br><span class="line"> 6        valid_lft forever preferred_lft forever</span><br><span class="line"> 7     inet6 ::1/128 scope host </span><br><span class="line"> 8        valid_lft forever preferred_lft forever</span><br><span class="line"> 9 2: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">10     link/ether 8c:ec:4b:ab:6d:38 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">11     inet 10.55.2.40/24 brd 10.55.2.255 scope global noprefixroute dynamic eno1</span><br><span class="line">12        valid_lft 522693sec preferred_lft 522693sec</span><br><span class="line">13     inet6 fe80::7b57:66c8:6d06:833d/64 scope link noprefixroute </span><br><span class="line">14        valid_lft forever preferred_lft forever</span><br><span class="line">15 3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">16     link/ether 02:42:cc:a9:3a:68 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">17     inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">18        valid_lft forever preferred_lft forever</span><br><span class="line">19     inet6 fe80::42:ccff:fea9:3a68/64 scope link </span><br><span class="line">20        valid_lft forever preferred_lft forever</span><br><span class="line">21 4: vboxnet0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">22     link/ether 0a:00:27:00:00:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">23     inet 192.168.99.1/24 brd 192.168.99.255 scope global vboxnet0</span><br><span class="line">24        valid_lft forever preferred_lft forever</span><br><span class="line">25     inet6 fe80::800:27ff:fe00:0/64 scope link </span><br><span class="line">26        valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>​    6. 常用操作</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530152902816-1058144649.png"><img src="/imgs/1610676-20200530152902816-1058144649.png" alt="img"></a></p><h2 id="Docker-卷和数据持久化"><a href="#Docker-卷和数据持久化" class="headerlink" title="Docker 卷和数据持久化"></a>Docker 卷和数据持久化</h2><p>​    1. 简介：</p><p>​      1. 术语：一个主机或容器的目录树是由一组挂载点创建而成，这些挂载点描述了如何能构建出一个或多个文件系统。存储卷是容器目录树上的挂载点，提供了容器无关的数据管理方式。</p><p>​      2. 个人理解：将主机磁盘的某个目录挂载到容器的文件系统（主机上的这个目录就称为存储卷），那么在容器内对这个挂载点的操作实际上都是对主机上那个目录的操作。比如将主机目录 &#x2F;opt&#x2F;soft 挂载到容器的 &#x2F;soft 目录，那么容器中对 &#x2F;soft 的所有操作实际上都是对主机目录 &#x2F;opt&#x2F;soft 的操作。</p><p>​    2. 类型</p><p>​      1. 绑定挂载存储卷：使用用户提供的主机目录或文件，在启动容器时需要加入选项 -v &lt;主机位置&gt;:&lt;容器挂载点&gt;。&#96;&#96;</p><p>​      2. 管理存储卷：使用 Docker 的管理空间，在启动容器时需要加入选项 -v &lt;容器挂载点&gt;。Docker 守护进程会自动在主机文件系统（&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes）中创建一个目录来挂载到容器中指定的挂载掉点。&#96;&#96;</p><p>​         <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530161418315-987094290.png"><img src="/imgs/1610676-20200530161418315-987094290.png" alt="img"></a></p><p>​    3. 常用操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 创建数据卷</span><br><span class="line"> 2 [root@server ~]# docker volume create --name volume1  [-d  指定位置]</span><br><span class="line"> 3 volume1</span><br><span class="line"> 4 </span><br><span class="line"> 5 # 查看数据卷列表信息</span><br><span class="line"> 6 [root@server ~]# docker volume ls</span><br><span class="line"> 7 DRIVER              VOLUME NAME</span><br><span class="line"> 8 local               412e102c656ee75de3db150c41fc9c3c21e2861ff9028a53aa49b25504e1e001</span><br><span class="line"> 9 local               81ad13949b48f53ab4917848fdaa8473ee9523bb18353b38925969f323bc166d</span><br><span class="line">10 local               volume1</span><br><span class="line">11 </span><br><span class="line">12 # 查看数据卷详细信息</span><br><span class="line">13 [root@server ~]# docker volume inspect volume1</span><br><span class="line">14 [</span><br><span class="line">15     &#123;</span><br><span class="line">16         &quot;Name&quot;: &quot;volume1&quot;,</span><br><span class="line">17         &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">18         &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/volume1/_data&quot;,</span><br><span class="line">19         &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">20         &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">21     &#125;</span><br><span class="line">22 ]</span><br><span class="line">23 </span><br><span class="line">24 # 删除数据卷</span><br><span class="line">25 [root@server ~]# docker volume rm volume1</span><br><span class="line">26 volume1</span><br><span class="line">27 </span><br><span class="line">28 # 挂载宿主机文件或目录到容器数据卷</span><br><span class="line">29 ## 挂载文件</span><br><span class="line">30 [root@server ~]# cat /opt/test.txt </span><br><span class="line">31 hello world!!!</span><br><span class="line">32 [root@server ~]# docker run -it --name centos-file -v /opt/test.txt:/opt/test.txt:ro centos:latest </span><br><span class="line">33 [root@d62e52a32a07 /]# cat /opt/test.txt </span><br><span class="line">34 hello world!!!</span><br><span class="line">35 </span><br><span class="line">36 ## 挂载目录</span><br><span class="line">37 [root@server ~]# ll /tmp/</span><br><span class="line">38 total 0</span><br><span class="line">39 drwx------ 2 root root 6 May 29 16:14 tmp.fJOTUQbyx3</span><br><span class="line">40 drwx------ 2 root root 6 May 29 16:48 tmp.kt4W6bwra4</span><br><span class="line">41 drwx------ 2 root root 6 May 29 16:10 tmp.xmy3qeNyIx</span><br><span class="line">42 [root@server ~]# docker run --name centos-dir -v /tmp/:/opt/ centos:latest  ls -l /opt/                            </span><br><span class="line">43 total 0</span><br><span class="line">44 drwx------ 2 root root 6 May 29 16:14 tmp.fJOTUQbyx3</span><br><span class="line">45 drwx------ 2 root root 6 May 29 16:48 tmp.kt4W6bwra4</span><br><span class="line">46 drwx------ 2 root root 6 May 29 16:10 tmp.xmy3qeNyIx</span><br><span class="line">47 </span><br><span class="line">48 # 共享数据卷</span><br><span class="line">49 [root@server ~]# docker run --name centos-shared -v /tmp/:/opt/ centos:latest</span><br><span class="line">50 [root@server ~]# docker run --name centos --volumes-from centos-shared  centos:latest ls -l /opt/</span><br><span class="line">51 total 0</span><br><span class="line">52 drwx------ 2 root root 6 May 29 16:14 tmp.fJOTUQbyx3</span><br><span class="line">53 drwx------ 2 root root 6 May 29 16:48 tmp.kt4W6bwra4</span><br><span class="line">54 drwx------ 2 root root 6 May 29 16:10 tmp.xmy3qeNyIx</span><br><span class="line">55 </span><br><span class="line">56 # 备份数据卷</span><br><span class="line">57 [root@server ~]# docker run --name centos-shared -v /tmp/:/opt/ centos:latest </span><br><span class="line">58 [root@server ~]# docker run --rm --volumes-from centos-shared -v $(pwd):/backup centos:latest tar cvf /backup/centos.tar /opt/                         </span><br><span class="line">59 tar: Removing leading `/&#x27; from member names</span><br><span class="line">60 /opt/</span><br><span class="line">61 /opt/.ICE-unix/</span><br><span class="line">62 /opt/.Test-unix/</span><br><span class="line">63 /opt/.X11-unix/</span><br><span class="line">64 /opt/.XIM-unix/</span><br><span class="line">65 /opt/.font-unix/</span><br><span class="line">66 /opt/ks-script-Rl3Umm</span><br><span class="line">67 /opt/yum.log</span><br></pre></td></tr></table></figure><h2 id="Docker-资源限制"><a href="#Docker-资源限制" class="headerlink" title="Docker 资源限制"></a><strong>Docker 资源限制</strong></h2><p>​    1. 简介</p><p>​      1. cgroup：是将任意进程进行分组化管理的Linux内核功能，限制某个或者某些进程的分配资源。</p><p>​      2. subsystem：用于控制cgroup中的进程行为的内核组件。</p><p>​      3. hierarchy：由cgroup组成的层级树，每个hierarchy都对应一个cgroup虚拟文件系统，都有系统上的所有task，此外低 level 的hierarchy 不能超过高 level 设定的资源上限。</p><p>​    2. subsystem（资源控制器）</p><p>​      1. blkio：控制块设备的访问，比如带宽等。</p><p>​      2. cpu：控制进程占用cpu的多少。</p><p>​      3. cpuacct：记录cgroup 中进程使用的 CPU 情况。</p><p>​      4. cpuset：为 cgroup 中的进程分配 CPU 和内存节点。</p><p>​      5. devices：控制进程对设备的访问。</p><p>​      6. freezer：挂起或者恢复 cgroup 中的进程。</p><p>​      7. memory：设定 cgroup 中进程的内存限制，统计使用的内存资源。</p><p>​      8. net_cls：使用等级识别符（classid）标记网络数据包，使得Linux 流量控制程序（tc）识别具体 cgroup 中的数据包。</p><p>​    3. 常用操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> 1 # CPU 资源配额控制</span><br><span class="line"> 2 ## CPU 份额配置</span><br><span class="line"> 3 [root@server ~]# docker run -itd --name cpu512 -c 512 centos:latest </span><br><span class="line"> 4 426e23ed9c96b9482cd167d17ca79c57e140be2359191372a5a0bdfd10d73173</span><br><span class="line"> 5 [root@server ~]# top -p  $(docker inspect -f &#123;&#123;.State.Pid&#125;&#125; da8d71c623ce)</span><br><span class="line"> 6 top - 15:43:49 up 1 day, 23:51,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line"> 7 Tasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie</span><br><span class="line"> 8 %Cpu(s):  0.3 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line"> 9 KiB Mem :  8176044 total,  1236396 free,  1157452 used,  5782196 buff/cache</span><br><span class="line">10 KiB Swap:        0 total,        0 free,        0 used.  6711724 avail Mem</span><br><span class="line">11 </span><br><span class="line">12 ## CPU 周期控制</span><br><span class="line">13 docker run -tid --cpu-period 100000(周期) --cpu-quota200000(配额) centos:latest</span><br><span class="line">14 &lt;容器的完整长ID&gt;</span><br><span class="line">15 [root@server ~]# cat /sys/fs/cgroup/cpu/docker/&lt;容器的完整长ID&gt;/cpu.cfs_period_us</span><br><span class="line">16 100000</span><br><span class="line">17 [root@server ~]# cat /sys/fs/cgroup/cpu/docker/&lt;容器的完整长ID&gt;/cpu.cfs_quota_us</span><br><span class="line">18 200000</span><br><span class="line">19 </span><br><span class="line">20 ## CPU 内核控制</span><br><span class="line">21 [root@server ~]# docker run -itd --name cupset --cpuset-cpus=&quot;0,1&quot; centos:latest</span><br><span class="line">22 da8d71c623ce35105201d824234d476b065e8bd6e87b416d262599b7d2ac333f</span><br><span class="line">23 [root@server ~]# cat /sys/fs/cgroup/cpuset/docker/&lt;容器的完整长ID&gt;/cpuset.cpus</span><br><span class="line">24 0-1</span><br><span class="line">25 </span><br><span class="line">26 # 内存资源配额控制</span><br><span class="line">27 -m 设置内存的使用限额</span><br><span class="line">28 --memory-swap 设置内存和swap的使用限额</span><br><span class="line">29 [root@server ~]# docker run -m 200M --memory-swap=300M centos:latest</span><br><span class="line">30 </span><br><span class="line">31 # Block IO 的限制</span><br><span class="line">32 ## 限制 block IO（默认500） </span><br><span class="line">33 [root@server ~]# docker run -itd --name B --blkio-weight 300 centos:latest</span><br><span class="line">34 </span><br><span class="line">35 ## 限制 bps 和 iops</span><br><span class="line">36 bps 是 byte per second，每秒读写的数据量。</span><br><span class="line">37 iops 是 io per second，每秒 IO 的次数。</span><br><span class="line">38 [root@server ~]# docker run -itd --device-write-bps /dev/sda:30MB centos:latest</span><br></pre></td></tr></table></figure><h2 id="Docker-API"><a href="#Docker-API" class="headerlink" title="Docker API"></a><strong>Docker API</strong></h2><p>​    1. 种类</p><p>​      1. Docker Registry API：docker镜像仓库的api，通过操作这套API，你可以自由的自动化、程序化的管理你的镜像仓库。</p><p>​      2. Docker Hub API：用户管理操作的API，docker hub是使用校验和公共 namespaces 的方式来存储账户信息、认证账户、进行账户授权。API同时也允许操作相关的用户仓库和 library 仓库。</p><p>​      3. Docker Remote API：用于控制主机 Docker 服务端的 API，等价于 docker命令行客户端。 有了它，你能远程操作docker容器，更重要的是你可以通过程序自动化运维docker进程。</p><p>​    2. 配置（需要重启 Docker）</p><p>​      1. 在 &#x2F;etc&#x2F;sysconfig&#x2F;docker 文件中添加 OPTIONS&#x3D;’ -H tcp:&#x2F;&#x2F;0.0.0.0:2357 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock ‘ &#96;&#96;</p><p>​      2. 在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service 文件中 ExecStart 后面添加 -H tcp:&#x2F;&#x2F;0.0.0.0:2357 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</p><p>​    3. 使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> 1 #### 查看</span><br><span class="line"> 2 # 查看 docker 版本信息</span><br><span class="line"> 3 curl http://localhost:2357/version | python -mjson.tool</span><br><span class="line"> 4 </span><br><span class="line"> 5 # 查看 docker 详细信息</span><br><span class="line"> 6 curl http://localhost:2357/info | python -mjson.tool</span><br><span class="line"> 7 </span><br><span class="line"> 8 # 列出所有镜像</span><br><span class="line"> 9 curl http://localhost:2357/images/json | python -mjson.tool</span><br><span class="line">10 </span><br><span class="line">11 # 列出指定镜像</span><br><span class="line">12 curl http://localhost:2357/images/images_id/json | python -mjson.tool</span><br><span class="line">13 </span><br><span class="line">14 # 列出所有容器</span><br><span class="line">15 curl http://localhost:2357/containers/json | python -mjson.tool</span><br><span class="line">16 </span><br><span class="line">17 # 列出指定容器</span><br><span class="line">18 curl http://localhost:2357/containers/contianer_id/json | python -mjson.tool</span><br><span class="line">19 </span><br><span class="line">20 # 查看 docker 系统文件的变更情况</span><br><span class="line">21 curl http://localhost:2357/containers/contianer_id/changes/json | python -mjson.tool</span><br><span class="line">22 </span><br><span class="line">23 #### 生命周期</span><br><span class="line">24 # 创建容器（mariadb数据库的容器，设置了密码是123456，监听端口是3306）</span><br><span class="line">25 curl -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class="line">26     &quot;Image&quot;: &quot;mariadb&quot;,</span><br><span class="line">27     &quot;Env&quot;: [&quot;MYSQL_ROOT_PASSWORD=123456&quot;],</span><br><span class="line">28     &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">29         &quot;3306/tcp&quot;: &#123;&#125;</span><br><span class="line">30     &#125;,</span><br><span class="line">31     &quot;HostConfig&quot;: &#123;</span><br><span class="line">32         &quot;PortBindings&quot;: &#123;</span><br><span class="line">33             &quot;3306/tcp&quot;: [&#123;&quot;HostIp&quot;: &quot;&quot;,&quot;HostPort&quot;: &quot;3306&quot;&#125;]</span><br><span class="line">34         &#125;</span><br><span class="line">35     &#125;,</span><br><span class="line">36     &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">37         &quot;Ports&quot;: &#123;</span><br><span class="line">38             &quot;5000/tcp&quot;: [&#123;&quot;HostIp&quot;: &quot;0.0.0.0&quot;,&quot;HostPort&quot;: &quot;3306&quot;&#125;]</span><br><span class="line">39         &#125;</span><br><span class="line">40     &#125;</span><br><span class="line">41 &#125;&#x27; http://localhost:2357/containers/create</span><br><span class="line">42 </span><br><span class="line">43 # 启动容器</span><br><span class="line">44 curl -X POST http://127.0.0.1:8088/containers/&#123;id&#125;/start  </span><br><span class="line">45 </span><br><span class="line">46 # 停止容器</span><br><span class="line">47 curl -X POST http://127.0.0.1:8088/containers/&#123;id&#125;/stop</span><br><span class="line">48 </span><br><span class="line">49 # 删除容器</span><br><span class="line">50 curl -X POST http://127.0.0.1:8088/containers/&#123;id&#125;/rm</span><br></pre></td></tr></table></figure><h2 id="Docker-实例"><a href="#Docker-实例" class="headerlink" title="Docker 实例"></a><strong>Docker 实例</strong></h2><p>  <strong>一、应用容器化技术</strong></p><p>​    1. supermin5 构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 安装</span><br><span class="line"> 2 [root@server ~]# yum install -y supermin5</span><br><span class="line"> 3 Loaded plugins: fastestmirror</span><br><span class="line"> 4 Loading mirror speeds from cached hostfile</span><br><span class="line"> 5 Resolving Dependencies</span><br><span class="line"> 6 --&gt; Running transaction check</span><br><span class="line"> 7 ---&gt; Package supermin5.x86_64 0:5.1.10-1.2.el7 will be installed</span><br><span class="line"> 8 --&gt; Finished Dependency Resolution</span><br><span class="line"> 9 </span><br><span class="line">10 # 预装镜像</span><br><span class="line">11 [root@server ~]# supermin5 -v –prepare bash yum net-tools initscripts vi coreutils -o supermin.d</span><br><span class="line">12 supermin: version: 5.1.10</span><br><span class="line">13 supermin: rpm: detected RPM version 4.11</span><br><span class="line">14 supermin: package handler: fedora/rpm</span><br><span class="line">15 supermin: prepare: bash net-tools initscripts vi coreutils</span><br><span class="line">16 supermin: packages specified on the command line:</span><br><span class="line">17   - bash-4.2.46-12.el7.x86_64</span><br><span class="line">18   - net-tools-2.0-0.17.20131004git.el7.x86_64</span><br><span class="line">19   - initscripts-9.49.39-1.el7_4.1.x86_64</span><br><span class="line">20   - coreutils-8.22-11.el7.x86_64</span><br><span class="line">21 ...</span><br><span class="line">22 supermin: renaming supermin.d.9ohzr3uh to supermin.d</span><br><span class="line">23 </span><br><span class="line">24 # 构建镜像</span><br><span class="line">25 [root@server ~]# supermin5 -v --build --format chroot supermin.d/ -o appliance.d</span><br><span class="line">26 supermin: version: 5.1.10</span><br><span class="line">27 supermin: rpm: detected RPM version 4.11</span><br><span class="line">28 supermin: package handler: fedora/rpm</span><br><span class="line">29 supermin: build: supermin.d/</span><br><span class="line">30 supermin: build: visiting supermin.d/base.tar.gz type gzip base image (tar)</span><br><span class="line">31 supermin: build: visiting supermin.d/packages type uncompressed packages</span><br><span class="line">32 ...</span><br><span class="line">33 supermin: renaming appliance.d.t7dbj8kr to appliance.d</span><br><span class="line">34 </span><br><span class="line">35 # 使用yum安装软件</span><br><span class="line">36 [root@server ~]# echo 7 &gt; appliance.d/etc/yum/vars/releasever</span><br><span class="line">37 </span><br><span class="line">38 # 构建网络(如果需要)</span><br><span class="line">39 [root@server ~]# cp /etc/resolv.conf appliance.d/etc</span><br><span class="line">40 </span><br><span class="line">41 # 将构建镜像归档</span><br><span class="line">42 [root@server ~]# tar --numeric-owner -cpf centos-7.tar -C appliance.d/ .</span><br><span class="line">43 </span><br><span class="line">44 # 从归档文件启动镜像并设置tag</span><br><span class="line">45 [root@server ~]# cat centos-7.tar | docker import - 192.168.200.105:5000/centos-7:latest</span><br><span class="line">46 sha256:b1e7942497d9372d43ad7bc0bfc27687dad6e77f100e7242139592efc2ab4e62</span><br><span class="line">47 </span><br><span class="line">48 # 将镜像上传到仓库</span><br><span class="line">49 [root@server ~]# docker push 192.168.200.105:5000/centos-7:latest</span><br><span class="line">50 The push refers to a repository [192.168.200.51:5000/centos-7]</span><br><span class="line">51 11f2f8c2668b: Pushed </span><br><span class="line">52 latest: digest: sha256:fc47a231f23c189dd93ceeb1bba5aceca50f394003425eaabfbb2062b2feaa9c size: 528</span><br><span class="line">53 </span><br><span class="line">54 # 查看镜像信息</span><br><span class="line">55 [root@server ~]# docker images 192.168.200.105:5000/centos-7:latest</span><br><span class="line">56 REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">57 192.168.200.51:5000/centos-7   latest              5e83db682966        2 minutes ago       213.4 MB</span><br></pre></td></tr></table></figure><p>​    2. Dockerfile 创建镜像</p><p>​      1. 简介</p><p>​       1. Dockerfile是一个包含用于组合映像的命令的文本文档，可以在命令行中调用任何命令。 Docker 通过读取 Dockerfile 中的指令自动生成映像。</p><p>​       2. <code>Docker build命令用于从 Dockerfile 构建映像，可以使用 -f </code>标志指向文件系统中任何位置的Dockerfile。</p><p>​      2. 常用命令</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200531135240518-1486540818.png"><img src="/imgs/1610676-20200531135240518-1486540818.png" alt="img"></a></p><p>​      3. 示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> 1 # This my first nginx Dockerfile</span><br><span class="line"> 2 # Version 1.0</span><br><span class="line"> 3 </span><br><span class="line"> 4 # Base images 基础镜像</span><br><span class="line"> 5 FROM centos</span><br><span class="line"> 6 </span><br><span class="line"> 7 # MAINTAINER 维护者信息</span><br><span class="line"> 8 LABLE maintainer=&quot;mj_1028@qq.com&quot; </span><br><span class="line"> 9 </span><br><span class="line">10 # ENV 设置环境变量</span><br><span class="line">11 ENV PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line">12 </span><br><span class="line">13 # ADD  文件放在当前目录下，拷过去会自动解压</span><br><span class="line">14 ADD nginx-1.8.0.tar.gz /usr/local/  </span><br><span class="line">15 ADD epel-release-latest-7.noarch.rpm /usr/local/  </span><br><span class="line">16 </span><br><span class="line">17 # RUN 执行以下命令 </span><br><span class="line">18 RUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm</span><br><span class="line">19 RUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean all</span><br><span class="line">20 RUN useradd -s /sbin/nologin -M www</span><br><span class="line">21 </span><br><span class="line">22 # WORKDIR 相当于cd</span><br><span class="line">23 WORKDIR /usr/local/nginx-1.8.0 </span><br><span class="line">24 </span><br><span class="line">25 RUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line">27 RUN echo &quot;daemon off;&quot; &gt;&gt; /etc/nginx.conf</span><br><span class="line">28 </span><br><span class="line">29 # EXPOSE 暴露端口</span><br><span class="line">30 EXPOSE 80</span><br><span class="line">31 </span><br><span class="line">32 # CMD 运行以下命令</span><br><span class="line">33 CMD [&quot;nginx&quot;]</span><br></pre></td></tr></table></figure><p>  <strong>二、Dockerfile 构建 MySQL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">  1 # 编写数据库建表脚本</span><br><span class="line">  2 [root@server mysql]# cat build_table.sh </span><br><span class="line">  3 #!/bin/bash</span><br><span class="line">  4 mysqld_safe &amp;</span><br><span class="line">  5 sleep 5</span><br><span class="line">  6 mysql -uroot -e &quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;$MYSQL_USER&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;$MYSQL_PASS&#x27;  WITH GRANT OPTION;&quot;</span><br><span class="line">  7 mysql -uroot -e &quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;$MYSQL_USER&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;$MYSQL_PASS&#x27;  WITH GRANT OPTION;&quot;</span><br><span class="line">  8 mysql -e &quot;create database chinaskills;&quot;</span><br><span class="line">  9 mysql -e &quot;create table chinaskills.company(name char(20) not null,years int not null)DEFAULT CHARSET=utf8;&quot;</span><br><span class="line"> 10 mysql -e &quot;insert into chinaskills.company values(&#x27;mm&#x27;,2020),(&#x27;dd&#x27;,2020);&quot;</span><br><span class="line"> 11 </span><br><span class="line"> 12 # 编写 yum 源文件</span><br><span class="line"> 13 [root@server mysql]# cat local.repo </span><br><span class="line"> 14 [centos]</span><br><span class="line"> 15 name=centos</span><br><span class="line"> 16 baseurl=file:///opt/centos</span><br><span class="line"> 17 gpgcheck=0</span><br><span class="line"> 18 enabled=1</span><br><span class="line"> 19 [pass]</span><br><span class="line"> 20 name=pass</span><br><span class="line"> 21 baseurl=file:///opt/pass/docker</span><br><span class="line"> 22 gpgcheck=0</span><br><span class="line"> 23 enabled=1</span><br><span class="line"> 24 </span><br><span class="line"> 25 # 编写 Dockerfile</span><br><span class="line"> 26 [root@server mysql]# cat Dockerfile </span><br><span class="line"> 27 # 基础镜像</span><br><span class="line"> 28 FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 29 # 维护者信息</span><br><span class="line"> 30 LABLE maintainer=&quot;mj_1028@qq.com&quot;</span><br><span class="line"> 31 # 使用当前系统的 yum 源文件</span><br><span class="line"> 32 RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 33 ADD local.repo /etc/yum.repos.d/</span><br><span class="line"> 34 # 安装MySQL服务，初始化数据库，设置用户名和密码，支持中文</span><br><span class="line"> 35 RUN yum install -y mariadb-server </span><br><span class="line"> 36 RUN mysql_install_db --user=mysql</span><br><span class="line"> 37 ENV MYSQL_USER xiandian</span><br><span class="line"> 38 ENV MYSQL_PASS xiandian</span><br><span class="line"> 39 ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 40 # 运行并修改数据库脚本</span><br><span class="line"> 41 ADD build_table.sh /docker/mysql/build_table.sh</span><br><span class="line"> 42 RUN chmod +x /docker/mysql/build_table.sh</span><br><span class="line"> 43 RUN /docker/mysql/build_table.sh</span><br><span class="line"> 44 # 暴露3306端口，并以后台安全模式启动</span><br><span class="line"> 45 EXPOSE 3306</span><br><span class="line"> 46 CMD mysqld_safe</span><br><span class="line"> 47 </span><br><span class="line"> 48 # 构建镜像</span><br><span class="line"> 49 [root@server mysql]# docker build -t mysql:latest .</span><br><span class="line"> 50 Sending build context to Docker daemon 5.632 kB</span><br><span class="line"> 51 Step 1 : FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 52  ---&gt; 6300524e4fcb</span><br><span class="line"> 53 Step 2 : LABEL maintainer &quot;mj_1028@qq.com&quot;</span><br><span class="line"> 54  ---&gt; Using cache</span><br><span class="line"> 55  ---&gt; 297bb01a36e7</span><br><span class="line"> 56 Step 3 : RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 57  ---&gt; Using cache</span><br><span class="line"> 58  ---&gt; 5cd2c60db6e4</span><br><span class="line"> 59 Step 4 : ADD local.repo /etc/yum.repos.d/</span><br><span class="line"> 60  ---&gt; Using cache</span><br><span class="line"> 61  ---&gt; 6bf93249441b</span><br><span class="line"> 62 Step 5 : RUN yum install -y mariadb-server</span><br><span class="line"> 63  ---&gt; Using cache</span><br><span class="line"> 64  ---&gt; c032f3770d64</span><br><span class="line"> 65 Step 6 : RUN mysql_install_db --user=mysql</span><br><span class="line"> 66  ---&gt; Using cache</span><br><span class="line"> 67  ---&gt; cebd6468488a</span><br><span class="line"> 68 Step 7 : ENV MYSQL_USER xiandian</span><br><span class="line"> 69  ---&gt; Using cache</span><br><span class="line"> 70  ---&gt; 4f0a879d55cd</span><br><span class="line"> 71 Step 8 : ENV MYSQL_PASS xiandian</span><br><span class="line"> 72  ---&gt; Using cache</span><br><span class="line"> 73  ---&gt; 168de6eb69ab</span><br><span class="line"> 74 Step 9 : ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 75  ---&gt; Using cache</span><br><span class="line"> 76  ---&gt; a8fa8e895f78</span><br><span class="line"> 77 Step 10 : ADD build_table.sh /docker/mysql/build_table.sh</span><br><span class="line"> 78  ---&gt; Using cache</span><br><span class="line"> 79  ---&gt; 31201ac69e2a</span><br><span class="line"> 80 Step 11 : RUN chmod +x /docker/mysql/build_table.sh</span><br><span class="line"> 81  ---&gt; Using cache</span><br><span class="line"> 82  ---&gt; 27069a74cb3d</span><br><span class="line"> 83 Step 12 : RUN /docker/mysql/build_table.sh</span><br><span class="line"> 84  ---&gt; Using cache</span><br><span class="line"> 85  ---&gt; 41f7ef5e31a7</span><br><span class="line"> 86 Step 13 : EXPOSE 3306</span><br><span class="line"> 87  ---&gt; Using cache</span><br><span class="line"> 88  ---&gt; 0e4dab8114cf</span><br><span class="line"> 89 Step 14 : CMD mysqld_safe</span><br><span class="line"> 90  ---&gt; Using cache</span><br><span class="line"> 91  ---&gt; 1835da94d00e</span><br><span class="line"> 92 Successfully built 1835da94d00e</span><br><span class="line"> 93 </span><br><span class="line"> 94 # 启动容器，登录数据库，查看数据库列表</span><br><span class="line"> 95 [root@server mysql]# docker run -itP --name mysql -e MYSQL_ROOT_PASSWORD=000000 mysql:latest /bin/bash</span><br><span class="line"> 96 bash-4.2# mysql -uxiandian -pxiandian</span><br><span class="line"> 97 Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line"> 98 Your MariaDB connection id is 4</span><br><span class="line"> 99 Server version: 5.5.56-MariaDB MariaDB Server</span><br><span class="line">100 </span><br><span class="line">101 Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">102 </span><br><span class="line">103 Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line">104 </span><br><span class="line">105 MariaDB [(none)]&gt; show databases;</span><br><span class="line">106 +--------------------+</span><br><span class="line">107 | Database           |</span><br><span class="line">108 +--------------------+</span><br><span class="line">109 | information_schema |</span><br><span class="line">110 | mysql              |</span><br><span class="line">111 | performance_schema |</span><br><span class="line">112 | test              |</span><br><span class="line">113 | chinaskills            |</span><br><span class="line">114 +--------------------+</span><br><span class="line">115 4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>  三<strong>、Dockerfile 构建 Apache+PHP</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">  1 # 编写 PHP 远程访问 MySQL</span><br><span class="line">  2 [root@server ~]# cat test.php </span><br><span class="line">  3 &lt;?php</span><br><span class="line">  4   $con = mysql_connect(getenv(&quot;MYSQL_ADDR&quot;),getenv(&quot;MYSQL_USER&quot;),getenv(&quot;MYSQL_PASS&quot;));</span><br><span class="line">  5   if (!$con)</span><br><span class="line">  6     &#123;</span><br><span class="line">  7       die(&#x27;Could not connect: &#x27; . mysql_error());</span><br><span class="line">  8     &#125;</span><br><span class="line">  9   mysql_select_db(&quot;chinaskills&quot;, $con);</span><br><span class="line"> 10   $result = mysql_query(&quot;SELECT * FROM company&quot;);</span><br><span class="line"> 11   echo &quot;&lt;table border=&#x27;1&#x27;&gt;</span><br><span class="line"> 12   &lt;tr&gt;</span><br><span class="line"> 13   &lt;th&gt;NAME&lt;/th&gt;</span><br><span class="line"> 14   &lt;th&gt;YEARS&lt;/th&gt;</span><br><span class="line"> 15   &lt;/tr&gt;&quot;;</span><br><span class="line"> 16   while($row = mysql_fetch_array($result))</span><br><span class="line"> 17     &#123;</span><br><span class="line"> 18       echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line"> 19       echo &quot;&lt;td&gt;&quot; . $row[&#x27;name&#x27;] . &quot;&lt;/td&gt;&quot;;</span><br><span class="line"> 20       echo &quot;&lt;td&gt;&quot; . $row[&#x27;years&#x27;] . &quot;&lt;/td&gt;&quot;;</span><br><span class="line"> 21       echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line"> 22     &#125;</span><br><span class="line"> 23     echo &quot;&lt;/table&gt;&quot;;</span><br><span class="line"> 24  </span><br><span class="line"> 25   mysql_close($con);</span><br><span class="line"> 26 ?&gt;</span><br><span class="line"> 27 </span><br><span class="line"> 28 # 编写 Dockerfile</span><br><span class="line"> 29 [root@server ~]# cat Dockerfile </span><br><span class="line"> 30 FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 31 LABEL maintainer=&quot;mj_1028@qq.com&quot;</span><br><span class="line"> 32 RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 33 ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line"> 34 WORKDIR /root/</span><br><span class="line"> 35 RUN yum install -y httpd php php-mysql </span><br><span class="line"> 36 RUN mkdir -p /var/log/httpd</span><br><span class="line"> 37 RUN mkdir -p /var/www/html</span><br><span class="line"> 38 ENV MYSQL_ADDR 172.17.0.5</span><br><span class="line"> 39 ENV MYSQL_USER xiandian</span><br><span class="line"> 40 ENV MYSQL_PASS xiandian</span><br><span class="line"> 41 ENV TERM linux</span><br><span class="line"> 42 ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 43 ADD test.php /var/www/html/test.php</span><br><span class="line"> 44 EXPOSE 80</span><br><span class="line"> 45 ADD run.sh /root/run.sh</span><br><span class="line"> 46 RUN chmod u+x /root/run.sh</span><br><span class="line"> 47 CMD /root/run.sh</span><br><span class="line"> 48 </span><br><span class="line"> 49 # 构建</span><br><span class="line"> 50 [root@server ~]# docker build -t apache-php:laetst .</span><br><span class="line"> 51 Sending build context to Docker daemon 32.77 kB</span><br><span class="line"> 52 Step 1 : FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 53  ---&gt; 6300524e4fcb</span><br><span class="line"> 54 Step 2 : LABEL maintainer &quot;mj_1028@qq.com&quot;</span><br><span class="line"> 55  ---&gt; Using cache</span><br><span class="line"> 56  ---&gt; 297bb01a36e7</span><br><span class="line"> 57 Step 3 : RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 58  ---&gt; Using cache</span><br><span class="line"> 59  ---&gt; 5cd2c60db6e4</span><br><span class="line"> 60 Step 4 : ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line"> 61  ---&gt; Using cache</span><br><span class="line"> 62  ---&gt; 6bf93249441b</span><br><span class="line"> 63 Step 5 : WORKDIR /root/</span><br><span class="line"> 64  ---&gt; Using cache</span><br><span class="line"> 65  ---&gt; 86be0e478fd9</span><br><span class="line"> 66 Step 6 : RUN yum install -y httpd php php-mysql</span><br><span class="line"> 67  ---&gt; Using cache</span><br><span class="line"> 68  ---&gt; 40756572de7f</span><br><span class="line"> 69 Step 7 : RUN mkdir -p /var/log/httpd</span><br><span class="line"> 70  ---&gt; Using cache</span><br><span class="line"> 71  ---&gt; 457d374ff59a</span><br><span class="line"> 72 Step 8 : RUN mkdir -p /var/www/html</span><br><span class="line"> 73  ---&gt; Using cache</span><br><span class="line"> 74  ---&gt; 738f8d821172</span><br><span class="line"> 75 Step 9 : ENV MYSQL_ADDR 172.17.0.5</span><br><span class="line"> 76  ---&gt; Using cache</span><br><span class="line"> 77  ---&gt; 6348e4d33a2b</span><br><span class="line"> 78 Step 10 : ENV MYSQL_USER xiandian</span><br><span class="line"> 79  ---&gt; Using cache</span><br><span class="line"> 80  ---&gt; d3ba7946fb52</span><br><span class="line"> 81 Step 11 : ENV MYSQL_PASS xiandian</span><br><span class="line"> 82  ---&gt; Using cache</span><br><span class="line"> 83  ---&gt; 3d40f9cfe126</span><br><span class="line"> 84 Step 12 : ENV TERM linux</span><br><span class="line"> 85  ---&gt; Using cache</span><br><span class="line"> 86  ---&gt; 1a6ad56ec0e8</span><br><span class="line"> 87 Step 13 : ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 88  ---&gt; Using cache</span><br><span class="line"> 89  ---&gt; ed9fdc4a238b</span><br><span class="line"> 90 Step 14 : ADD test.php /var/www/html/test.php</span><br><span class="line"> 91  ---&gt; Using cache</span><br><span class="line"> 92  ---&gt; 3d45b3c49b07</span><br><span class="line"> 93 Step 15 : EXPOSE 80</span><br><span class="line"> 94  ---&gt; Using cache</span><br><span class="line"> 95  ---&gt; 1609552d6493</span><br><span class="line"> 96 Step 16 : ADD run.sh /root/run.sh</span><br><span class="line"> 97  ---&gt; Using cache</span><br><span class="line"> 98  ---&gt; 7b00521525e8</span><br><span class="line"> 99 Step 17 : RUN chmod u+x /root/run.sh</span><br><span class="line">100  ---&gt; Using cache</span><br><span class="line">101  ---&gt; 411bd471e1ee</span><br><span class="line">102 Step 18 : CMD /root/run.sh</span><br><span class="line">103  ---&gt; Using cache</span><br><span class="line">104  ---&gt; c719019aa274</span><br><span class="line">105 Successfully built c719019aa274</span><br><span class="line">106 </span><br><span class="line">107 # 访问</span><br><span class="line">108 [root@server ~]# curl http://192.168.200.51:8096/test.php</span><br><span class="line">109 &lt;table border=&#x27;1&#x27;&gt;</span><br><span class="line">110    &lt;tr&gt;</span><br><span class="line">111      &lt;th&gt;NAME&lt;/th&gt;</span><br><span class="line">112      &lt;th&gt;YEARS&lt;/th&gt;</span><br><span class="line">113    &lt;/tr&gt;</span><br><span class="line">114    &lt;tr&gt;</span><br><span class="line">115       &lt;td&gt;mm&lt;/td&gt;</span><br><span class="line">116       &lt;td&gt;2020&lt;/td&gt;</span><br><span class="line">117     &lt;/tr&gt;</span><br><span class="line">118     &lt;tr&gt;</span><br><span class="line">119       &lt;td&gt;dd&lt;/td&gt;</span><br><span class="line">120       &lt;td&gt;2020&lt;/td&gt;</span><br><span class="line">121     &lt;/tr&gt;</span><br><span class="line">122 &lt;/table&gt;</span><br></pre></td></tr></table></figure><p>  <strong>四、Dockerfile 构建 Tomcat</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 编辑 Dockerfile</span><br><span class="line"> 2 [root@server ~]# cat Dockerfile</span><br><span class="line"> 3 FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 4 LABEL maintainer=&quot;mj_1028@qq.com&quot;</span><br><span class="line"> 5 RUN rm -f /etc/yum.repos.d/</span><br><span class="line"> 6 ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line"> 7 RUN yum install -y java unzip</span><br><span class="line"> 8 ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 9 ADD apache-tomcat.zip  /root/apache-tomcat.zip</span><br><span class="line">10 RUN unzip /root/apache-tomcat.zip -d /root/</span><br><span class="line">11 EXPOSE 8080</span><br><span class="line">12 RUN chmod u+x /root/apache-tomcat-6/bin/</span><br><span class="line">13 ADD index.html /root/apache-tomcat-6/webapps/ROOT/index.html</span><br><span class="line">14 CMD /root/apache-tomcat-6/bin/catalina.sh</span><br><span class="line">15 </span><br><span class="line">16 # 构建</span><br><span class="line">17 [root@server ~]# docker build -t tomcat:v1.0 .</span><br><span class="line">18 Sending build context to Docker daemon 5.055 MB</span><br><span class="line">19 Step 1 : FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line">20  ---&gt; 6300524e4fcb</span><br><span class="line">21 Step 2 : LABEL maintainer &quot;mj_1028@qq.com&quot;</span><br><span class="line">22  ---&gt; Using cache</span><br><span class="line">23  ---&gt; 297bb01a36e7</span><br><span class="line">24 Step 3 : RUN rm -f /etc/yum.repos.d/</span><br><span class="line">25  ---&gt; Using cache</span><br><span class="line">26  ---&gt; 5cd2c60db6e4</span><br><span class="line">27 Step 4 : ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line">28  ---&gt; Using cache</span><br><span class="line">29  ---&gt; 65c3b9a5e36c</span><br><span class="line">30 Step 5 : RUN yum install -y java unzip</span><br><span class="line">31  ---&gt; Using cache</span><br><span class="line">32  ---&gt; c52f6b212a3e</span><br><span class="line">33 Step 6 : ENV LC_ALL en_US.UTF-8</span><br><span class="line">34  ---&gt; Using cache</span><br><span class="line">35  ---&gt; c79e93ff2f1a</span><br><span class="line">36 Step 7 : ADD apache-tomcat.zip /root/apache-tomcat.zip</span><br><span class="line">37  ---&gt; Using cache</span><br><span class="line">38  ---&gt; 1d9559d21467</span><br><span class="line">39 Step 8 : RUN unzip /root/apache-tomcat.zip -d /root/</span><br><span class="line">40  ---&gt; Using cache</span><br><span class="line">41  ---&gt; cff845220459</span><br><span class="line">42 Step 9 : EXPOSE 8080</span><br><span class="line">43  ---&gt; Using cache</span><br><span class="line">44  ---&gt; 3c7b78ef3e32</span><br><span class="line">45 Step 10 : RUN chmod u+x /root/apache-tomcat-6/bin/</span><br><span class="line">46  ---&gt; Using cache</span><br><span class="line">47  ---&gt; db348be4e9a7</span><br><span class="line">48 Step 11 : ADD index.html /root/apache-tomcat-6/webapps/ROOT/index.html</span><br><span class="line">49  ---&gt; Using cache</span><br><span class="line">50  ---&gt; 8f1be41345b2</span><br><span class="line">51 Step 12 : CMD /root/apache-tomcat-6/bin/catalina.sh</span><br><span class="line">52  ---&gt; Using cache</span><br><span class="line">53  ---&gt; d1fadb90c70f</span><br><span class="line">54 Successfully built d1fadb90c70f57 </span><br><span class="line">58 #  访问并查看JDK及Tomcat版本信息</span><br><span class="line">59 [root@server ~]# curl 192.168.200.51:8080</span><br><span class="line">60 Xiandian WEB</span><br><span class="line">61 </span><br><span class="line">62 bash-4.2# java -version</span><br><span class="line">63 openjdk version &quot;1.8.0_102&quot;</span><br><span class="line">64 OpenJDK Runtime Environment (build 1.8.0_102-b14)</span><br><span class="line">65 OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)</span><br><span class="line">66 </span><br><span class="line">67 bash-4.2# ./version.sh </span><br><span class="line">68 Server version: Apache Tomcat/6.0.20</span><br><span class="line">69 Server built:   May 14 2009 01:13:50</span><br><span class="line">70 Server number:  6.0.20.0</span><br><span class="line">71 OS Name:        Linux</span><br><span class="line">72 OS Version:     3.10.0-229.el7.x86_64</span><br><span class="line">73 Architecture:   amd64</span><br><span class="line">74 JVM Version:    1.8.0_102-b14</span><br><span class="line">75 JVM Vendor:     Oracle Corporation</span><br></pre></td></tr></table></figure><h2 id="常用内容"><a href="#常用内容" class="headerlink" title="常用内容"></a>常用内容</h2><h3 id="设置docker开机自启动，并设置容器自动重启"><a href="#设置docker开机自启动，并设置容器自动重启" class="headerlink" title="设置docker开机自启动，并设置容器自动重启"></a>设置docker开机自启动，并设置容器自动重启</h3><h4 id="设置docker开机启动"><a href="#设置docker开机启动" class="headerlink" title="设置docker开机启动"></a>设置docker开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="查询容器启动情况"><a href="#查询容器启动情况" class="headerlink" title="查询容器启动情况"></a>查询容器启动情况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="设置容器自动重启"><a href="#设置容器自动重启" class="headerlink" title="设置容器自动重启"></a>设置容器自动重启</h3><h4 id="创建容器时设置"><a href="#创建容器时设置" class="headerlink" title="创建容器时设置"></a>创建容器时设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name 设置容器名 使用的镜像</span><br><span class="line">（上面命令  --name后面两个参数根据实际情况自行修改）</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 容器的重启策略如下：</span></span><br><span class="line"> --restart具体参数值详细信息：</span><br><span class="line">       no　　　　　　　 // 默认策略,容器退出时不重启容器；</span><br><span class="line">       on-failure　　  // 在容器非正常退出时（退出状态非0）才重新启动容器；</span><br><span class="line">       on-failure:3    // 在容器非正常退出时重启容器，最多重启3次；</span><br><span class="line">       always　　　　  // 无论退出状态是如何，都重启容器；</span><br><span class="line">       unless-stopped  // 在容器退出时总是重启容器，但是不考虑在 Docker 守护进程启动时就已经停止了的容器。</span><br></pre></td></tr></table></figure><h4 id="修改已有容器，使用update"><a href="#修改已有容器，使用update" class="headerlink" title="修改已有容器，使用update"></a>修改已有容器，使用update</h4><p>如果创建时未指定 --restart&#x3D;always，可通过update 命令设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always 容器ID(或者容器名)</span><br><span class="line">（容器ID或者容器名根据实际情况修改）</span><br></pre></td></tr></table></figure><h3 id="将docker镜像打成tar包导出"><a href="#将docker镜像打成tar包导出" class="headerlink" title="将docker镜像打成tar包导出"></a>将docker镜像打成tar包导出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、docker commit &lt;容器id&gt; &lt;镜像名&gt;:&lt;tag&gt;     ---- 将容器保存成镜像</span><br><span class="line"></span><br><span class="line">保存后 docker images 便可以看到镜像</span><br><span class="line"></span><br><span class="line">2、docker save -o &lt;tar包名&gt;.tar &lt;镜像名&gt;:&lt;tag&gt;      ---- 将镜像保存为.tar文件，默认保存在当前目录</span><br></pre></td></tr></table></figure><h3 id="从tar包中导入docker镜像"><a href="#从tar包中导入docker镜像" class="headerlink" title="从tar包中导入docker镜像"></a>从tar包中导入docker镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、docker load -i &lt;tar包名&gt;.tar     ---- 从 tar 包导入镜像</span><br><span class="line"></span><br><span class="line">导入镜像后，通过 docker images 便可看到导入的镜像。</span><br><span class="line"></span><br><span class="line">2、docker run -itd -p &lt;本地端口&gt;:&lt;容器端口&gt; --restart=always &lt;镜像名&gt;:&lt;tag&gt;    ---- 通过镜像起容器</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker-是什么？&quot;&gt;&lt;a href=&quot;#Docker-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Docker 是什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;Docker 是什么？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    1. Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架包括系统。&lt;/p&gt;
&lt;p&gt;​    2. Docker 是基于Go语言实现的云开源项目，诞生于2013年初，最初是dotCloud公司发起。由镜像(Image)、容器(Container)、仓库(Repository) 三大核心组成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   3. Docker 通过对应用组件的封装、分发、部署、运行等生命周期的管理，达到应用组件级别的“一次封装，到处运行”。这里应用组件，即可以是Web应用，也可以是一套数据库服务，甚至是一个操作系统或编译器。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;为什么要使用-Docker？&quot;&gt;&lt;a href=&quot;#为什么要使用-Docker？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 Docker？&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么要使用 Docker？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    1. Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。&lt;/p&gt;
&lt;p&gt;​    2. 更快速的交付和部署(使用docker，开发人员可以用镜像来快速构建一套标准的开发环境;开发完成之后，测试和运维人员可以直接使用相同环境来部署代码)。&lt;/p&gt;
&lt;p&gt;​    3. 响应式部署和扩展(docker容器几乎可以在任意平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。可以在不同的平台轻松地迁移应用)。&lt;/p&gt;
&lt;p&gt;​    4. 更简单的更新管理(使用Dockerfile，只需要修改小小的配置，就可以替代以往大量的更新工作)。&lt;/p&gt;
&lt;p&gt;​      与传统的虚拟机对比&lt;/p&gt;
&lt;p&gt;​        &lt;a href=&quot;https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529075343772-1700042586.png&quot;&gt;&lt;img src=&quot;/imgs/1610676-20200529075343772-1700042586.png&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://github.com/jiangjiawei520/categories/docker/"/>
    
    
    <category term="docker" scheme="https://github.com/jiangjiawei520/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之使用github Actions将自动构建并发布静态源码</title>
    <link href="https://github.com/jiangjiawei520/post/912f3dbd.html"/>
    <id>https://github.com/jiangjiawei520/post/912f3dbd.html</id>
    <published>2024-04-19T14:16:26.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动构建并发布"><a href="#自动构建并发布" class="headerlink" title="自动构建并发布"></a>自动构建并发布</h2><p>   github的action功能，可以使用这个功能代替手工的发布操作。在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI&#x2F;CD），并将操作合并到完全自定义的工作流程中。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><pre><code>首先建立一个Git仓库，这里不再赘述这里我采用了sshkey的形式来进行仓库的操作</code></pre><h3 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C YourCount@example.com</span><br></pre></td></tr></table></figure><h3 id="打开git仓库-添加部署用的私钥"><a href="#打开git仓库-添加部署用的私钥" class="headerlink" title="打开git仓库,添加部署用的私钥"></a>打开git仓库,添加部署用的私钥</h3><p>​  注意添加的secret名称需要唯一，不能于本账号的其他仓库的重复，不然会导致失败。</p><blockquote><p>setting-&gt;secrets-&gt;add new secret</p></blockquote><p><a href="https://i.loli.net/2020/04/16/ePo2EwfZirp9h31.png"><img src="/imgs/ePo2EwfZirp9h31.png" alt="ePo2EwfZirp9h31"></a></p><span id="more"></span><h3 id="添加权限验证的公钥"><a href="#添加权限验证的公钥" class="headerlink" title="添加权限验证的公钥"></a>添加权限验证的公钥</h3><p>​在个人账号的设置里面设置，只用设置一次就行，如果之前设置过，可以跳过本步骤。</p><blockquote><p>setting-&gt;deploy keys-&gt;add deploy key</p></blockquote><p><a href="https://i.loli.net/2020/04/16/UK1lDvTx5PZBM2m.png"><img src="/imgs/UK1lDvTx5PZBM2m.png" alt="UK1lDvTx5PZBM2m"></a></p><p>至此我们的仓库准备工作就已经完成</p><h2 id="编写action发布文件"><a href="#编写action发布文件" class="headerlink" title="编写action发布文件"></a>编写action发布文件</h2><blockquote><p>action-&gt;set up a new workflow file</p></blockquote><p>可以看到下方有很多发布模板供我们选择</p><p>此次我们自己来进行编写</p><p><a href="https://i.loli.net/2020/04/16/LHfVB3gmRvQ18se.png"><img src="/imgs/LHfVB3gmRvQ18se.png" alt="LHfVB3gmRvQ18se"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">name: auto publish #发布名称</span><br><span class="line"></span><br><span class="line">on:  </span><br><span class="line">  push: #触发方式</span><br><span class="line">    branches: </span><br><span class="line">      - master #触发分支</span><br><span class="line"></span><br><span class="line">jobs: #脚本内容</span><br><span class="line">  build-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v1</span><br><span class="line">    - run: npm ci</span><br><span class="line">    - run: npm install vuepress</span><br><span class="line">    - run: npm run build</span><br><span class="line">    - run: cp CNAME .vuepress/dist/ #指定gitpage的自定义域名</span><br><span class="line">    </span><br><span class="line">    - name: Deploy</span><br><span class="line">      uses: peaceiris/actions-gh-pages@v2.5.0</span><br><span class="line">      env:</span><br><span class="line">        ACTIONS_DEPLOY_KEY: $&#123;&#123;secrets.ACCESS_TOKEN&#125;&#125; #这里引用的是刚才生成的私钥</span><br><span class="line">        PUBLISH_BRANCH: gh-pages #发布到的分支</span><br><span class="line">        PUBLISH_DIR: .vuepress/dist #需要发布的内容</span><br></pre></td></tr></table></figure><p>下面我们每次对master分支的推送都会触发该发布流程</p><p>该发布流程会自动构建vuepress项目并把生成的文件发布到当前项目的gh-pages分支下</p><h2 id="自动构建并发布到另一仓库"><a href="#自动构建并发布到另一仓库" class="headerlink" title="自动构建并发布到另一仓库"></a>自动构建并发布到另一仓库</h2><p>​新的需求 <strong>自动构建后发布到不同的仓库</strong>。</p><h3 id="正文-1"><a href="#正文-1" class="headerlink" title="正文"></a>正文</h3><p>我们直接新建一个yml发布文件</p><p>在系统给我们生成的文件中我们可以看到基础语法的介绍</p><p>这里我结合自己的理解标注一下</p><p>在进行解读之前我们先了解一下基本概念</p><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul><li>workflow (工作流程)</li><li>job (任务) 一个workflow可以由多个不同的job组成</li><li>step (步骤) 每个job可以由多个step来组成</li><li>action(动作) 每个step又可以由多个action来组成</li></ul><h3 id="Action市场"><a href="#Action市场" class="headerlink" title="Action市场"></a>Action市场</h3><p>由于持续集成大家的需求大部分可能都是相同的操作</p><p>所以github建立了一个Action市场</p><p>使得每个人编写的Action脚本都可以被其他人来引用</p><p>这就使得当我这种彩笔小白想要使用这些功能的时候而不用写出很复杂的脚本</p><p>而这整个持续集成的过程也就成为了不同的Action相组合的产物</p><p>使用方法也很简单，只需要使用<code>uses</code>关键字直接引用别人的库即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uses userName/repoName</span><br></pre></td></tr></table></figure><h3 id="结合模板"><a href="#结合模板" class="headerlink" title="结合模板"></a>结合模板</h3><p>然后我们来结合系统生成的基础模板来进行基本的解读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># This is a basic workflow to help you get started with Actions</span><br><span class="line"></span><br><span class="line">name: CI  # 构建流程的名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">on: #触发该流程的方式</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]  #触犯该流程的分支</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  # 该任务当前仅包含了一个任务  名称是build</span><br><span class="line">  build:    </span><br><span class="line">    runs-on: ubuntu-latest #任务锁运行的工作环境</span><br><span class="line"></span><br><span class="line">    # 该任务所包含的步骤</span><br><span class="line">    steps:</span><br><span class="line">    # 步骤所依赖的操作库 这里引用了官方发布的git操作库 目的是拉取当前库的代码</span><br><span class="line">    - uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">    # 这里是一个单行命令的模板</span><br><span class="line">    - name: Run a one-line script</span><br><span class="line">      run: echo Hello, world!</span><br><span class="line"></span><br><span class="line">    # 这里是一个多行命令的模板</span><br><span class="line">    - name: Run a multi-line script</span><br><span class="line">      run: |</span><br><span class="line">        echo Add other actions to build,</span><br><span class="line">        echo test, and deploy your project.</span><br></pre></td></tr></table></figure><h3 id="用已有的库进行持续集成-当前库构建发布到另外的库"><a href="#用已有的库进行持续集成-当前库构建发布到另外的库" class="headerlink" title="用已有的库进行持续集成(当前库构建发布到另外的库)"></a>用已有的库进行持续集成(当前库构建发布到另外的库)</h3><p>到这里我们就可以开始进行自己的Action的组装了</p><p>首先我们先找一个有发布到其他Git库功能的Action</p><p>我们可以在github的市场搜索自己需要的Action</p><p><a href="https://i.loli.net/2020/04/17/MFcPRLTway742pE.png"><img src="/imgs/MFcPRLTway742pE.png" alt="MFcPRLTway742pE"></a></p><p>这里我使用的是<code>s0/git-publish-subdir-action@master</code></p><p>点开这个库的主页我们可以在下方看到该库的使用说明</p><p>这里就不在赘述了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">name: AutoBuild</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ OneKeyVip-master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ OneKeyVip-master ]</span><br><span class="line">jobs:</span><br><span class="line">  </span><br><span class="line">  build:</span><br><span class="line">    name: build</span><br><span class="line">    runs-on: ubuntu-latest    </span><br><span class="line">    steps:    </span><br><span class="line">    - uses: actions/checkout@v2    </span><br><span class="line">    - name: npm install</span><br><span class="line">      run: |</span><br><span class="line">        npm install</span><br><span class="line">        npm ci</span><br><span class="line">    - name: npm build</span><br><span class="line">      run: |</span><br><span class="line">       npm run build</span><br><span class="line">       cp README.MD ./publish/README.MD #可选</span><br><span class="line">       cp CHANGELOG ./publish/CHANGELOG #可选</span><br><span class="line"></span><br><span class="line">    - name: publish</span><br><span class="line">      uses: s0/git-publish-subdir-action@master</span><br><span class="line">      env:</span><br><span class="line">        REPO: 目标库</span><br><span class="line">        BRANCH: 目标分支</span><br><span class="line">        FOLDER: 要发布的内容所在的文件夹        </span><br><span class="line">        SSH_PRIVATE_KEY: $&#123;&#123; secrets.publish &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Repository-not-found"><a href="#Repository-not-found" class="headerlink" title="Repository not found."></a>Repository not found.</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo b</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start backup: git</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">ERROR: Repository not found.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">INFO  Backup done: git</span><br></pre></td></tr></table></figure><p>删除.git目录，重新执行hexo b</p><p>检查添加命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">检查已有分支</span><br><span class="line">git remote -v</span><br><span class="line">gitee   git@gitee.com:jiangjiawei520172/person_blog_new.git (fetch)</span><br><span class="line">gitee   git@gitee.com:jiangjiawei520172/person_blog_new.git (push)</span><br><span class="line">github  git@github.com:jiangjiawei520/person_blog_new.git (fetch)</span><br><span class="line">github  git@github.com:jiangjiawei520/person_blog_new.git (push)</span><br><span class="line">github_source   git@github.com:jiangjiawei520/person_blog_new_source.git (fetch)</span><br><span class="line">github_source   git@github.com:jiangjiawei520/person_blog_new_source.git (push)</span><br><span class="line"></span><br><span class="line">如无gitee、github_source则添加，github未启动（查询站点根目录_config.yml配置文件backup下的repository参数）</span><br><span class="line">git remote add gitee/github/github_source git@xxx.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;自动构建并发布&quot;&gt;&lt;a href=&quot;#自动构建并发布&quot; class=&quot;headerlink&quot; title=&quot;自动构建并发布&quot;&gt;&lt;/a&gt;自动构建并发布&lt;/h2&gt;&lt;p&gt;   github的action功能，可以使用这个功能代替手工的发布操作。在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI&amp;#x2F;CD），并将操作合并到完全自定义的工作流程中。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;首先建立一个Git仓库，这里不再赘述

这里我采用了sshkey的形式来进行仓库的操作
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;生成ssh密钥&quot;&gt;&lt;a href=&quot;#生成ssh密钥&quot; class=&quot;headerlink&quot; title=&quot;生成ssh密钥&quot;&gt;&lt;/a&gt;生成ssh密钥&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C YourCount@example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;打开git仓库-添加部署用的私钥&quot;&gt;&lt;a href=&quot;#打开git仓库-添加部署用的私钥&quot; class=&quot;headerlink&quot; title=&quot;打开git仓库,添加部署用的私钥&quot;&gt;&lt;/a&gt;打开git仓库,添加部署用的私钥&lt;/h3&gt;&lt;p&gt;​	  注意添加的secret名称需要唯一，不能于本账号的其他仓库的重复，不然会导致失败。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;setting-&amp;gt;secrets-&amp;gt;add new secret&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://i.loli.net/2020/04/16/ePo2EwfZirp9h31.png&quot;&gt;&lt;img src=&quot;/imgs/ePo2EwfZirp9h31.png&quot; alt=&quot;ePo2EwfZirp9h31&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
    <category term="github" scheme="https://github.com/jiangjiawei520/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+yilia添加隐藏左边栏目按钮</title>
    <link href="https://github.com/jiangjiawei520/post/2af8072d.html"/>
    <id>https://github.com/jiangjiawei520/post/2af8072d.html</id>
    <published>2024-04-18T18:16:26.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<p>效果图：<br><img src="/imgs/image-1573145229532.png" alt="file"></p><p>点击按钮时，缩进左侧边栏，再次点击再弹出来。</p><h2 id="添加隐藏左边栏目按钮"><a href="#添加隐藏左边栏目按钮" class="headerlink" title="添加隐藏左边栏目按钮"></a>添加隐藏左边栏目按钮</h2><p>参考：<a href="https://cqh-i.github.io/2019/08/07/hexo-yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9A%90%E8%97%8F%E5%B7%A6%E8%BE%B9%E6%A0%8F%E7%9B%AE%E6%8C%89%E9%92%AE/">添加隐藏左边栏目按钮</a></p><p>折腾了一个下午,终于把隐藏左边侧边栏目的效果实现了. 实现了点击按钮隐藏侧边栏, 查找和修改源码实在是太麻烦了.</p><h3 id="制作按钮样式"><a href="#制作按钮样式" class="headerlink" title="制作按钮样式"></a>制作按钮样式</h3><p>先找一款你喜欢的CSS菜单按钮切换,或者自己实现一个,我在网上找到一款比较<a href="https://c.runoob.com/codedemo/3156">简单的样式</a>,稍微做了下修改.</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">.mymenucontainer &#123;</span><br><span class="line">display:block;</span><br><span class="line">cursor:pointer;</span><br><span class="line">left:0;</span><br><span class="line">top:0;</span><br><span class="line">width:35px;</span><br><span class="line">height:35px;</span><br><span class="line">z-index:9999;</span><br><span class="line">position:fixed;</span><br><span class="line">&#125;</span><br><span class="line">.bar1 &#123;</span><br><span class="line">width:35px;</span><br><span class="line">height:3px;</span><br><span class="line">background-color:#333;</span><br><span class="line">margin:6px 0;</span><br><span class="line">transition:0.4s;</span><br><span class="line">-webkit-transform:rotate(-45deg) translate(-8px,8px);</span><br><span class="line">transform:rotate(-45deg) translate(-8px,8px);</span><br><span class="line">&#125;</span><br><span class="line">.bar2 &#123;</span><br><span class="line">width:35px;</span><br><span class="line">height:3px;</span><br><span class="line">background-color:#333;</span><br><span class="line">margin:6px 0;</span><br><span class="line">transition:0.4s;</span><br><span class="line">opacity:0;</span><br><span class="line">&#125;</span><br><span class="line">.bar3 &#123;</span><br><span class="line">width:35px;</span><br><span class="line">height:3px;</span><br><span class="line">background-color:#333;</span><br><span class="line">margin:6px 0;</span><br><span class="line">transition:0.4s;</span><br><span class="line">-webkit-transform:rotate(45deg) translate(-4px,-6px);</span><br><span class="line">transform:rotate(45deg) translate(-4px,-6px);</span><br><span class="line">&#125;</span><br><span class="line">.change .bar1 &#123;</span><br><span class="line">-webkit-transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">&#125;</span><br><span class="line">.change .bar2 &#123;</span><br><span class="line">opacity:1;</span><br><span class="line">&#125;</span><br><span class="line">.change .bar3 &#123;</span><br><span class="line">-webkit-transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样式制作完成后,压缩,然后添加进<code>themes\new-yilia\source\css\main.0cf68a.css</code>文件中,添加在最上面即可（否则下面兼容移动端会取不到mymenucontainer）</p><h3 id="添加按钮到相应的位置"><a href="#添加按钮到相应的位置" class="headerlink" title="添加按钮到相应的位置"></a>添加按钮到相应的位置</h3><p>打开<code>themes\new-yilia\layout\layout.ejs</code>文件, 找到<code>&lt;div class=&quot;left-col&quot;</code>,在其上面添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;mymenucontainer&quot; onclick=&quot;myFunction(this)&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在<code>&lt;/body&gt;</code>之后, <code>&lt;/html&gt;</code>前添加如下Js代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var hide = false;</span><br><span class="line">    function myFunction(x) &#123;</span><br><span class="line">        x.classList.toggle(&quot;change&quot;);</span><br><span class="line">        if(hide == false)&#123;</span><br><span class="line">            $(&quot;.left-col&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;);</span><br><span class="line">            $(&quot;.mid-col&quot;).css(&quot;left&quot;, 6);</span><br><span class="line">            $(&quot;.tools-col&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;);</span><br><span class="line">            $(&quot;.tools-col.hide&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;);</span><br><span class="line">            hide = true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $(&quot;.left-col&quot;).css(&#x27;display&#x27;, &#x27;&#x27;);</span><br><span class="line">            $(&quot;.mid-col&quot;).css(&quot;left&quot;, 300);</span><br><span class="line">            $(&quot;.tools-col&quot;).css(&#x27;display&#x27;, &#x27;&#x27;);</span><br><span class="line">            $(&quot;.tools-col.hide&quot;).css(&#x27;display&#x27;, &#x27;&#x27;);</span><br><span class="line">            hide = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>重新生成文件,部署即可看到效果, 可以看看<a href="https://cqh-i.github.io/">我的博客</a>效果</p><p>效果图：<br><img src="/imgs/image-1573143726040.png" alt="file"></p><blockquote><p>引用结束</p></blockquote><h3 id="响应式：手机端隐藏按钮"><a href="#响应式：手机端隐藏按钮" class="headerlink" title="响应式：手机端隐藏按钮"></a>响应式：手机端隐藏按钮</h3><p>手机端(当页面变小时)隐藏按钮：修改文件：<code>themes\new-yilia\source\css\main.0cf68a.css</code>，找到<code>@media screen and (max-width:800px)</code>下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">    #container, body, html &#123;</span><br><span class="line">        height:auto;</span><br><span class="line">        overflow-x:hidden;</span><br><span class="line">        overflow-y:auto</span><br><span class="line">    &#125;</span><br><span class="line">    #mobile-nav &#123;</span><br><span class="line">        display:block</span><br><span class="line">    &#125;</span><br><span class="line">    .body-wrap &#123;</span><br><span class="line">        margin-bottom:0</span><br><span class="line">    &#125;</span><br><span class="line">    .left-col&#123;</span><br><span class="line">        display:none</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>.left-col</code>中添加一个按钮的标签（需要确保上面pc端添加的mymenucontainer样式在本样式下面）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left-col,.mymenucontainer &#123;</span><br><span class="line">    display:none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🐛bug"><a href="#🐛bug" class="headerlink" title="🐛bug"></a>🐛bug</h2><p>有个小问题：在PC端进行测试时，如果先尝试缩放，然后返回再展开，直接测试手机端，就会出现问题：按钮仍然撑开界面；但是如果进到页面直接测试手机端就不会这种问题（或者是在缩放后进行测试也不会影响）。</p><p>因为这个问题好像影响不是很大，就不深入了。</p><p><strong>本文链接：</strong> <a href="https://yansheng836.bitbucket.io/article/31bbdc67.html">https://yansheng836.bitbucket.io/article/31bbdc67.html</a><br><strong>版权声明：</strong> 本作品采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议进行许可。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;效果图：&lt;br&gt;&lt;img src=&quot;/imgs/image-1573145229532.png&quot; alt=&quot;file&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击按钮时，缩进左侧边栏，再次点击再弹出来。&lt;/p&gt;
&lt;h2 id=&quot;添加隐藏左边栏目按钮&quot;&gt;&lt;a href=&quot;#添加隐藏左边栏目按钮&quot; class=&quot;headerlink&quot; title=&quot;添加隐藏左边栏目按钮&quot;&gt;&lt;/a&gt;添加隐藏左边栏目按钮&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;https://cqh-i.github.io/2019/08/07/hexo-yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9A%90%E8%97%8F%E5%B7%A6%E8%BE%B9%E6%A0%8F%E7%9B%AE%E6%8C%89%E9%92%AE/&quot;&gt;添加隐藏左边栏目按钮&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;折腾了一个下午,终于把隐藏左边侧边栏目的效果实现了. 实现了点击按钮隐藏侧边栏, 查找和修改源码实在是太麻烦了.&lt;/p&gt;
&lt;h3 id=&quot;制作按钮样式&quot;&gt;&lt;a href=&quot;#制作按钮样式&quot; class=&quot;headerlink&quot; title=&quot;制作按钮样式&quot;&gt;&lt;/a&gt;制作按钮样式&lt;/h3&gt;&lt;p&gt;先找一款你喜欢的CSS菜单按钮切换,或者自己实现一个,我在网上找到一款比较&lt;a href=&quot;https://c.runoob.com/codedemo/3156&quot;&gt;简单的样式&lt;/a&gt;,稍微做了下修改.&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用hexo-neat插件压缩页面静态资源</title>
    <link href="https://github.com/jiangjiawei520/post/bbc1a57.html"/>
    <id>https://github.com/jiangjiawei520/post/bbc1a57.html</id>
    <published>2024-04-18T18:04:33.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章针对下面的几个话题进行了讲解： 为什么要压缩页面静态资源， hexo的压缩静态资源插件， 如何使用hexo-neat。</p><h2 id="为什么要压缩页面静态资源"><a href="#为什么要压缩页面静态资源" class="headerlink" title="为什么要压缩页面静态资源"></a>为什么要压缩页面静态资源</h2><p>对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。</p><p>那么怎么提高hexo这个静态博客的页面加载速度呢？可以从以下的几个方面去入手：</p><ol><li>将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。</li><li>尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。</li><li>对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。</li></ol><h2 id="hexo的压缩静态资源插件"><a href="#hexo的压缩静态资源插件" class="headerlink" title="hexo的压缩静态资源插件"></a>hexo的压缩静态资源插件</h2><p>网上有很多相关的博文，常规的做法是使用<code>gulp</code>来进行压缩，<code>gulp</code>是<code>Node.js</code>下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。</p><p>使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下<a href="https://segmentfault.com/a/1190000009544924#articleHeader8">相关的东西</a>。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。</p><p>这里我选择的是由rozbo大佬开发的<code>hexo-neat</code>压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！</p><span id="more"></span><h2 id="如何使用hexo-neat"><a href="#如何使用hexo-neat" class="headerlink" title="如何使用hexo-neat"></a>如何使用hexo-neat</h2><h3 id="在站点根目录下安装hexo-neat"><a href="#在站点根目录下安装hexo-neat" class="headerlink" title="在站点根目录下安装hexo-neat"></a>在站点根目录下安装hexo-neat</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p><strong>为站点配置文件添加相关配置</strong></p><p>下边是我自己站点的相关配置，直接添加到站点配置文件<code>_config.yml</code>的末尾就可以。可以按照自己的需求去自定义配置，不过有些注意事项，可以参考我后文的踩坑记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.js&#x27;</span><br><span class="line">    - &#x27;**/jquery.fancybox.pack.js&#x27;</span><br><span class="line">    - &#x27;**/index.js&#x27;</span><br></pre></td></tr></table></figure><h2 id="hexo-neat插件踩坑记录"><a href="#hexo-neat插件踩坑记录" class="headerlink" title="hexo-neat插件踩坑记录"></a>hexo-neat插件踩坑记录</h2><p>由于在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是我就开始捣鼓跳过哪些文件可以让效率更高。在鼓捣了一段时间之后，记录下使用该插件的一些注意事项，避免日后重蹈覆辙，也希望能对各位看官有所帮助。</p><h3 id="跳过压缩文件的正确配置方式"><a href="#跳过压缩文件的正确配置方式" class="headerlink" title="跳过压缩文件的正确配置方式"></a>跳过压缩文件的正确配置方式</h3><p>如果按照官方插件的文档说明来配置<code>exclude</code>，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;</span><br></pre></td></tr></table></figure><p><strong>压缩html时不要跳过</strong><code>.md</code><strong>文件</strong></p><p><code>.md</code>文件就是我们写文章时的markdown文件，如果跳过压缩<code>.md</code>文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p><p>当初为了找到这个原因花了我两个晚上的时间，简直是夜不能寐。</p><h3 id="压缩html时不要跳过-swig文件"><a href="#压缩html时不要跳过-swig文件" class="headerlink" title="压缩html时不要跳过.swig文件"></a>压缩html时不要跳过<code>.swig</code>文件</h3><p><code>.swig</code>文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/rozbo/hexo-neat">GitHub项目地址</a></li><li><a href="https://segmentfault.com/a/1190000008082288">hexo博客压缩优化</a></li><li><a href="https://segmentfault.com/a/1190000005799759">Hexo-Neat介绍</a></li></ol><hr><p>版权声明：本文为博主<a href="https://blog.csdn.net/lewky_liu">雨临Lewis</a>原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 by-sa</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>本文链接：<a href="https://blog.csdn.net/lewky_liu/article/details/82432003">https://blog.csdn.net/lewky_liu&#x2F;article&#x2F;details&#x2F;82432003</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章针对下面的几个话题进行了讲解： 为什么要压缩页面静态资源， hexo的压缩静态资源插件， 如何使用hexo-neat。&lt;/p&gt;
&lt;h2 id=&quot;为什么要压缩页面静态资源&quot;&gt;&lt;a href=&quot;#为什么要压缩页面静态资源&quot; class=&quot;headerlink&quot; title=&quot;为什么要压缩页面静态资源&quot;&gt;&lt;/a&gt;为什么要压缩页面静态资源&lt;/h2&gt;&lt;p&gt;对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。&lt;/p&gt;
&lt;p&gt;那么怎么提高hexo这个静态博客的页面加载速度呢？可以从以下的几个方面去入手：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。&lt;/li&gt;
&lt;li&gt;尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。&lt;/li&gt;
&lt;li&gt;对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;hexo的压缩静态资源插件&quot;&gt;&lt;a href=&quot;#hexo的压缩静态资源插件&quot; class=&quot;headerlink&quot; title=&quot;hexo的压缩静态资源插件&quot;&gt;&lt;/a&gt;hexo的压缩静态资源插件&lt;/h2&gt;&lt;p&gt;网上有很多相关的博文，常规的做法是使用&lt;code&gt;gulp&lt;/code&gt;来进行压缩，&lt;code&gt;gulp&lt;/code&gt;是&lt;code&gt;Node.js&lt;/code&gt;下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。&lt;/p&gt;
&lt;p&gt;使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下&lt;a href=&quot;https://segmentfault.com/a/1190000009544924#articleHeader8&quot;&gt;相关的东西&lt;/a&gt;。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。&lt;/p&gt;
&lt;p&gt;这里我选择的是由rozbo大佬开发的&lt;code&gt;hexo-neat&lt;/code&gt;压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo+yilia(new-yilia)使用hexo-generator-search插件集成本地搜索</title>
    <link href="https://github.com/jiangjiawei520/post/613d6936.html"/>
    <id>https://github.com/jiangjiawei520/post/613d6936.html</id>
    <published>2024-04-18T17:43:32.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<p>yilia主题也有集成搜索功能，不过它使用的搜索是基于标题和标签的，有一定的局限性，没有提供全文检索功能。这篇文章介绍的就是集成全文检索和今日诗词。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/imgs/20200411232312.png"></p><p>动图<br><img src="/imgs/hexo-yilia-local-search2.gif"></p><h2 id="1-集成本地搜索"><a href="#1-集成本地搜索" class="headerlink" title="1.集成本地搜索"></a>1.集成本地搜索</h2><p>参考：为 Hexo 博客增加一个站内搜索：<a href="https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/">https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/</a></p><p><img src="/imgs/20200411214252.png"></p><h3 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h3><p>使用<code>hexo-generator-search</code>插件为文章生成一个全局的<code>search.xml</code>，里面包含所有文章的内容（可配置）。然后再去这个文件中搜索关键字，以此来找到需要的文章。</p><span id="more"></span><h3 id="1-1安装插件"><a href="#1-1安装插件" class="headerlink" title="1.1安装插件"></a>1.1安装插件</h3><p><a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><p>安装分为两步，首先通过 npm 将插件安装到本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后在主题new-yilia的（<code>_config.yml</code>）配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: all</span><br></pre></td></tr></table></figure><ul><li><code>path</code>，生成的路径，上述配置后可以通过 <code>/search.xml</code> 访问到文。</li><li><code>field</code>，用来配置全局检索的区间，可以是 <code>post/page/all</code>。</li></ul><p>重新clean、测试，就可以访问：<a href="http://localhost:4000/search.xml">http://localhost:4000/search.xml</a> 了。</p><h3 id="1-2为网页添加搜索栏"><a href="#1-2为网页添加搜索栏" class="headerlink" title="1.2为网页添加搜索栏"></a>1.2为网页添加搜索栏</h3><p>参考了博主的代码：<a href="https://github.com/barretlee/hexo-search-plugin-snippets">https://github.com/barretlee/hexo-search-plugin-snippets</a></p><h4 id="1-2-1添加搜索框"><a href="#1-2-1添加搜索框" class="headerlink" title="1.2.1添加搜索框"></a>1.2.1添加搜索框</h4><p>在<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\layout\layout.ejs</code>的<code>&lt;div id=&quot;wrapper&quot; class=&quot;body-wrap&quot;&gt;</code>上面添加如下代码（同时添加了‘今日诗词’）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.search) &#123; %&gt;</span><br><span class="line">&lt;div class=&quot;page-header&quot; style=&quot;&quot;&gt;</span><br><span class="line">    &lt;%# 今日诗词网址： https://www.jinrishici.com/ %&gt;</span><br><span class="line">    &lt;span&gt;🍻  </span><br><span class="line">        &lt;span id=&quot;jinrishici-sentence&quot; title=&quot;今日诗词&quot;&gt;正在加载今日诗词....&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%# 《集成本地搜索 %&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/js/search.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;span id=&quot;local-search&quot; class=&quot;local-search local-search-plugin&quot; style=&quot;&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;search&quot; placeholder=&quot;站内搜索&quot; id=&quot;local-search-input&quot; class=&quot;local-search-input-cls&quot; style=&quot;&quot;&gt;</span><br><span class="line">      &lt;i id=&quot;local-search-icon-search&quot; class=&quot;icon&quot; aria-hidden=&quot;true&quot; title=&quot;站内搜索&quot;&gt;🔍&lt;/i&gt;</span><br><span class="line">      &lt;div id=&quot;local-search-result&quot; class=&quot;local-search-result-cls&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        if ($(&#x27;.local-search&#x27;).size()) &#123;</span><br><span class="line">          $.getScript(&#x27;/js/search.js&#x27;, function() &#123;</span><br><span class="line">            searchFunc(&quot;/search.xml&quot;, &#x27;local-search-input&#x27;, &#x27;local-search-result&#x27;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;%# 集成本地搜索》 %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">...上面添加，这段和注释去掉</span><br><span class="line">  &lt;div id=&quot;wrapper&quot; class=&quot;body-wrap&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-2添加js脚本"><a href="#1-2-2添加js脚本" class="headerlink" title="1.2.2添加js脚本"></a>1.2.2添加js脚本</h4><p>新建文件：<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\js\search.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">// A local search script with the help of hexo-generator-search</span><br><span class="line">// Copyright (C) 2015 </span><br><span class="line">// Joseph Pan &lt;http://github.com/wzpan&gt;</span><br><span class="line">// Shuhao Mao &lt;http://github.com/maoshuhao&gt;</span><br><span class="line">// This library is free software; you can redistribute it and/or modify</span><br><span class="line">// it under the terms of the GNU Lesser General Public License as</span><br><span class="line">// published by the Free Software Foundation; either version 2.1 of the</span><br><span class="line">// License, or (at your option) any later version.</span><br><span class="line">// </span><br><span class="line">// This library is distributed in the hope that it will be useful, but</span><br><span class="line">// WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="line">// Lesser General Public License for more details.</span><br><span class="line">// </span><br><span class="line">// You should have received a copy of the GNU Lesser General Public</span><br><span class="line">// License along with this library; if not, write to the Free Software</span><br><span class="line">// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span><br><span class="line">// 02110-1301 USA</span><br><span class="line">// </span><br><span class="line"></span><br><span class="line">var searchFunc = function (path, search_id, content_id) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    var BTN = &quot;&lt;i id=&#x27;local-search-close&#x27;&gt;x&lt;/i&gt;&quot;;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: path,</span><br><span class="line">        dataType: &quot;xml&quot;,</span><br><span class="line">        success: function (xmlResponse) &#123;</span><br><span class="line">            // get the contents from search data</span><br><span class="line">            var datas = $(&quot;entry&quot;, xmlResponse).map(function () &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    title: $(&quot;title&quot;, this).text(),</span><br><span class="line">                    content: $(&quot;content&quot;, this).text(),</span><br><span class="line">                    url: $(&quot;url&quot;, this).text()</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;).get();</span><br><span class="line"></span><br><span class="line">            var $input = document.getElementById(search_id);</span><br><span class="line">            var $resultContent = document.getElementById(content_id);</span><br><span class="line"></span><br><span class="line">            $input.addEventListener(&#x27;input&#x27;, function () &#123;</span><br><span class="line">                var str = &#x27;&lt;ul class=\&quot;search-result-list\&quot;&gt;&#x27;;</span><br><span class="line">                var keywords = this.value.trim().toLowerCase().split(/[\s\-]+/);</span><br><span class="line">                $resultContent.innerHTML = &quot;&quot;;</span><br><span class="line">                if (this.value.trim().length &lt;= 0) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                // perform local searching</span><br><span class="line">                datas.forEach(function (data) &#123;</span><br><span class="line">                    var isMatch = true;</span><br><span class="line">                    var content_index = [];</span><br><span class="line">                    if (!data.title || data.title.trim() === &#x27;&#x27;) &#123;</span><br><span class="line">                        data.title = &quot;Untitled&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    var data_title = data.title.trim().toLowerCase();</span><br><span class="line">                    var data_content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;).toLowerCase();</span><br><span class="line">                    var data_url = data.url;</span><br><span class="line">                    var index_title = -1;</span><br><span class="line">                    var index_content = -1;</span><br><span class="line">                    var first_occur = -1;</span><br><span class="line">                    // only match artiles with not empty contents</span><br><span class="line">                    if (data_content !== &#x27;&#x27;) &#123;</span><br><span class="line">                        keywords.forEach(function (keyword, i) &#123;</span><br><span class="line">                            index_title = data_title.indexOf(keyword);</span><br><span class="line">                            index_content = data_content.indexOf(keyword);</span><br><span class="line"></span><br><span class="line">                            if (index_title &lt; 0 &amp;&amp; index_content &lt; 0) &#123;</span><br><span class="line">                                isMatch = false;</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                if (index_content &lt; 0) &#123;</span><br><span class="line">                                    index_content = 0;</span><br><span class="line">                                &#125;</span><br><span class="line">                                if (i == 0) &#123;</span><br><span class="line">                                    first_occur = index_content;</span><br><span class="line">                                &#125;</span><br><span class="line">                                // content_index.push(&#123;index_content:index_content, keyword_len:keyword_len&#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        isMatch = false;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // show search results</span><br><span class="line">                    if (isMatch) &#123;</span><br><span class="line">                        str += &quot;&lt;li&gt;&lt;a href=&#x27;&quot; + data_url +</span><br><span class="line">                            &quot;&#x27; class=&#x27;search-result-title&#x27;&gt;&quot; + data_title + &quot;&lt;/a&gt;&quot;;</span><br><span class="line">                        var content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;);</span><br><span class="line">                        if (first_occur &gt;= 0) &#123;</span><br><span class="line">                            // cut out 100 characters</span><br><span class="line">                            var start = first_occur - 20;</span><br><span class="line">                            var end = first_occur + 80;</span><br><span class="line"></span><br><span class="line">                            if (start &lt; 0) &#123;</span><br><span class="line">                                start = 0;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            if (start == 0) &#123;</span><br><span class="line">                                end = 100;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            if (end &gt; content.length) &#123;</span><br><span class="line">                                end = content.length;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            var match_content = content.substr(start, end);</span><br><span class="line"></span><br><span class="line">                            // highlight all keywords</span><br><span class="line">                            keywords.forEach(function (keyword) &#123;</span><br><span class="line">                                var regS = new RegExp(keyword, &quot;gi&quot;);</span><br><span class="line">                                match_content = match_content.replace(regS,</span><br><span class="line">                                    &quot;&lt;em class=\&quot;search-keyword\&quot;&gt;&quot; +</span><br><span class="line">                                    keyword + &quot;&lt;/em&gt;&quot;);</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                            str += &quot;&lt;p class=\&quot;search-result\&quot;&gt;&quot; + match_content +</span><br><span class="line">                                &quot;...&lt;/p&gt;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                        str += &quot;&lt;/li&gt;&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                str += &quot;&lt;/ul&gt;&quot;;</span><br><span class="line">                if (str.indexOf(&#x27;&lt;li&gt;&#x27;) === -1) &#123;</span><br><span class="line">                    return $resultContent.innerHTML = BTN +</span><br><span class="line">                        &quot;&lt;ul&gt;&lt;span class=&#x27;local-search-empty&#x27;&gt;没有找到内容，更换下搜索词试试吧~&lt;span&gt;&lt;/ul&gt;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                $resultContent.innerHTML = BTN + str;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(document).on(&#x27;click&#x27;, &#x27;#local-search-close&#x27;, function () &#123;</span><br><span class="line">        $(&#x27;#local-search-input&#x27;).val(&#x27;&#x27;);</span><br><span class="line">        $(&#x27;#local-search-result&#x27;).html(&#x27;&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(document).on(&#x27;focus&#x27;, &#x27;#local-search&#x27;, function () &#123;</span><br><span class="line">        $(&#x27;#local-search-icon-search&#x27;).html(&#x27;❌&#x27;);</span><br><span class="line">        $(&#x27;#local-search-icon-search&#x27;).attr(&#x27;id&#x27;, &#x27;local-search-icon-close&#x27;);</span><br><span class="line">        //console.log(&quot;66666&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(document).on(&#x27;click&#x27;, &#x27;#local-search-icon-close&#x27;, function () &#123;</span><br><span class="line">        $(&#x27;#local-search-input&#x27;).val(&#x27;&#x27;);</span><br><span class="line">        $(&#x27;#local-search-result&#x27;).html(&#x27;&#x27;);</span><br><span class="line">        $(&#x27;#local-search-icon-close&#x27;).html(&#x27;🔍&#x27;);</span><br><span class="line">        $(&#x27;#local-search-icon-close&#x27;).attr(&#x27;id&#x27;, &#x27;local-search-icon-search&#x27;);</span><br><span class="line">        //console.log(&quot;1111&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3添加样式文件"><a href="#1-2-3添加样式文件" class="headerlink" title="1.2.3添加样式文件"></a>1.2.3添加样式文件</h4><p>1.新建：<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\search.css</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">.local-search &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    text-align: left;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    margin-bottom: 0px;</span><br><span class="line">    right:10%;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    /* margin: 10px 0; */</span><br><span class="line">    padding: 8px 12px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    border: 2px solid #5ad1ed;</span><br><span class="line">    color: #666;</span><br><span class="line">    font-size: 14px</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls::-webkit-input-placeholder &#123;</span><br><span class="line">    color: #2d2626;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls::-moz-input-placeholder &#123;</span><br><span class="line">    color: #2d2626;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls::-ms-input-placeholder &#123;</span><br><span class="line">    color: #2d2626;</span><br><span class="line">&#125;</span><br><span class="line">#local-search-close &#123;</span><br><span class="line">    content:&#x27;x&#x27;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 10px;</span><br><span class="line">    top: 10px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    color: #888;</span><br><span class="line">    border-radius: 100%;</span><br><span class="line">    line-height: 16px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: consolas;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    font-style: normal;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    transform: rotateZ(0);</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">#local-search-close:hover &#123;</span><br><span class="line">    border-color: #666;</span><br><span class="line">    color: #222;</span><br><span class="line">    transform: rotateZ(180deg);</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 99;</span><br><span class="line">    width: 400px;</span><br><span class="line">    /* top: 50px; */</span><br><span class="line">    right: -16px;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls .local-search-empty &#123;</span><br><span class="line">    color: #888;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: block;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-weight: 400</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul &#123;</span><br><span class="line">    width: 360px;</span><br><span class="line">    max-height: 450px;</span><br><span class="line">    min-height: 0;</span><br><span class="line">    height: auto;</span><br><span class="line">    overflow-y: auto;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">    background: rgba(255, 255, 255, 0.9);</span><br><span class="line">    box-shadow: 3px 4px 10px #7dc3d8;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    border-bottom: 1px solid #bdb7b7;</span><br><span class="line">    padding-bottom: 20px;</span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    font-weight: 400</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li:last-child &#123;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    margin-bottom: 0</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li a &#123;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    text-decoration:none;</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li a:hover &#123;</span><br><span class="line">    text-decoration:underline;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li p &#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    max-height: 124px;</span><br><span class="line">    overflow: hidden</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li em.search-keyword &#123;</span><br><span class="line">    color: #e58c7c;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .local-search-input-cls &#123;</span><br><span class="line">    opacity: .6;</span><br><span class="line">    width: 160px;</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .local-search-input-cls:hover &#123;</span><br><span class="line">    opacity: 1;</span><br><span class="line">    width: 200px;</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .icon &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: -30px;</span><br><span class="line">    color: #999;</span><br><span class="line">    cursor: pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.将上面的样式引入页面中，修改<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\layout\_partial\css.ejs</code>，再后面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;%=config.root%&gt;css/search.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>3.修改<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\main.0cf68a.css</code>最后面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* 页面头部：包含‘今日诗词’，站内搜索 */</span><br><span class="line">.page-header &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    margin: 5px 30px 4px 30px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    -webkit-transition: all 0.2s ease-in;</span><br><span class="line">    height:45px;</span><br><span class="line">    font-family: &#x27;微软雅黑&#x27;;</span><br><span class="line">    border-radius:5px;</span><br><span class="line">    padding-left:10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 今日诗词 */</span><br><span class="line">#jinrishici-sentence&#123;</span><br><span class="line">  color:#27d7a1;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  line-height: 45px;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图2"><a href="#效果图2" class="headerlink" title="效果图2"></a>效果图2</h3><p>详见文章<a href="#">开头</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>hexo+yilia集成本地搜索：<a href="https://yansheng836.github.io/article/915f21c1.html">https://yansheng836.github.io/article/915f21c1.html</a></li><li>今日诗词安装：<a href="https://www.jinrishici.com/doc/#json-fast-easy">https://www.jinrishici.com/doc/#json-fast-easy</a></li><li>为 Hexo 博客增加一个站内搜索：<a href="https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/">https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/</a></li><li>搜索栏样式参考：<a href="http://liangtao.site/">http://liangtao.site/</a></li><li>search.js部分参考：<a href="https://github.com/Kiritor/hexo-theme-yilia-l/blob/8f42e032e14a9746682dc91a0382a0576687a1f0/layout/_partial/post/search.ejs">https://github.com/Kiritor/hexo-theme-yilia-l/blob/8f42e032e14a9746682dc91a0382a0576687a1f0/layout/_partial&#x2F;post&#x2F;search.ejs</a></li><li>另一种配置方式：<a href="https://github.com/Kiritor/hexo-theme-yilia-l/search?q=wrapStyle&unscoped_q=wrapStyle">https://github.com/Kiritor/hexo-theme-yilia-l/search?q=wrapStyle&unscoped_q&#x3D;wrapStyle</a></li><li>可复制的表情包：<a href="http://www.fhdq.net/emoji/emojifuhao.html">http://www.fhdq.net/emoji/emojifuhao.html</a></li></ul><h2 id="2-更近一步"><a href="#2-更近一步" class="headerlink" title="2.更近一步"></a>2.更近一步</h2><h3 id="适配手机端"><a href="#适配手机端" class="headerlink" title="适配手机端"></a>适配手机端</h3><p><code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\main.0cf68a.css</code>，新增下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">.page-header &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    /* margin: 5px 30px 4px 30px; */</span><br><span class="line">    background: #fff;</span><br><span class="line">    -webkit-transition: all 0.2s ease-in;</span><br><span class="line">    height: 45px;</span><br><span class="line">    font-family: &#x27;微软雅黑&#x27;;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    padding-left: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\search.css</code>，新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* 手机端 */</span><br><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">.local-search &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    text-align: left;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    margin-bottom: 0px;</span><br><span class="line">    right: -5%;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .local-search-input-cls &#123;</span><br><span class="line">    opacity: .6;</span><br><span class="line">    width: 100px;</span><br><span class="line">    transition: all .3s;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls &#123;</span><br><span class="line">    right: 2px;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul &#123;</span><br><span class="line">    width: 360px;</span><br><span class="line">    max-height: 400px;</span><br><span class="line">    min-height: 0;</span><br><span class="line">    height: auto;</span><br><span class="line">    overflow-y: auto;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">    background: rgba(255, 255, 255, 0.9);</span><br><span class="line">    box-shadow: 3px 4px 10px #7dc3d8;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手机端取消本地搜索功能"><a href="#手机端取消本地搜索功能" class="headerlink" title="手机端取消本地搜索功能"></a>手机端取消本地搜索功能</h3><p>因为考虑到手机端界面比较小，这里取消搜索功能。</p><p><code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\layout\layout.ejs</code>，在layout.ejs的最后的body前新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 移动设备侦测</span><br><span class="line">    var isMobile = &#123;</span><br><span class="line">      Android: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/Android/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      BlackBerry: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/BlackBerry/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      iOS: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/iPhone|iPad|iPod/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      Opera: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/Opera Mini/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      Windows: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/IEMobile/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      any: function () &#123;</span><br><span class="line">        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    if(isMobile.any())&#123;</span><br><span class="line">        //手机端取消搜索功能</span><br><span class="line">        $(&#x27;.local-search&#x27;).css(&quot;display&quot;,&quot;none&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($(&#x27;.local-search&#x27;).size() &amp;&amp; !isMobile.any()) &#123;</span><br><span class="line">      $.getScript(&#x27;/js/search.js&#x27;, function() &#123;</span><br><span class="line">        searchFunc(&quot;/search.xml&quot;, &#x27;local-search-input&#x27;, &#x27;local-search-result&#x27;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>或者直接用css隐藏搜索框<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\search.css</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 手机端 */</span><br><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">    .local-search &#123;</span><br><span class="line">        display:none;</span><br><span class="line">        /* right: -5%; */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><p>测试时，修改文件名后，可能不能立即将文章加入索引，即不能进行搜索。</p><p>停止测试，重新hexo s即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;yilia主题也有集成搜索功能，不过它使用的搜索是基于标题和标签的，有一定的局限性，没有提供全文检索功能。这篇文章介绍的就是集成全文检索和今日诗词。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/imgs/20200411232312.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;动图&lt;br&gt;&lt;img src=&quot;/imgs/hexo-yilia-local-search2.gif&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-集成本地搜索&quot;&gt;&lt;a href=&quot;#1-集成本地搜索&quot; class=&quot;headerlink&quot; title=&quot;1.集成本地搜索&quot;&gt;&lt;/a&gt;1.集成本地搜索&lt;/h2&gt;&lt;p&gt;参考：为 Hexo 博客增加一个站内搜索：&lt;a href=&quot;https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/&quot;&gt;https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/20200411214252.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;原理说明&quot;&gt;&lt;a href=&quot;#原理说明&quot; class=&quot;headerlink&quot; title=&quot;原理说明&quot;&gt;&lt;/a&gt;原理说明&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;hexo-generator-search&lt;/code&gt;插件为文章生成一个全局的&lt;code&gt;search.xml&lt;/code&gt;，里面包含所有文章的内容（可配置）。然后再去这个文件中搜索关键字，以此来找到需要的文章。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MobaXterm登录堡垒机/跳板机直接使用Linux/Windows服务器</title>
    <link href="https://github.com/jiangjiawei520/post/81cbb71e.html"/>
    <id>https://github.com/jiangjiawei520/post/81cbb71e.html</id>
    <published>2024-04-16T09:16:00.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>xshell很好用，但是没找到正式版本，公司不允许使用，看了网上的一些资料，发现MobaXterm是比较好的替代产品,，使用MobaXterm登录堡垒机&#x2F;跳板机直接使用Linux服务器。</p><h2 id="安装mobaxterm"><a href="#安装mobaxterm" class="headerlink" title="安装mobaxterm"></a>安装mobaxterm</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>v21.0</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>官网的免费版本：<br><a href="https://mobaxterm.mobatek.net/download-home-edition.html">https://mobaxterm.mobatek.net/download-home-edition.html</a><br>直接portable edition就可以了。</p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><span id="more"></span><h2 id="登录堡垒机-跳板机Linux服务器"><a href="#登录堡垒机-跳板机Linux服务器" class="headerlink" title="登录堡垒机&#x2F;跳板机Linux服务器"></a>登录堡垒机&#x2F;跳板机Linux服务器</h2><h3 id="登录方法"><a href="#登录方法" class="headerlink" title="登录方法"></a>登录方法</h3><h4 id="输入自己的信息"><a href="#输入自己的信息" class="headerlink" title="输入自己的信息"></a>输入自己的信息</h4><p>session–&gt;SSH，新增《创建或者管理凭据》<img src="/imgs/image-20240416092314200.png" alt="image-20240416092314200"></p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70-1713230457868-3.png" alt="在这里插入图片描述"></p><p>新建凭据</p><p>点击新建new，创建凭据；<br>name：随意填<br>username：就是你的用户名（你在公司的账户，一般是姓名拼音，大公司是拼音后还有个序号）<br>password：就是你用户名对应的密码；</p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70-1713230507195-10.png" alt="在这里插入图片描述"></p><p><img src="/imgs/image-20240416092428250.png" alt="image-20240416092428250"></p><p>点击最下方的确认按钮，保存</p><h3 id="登录堡垒机-跳板机"><a href="#登录堡垒机-跳板机" class="headerlink" title="登录堡垒机&#x2F;跳板机"></a>登录堡垒机&#x2F;跳板机</h3><p>登录口令是这个<br>ssh -p XX username@ip</p><p>所以下图的<br>remote host ：你的堡垒机ip<br>specify username: 此处会出现上一步你填的name，勾选，登录的时候会自动替换成你上面写的username。<br>port：需要注意的是这个端口号记得改，我发现我的堡垒机登录的端口号是80，之前没改，所以一直没成功。（linux端口正常是22）</p><p><img src="/imgs/image-20240416092633347.png" alt="image-20240416092633347"></p><p>直接点击ok<br>一部分小伙伴会直接弹出窗口，让你输入二次验证password（密码），那么直接将堡垒机的二次密码输入即可；</p><h4 id="选择服务器"><a href="#选择服务器" class="headerlink" title="选择服务器"></a>选择服务器</h4><p>​二次密码验证后，将会需要选择需要登陆的服务器。</p><p>二次验证：</p><p><img src="/imgs/image-20240416095323455.png" alt="image-20240416095323455"></p><p>服务器选择，然后输入服务器的账号密码，即可正常使用，复制粘贴正常。（只会显示linux机器）</p><p><img src="/imgs/image-20240416095439359.png" alt="image-20240416095439359"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>复制了堡垒机的密码，你看看ctrl v能不能用，不能用的话，直接鼠标右键一下，密码就可以粘贴上来了，因为密码不显示，所以这块不知道自己粘贴上了没有，大家多试几次即可</p><h2 id="登录堡垒机-跳板机Windows服务器"><a href="#登录堡垒机-跳板机Windows服务器" class="headerlink" title="登录堡垒机&#x2F;跳板机Windows服务器"></a>登录堡垒机&#x2F;跳板机Windows服务器</h2><p>​</p><p>session–&gt;SSH，新增《创建或者管理凭据》<img src="/imgs/image-20240416092314200.png" alt="image-20240416092314200"></p><p><img src="/imgs/image-20240416094738825.png" alt="image-20240416094738825"></p><p>新建凭据</p><p>点击新建new，创建凭据；<br>name：随意填<br>username：就是你的用户名（你在公司的账户，一般是姓名拼音，大公司是拼音后还有个序号）<br>password：就是你用户名对应的密码；</p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70-1713230507195-10.png" alt="在这里插入图片描述"></p><p><img src="/imgs/image-20240416092428250.png" alt="image-20240416092428250"></p><p>点击最下方的确认按钮，保存</p><h3 id="登录堡垒机-跳板机-1"><a href="#登录堡垒机-跳板机-1" class="headerlink" title="登录堡垒机&#x2F;跳板机"></a>登录堡垒机&#x2F;跳板机</h3><p>remote host ：你的堡垒机ip<br>specify username: 此处会出现上一步你填的name，勾选，登录的时候会自动替换成你上面写的username。<br>port：需要注意的是这个端口号记得改,使用Windows的远程端口，我发现我的堡垒机登录的端口号是63333，之前没改，所以一直没成功。（Windows端口正常是63333或者默认的3389）</p><p><img src="/imgs/image-20240416094827124.png" alt="image-20240416094827124"></p><p>直接点击ok<br>一部分小伙伴会直接弹出窗口，让你输入二次验证password（密码），那么直接将堡垒机的二次密码输入即可；</p><h4 id="选择服务器-1"><a href="#选择服务器-1" class="headerlink" title="选择服务器"></a>选择服务器</h4><p>​二次密码验证后，将会需要选择需要登陆的服务器。</p><p>二次验证：</p><p><img src="/imgs/image-20240416095102158.png" alt="image-20240416095102158"></p><p>服务器选择，然后输入服务器的账号密码，即可正常使用，复制粘贴正常。（只会显示Windows机器）</p><p><img src="/imgs/image-20240416095210062.png" alt="image-20240416095210062"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;xshell很好用，但是没找到正式版本，公司不允许使用，看了网上的一些资料，发现MobaXterm是比较好的替代产品,，使用MobaXterm登录堡垒机&amp;#x2F;跳板机直接使用Linux服务器。&lt;/p&gt;
&lt;h2 id=&quot;安装mobaxterm&quot;&gt;&lt;a href=&quot;#安装mobaxterm&quot; class=&quot;headerlink&quot; title=&quot;安装mobaxterm&quot;&gt;&lt;/a&gt;安装mobaxterm&lt;/h2&gt;&lt;h3 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h3&gt;&lt;p&gt;v21.0&lt;/p&gt;
&lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;官网的免费版本：&lt;br&gt;&lt;a href=&quot;https://mobaxterm.mobatek.net/download-home-edition.html&quot;&gt;https://mobaxterm.mobatek.net/download-home-edition.html&lt;/a&gt;&lt;br&gt;直接portable edition就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    <category term="shell" scheme="https://github.com/jiangjiawei520/categories/linux/shell/"/>
    
    
    <category term="MobaXterm" scheme="https://github.com/jiangjiawei520/tags/MobaXterm/"/>
    
    <category term="shell" scheme="https://github.com/jiangjiawei520/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用qshell一键部署静态博客到七牛云</title>
    <link href="https://github.com/jiangjiawei520/post/1a485dfe.html"/>
    <id>https://github.com/jiangjiawei520/post/1a485dfe.html</id>
    <published>2024-04-15T18:27:06.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载qshell下载"><a href="#下载qshell下载" class="headerlink" title="下载qshell下载"></a>下载qshell下载</h3><p><a href="https://github.com/qiniu/qshell/releases/download/v2.13.0/qshell-v2.13.0-windows-386.zip">https://github.com/qiniu/qshell/releases/download/v2.13.0/qshell-v2.13.0-windows-386.zip</a></p><h3 id="配置qshell环境变量"><a href="#配置qshell环境变量" class="headerlink" title="配置qshell环境变量"></a>配置qshell环境变量</h3><h3 id="添加account"><a href="#添加account" class="headerlink" title="添加account"></a>添加account</h3><p>执行qshell account <Your AccessKey> <Your SecretKey> <Your Name> </p><h3 id="Hexo项目的根目录下创建upload-conf文件"><a href="#Hexo项目的根目录下创建upload-conf文件" class="headerlink" title="Hexo项目的根目录下创建upload.conf文件"></a>Hexo项目的根目录下创建upload.conf文件</h3><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// 这个地址是根目录地址，不可使用相对路径</span><br><span class="line">&quot;src_dir&quot;: &quot;E:\\xx\\github\\person_blog_new\\public&quot;,</span><br><span class="line">// 储存空间名称</span><br><span class="line">&quot;bucket&quot;: &quot;person-blog-new-hw&quot;,</span><br><span class="line">// 是否覆盖</span><br><span class="line">&quot;overwrite&quot; : true,</span><br><span class="line">// 检查新增文件</span><br><span class="line">&quot;rescan_local&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传 qshell qupload upload.conf</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>打开Hexo下的package.json，npm run publish 就可实现一键打包部署到七牛云</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">&quot;publish&quot;: &quot;hexo generate &amp;&amp; qshell qupload upload.conf&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.cn/post/6844903983857811469">https://juejin.cn/post/6844903983857811469</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;下载qshell下载&quot;&gt;&lt;a href=&quot;#下载qshell下载&quot; class=&quot;headerlink&quot; title=&quot;下载qshell下载&quot;&gt;&lt;/a&gt;下载qshell下载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/qiniu/qshe</summary>
      
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
    <category term="七牛云" scheme="https://github.com/jiangjiawei520/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>七牛云搭建hexo博客</title>
    <link href="https://github.com/jiangjiawei520/post/11aec52a.html"/>
    <id>https://github.com/jiangjiawei520/post/11aec52a.html</id>
    <published>2024-04-15T16:39:23.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="http://javajun.net/2021/03/20/da-jian-ni-de-ge-ren-bo-ke/">Hexo + GitHub Pages 搭建你的个人博客</a>，但这种方案有两个缺点：</p><ol><li>域名是github.io的二级域名</li><li>github在国内网速较慢</li></ol><p>所以我最终还是选择了购买自己的域名，并借用七牛云搭建起了免费的博客站。</p><p>七牛云每个月有<strong>10G</strong>的免费流量，对于大多数博客站点来说足够使用了。</p><p>​<strong>备注：域名阿里云购买，空间使用七牛云每个月10G的免费流量。</strong></p><h2 id="购买域名与云服务器"><a href="#购买域名与云服务器" class="headerlink" title="购买域名与云服务器"></a>购买域名与云服务器</h2><p>但想要使用自己的域名搭建博客，并非完全免费，前期还是要付出一点点的资金，主要付出的费用如下：</p><table><thead><tr><th align="left">购买项目</th><th align="left">说明</th><th align="left">花费</th></tr></thead><tbody><tr><td align="left">域名</td><td align="left">域名什么价位的都要，便宜的也有几块钱一年的，根据自己的需要买一个</td><td align="left">10元以上</td></tr><tr><td align="left">阿里云服务器</td><td align="left">使用阿里云备案服务进行域名备案要求你必须购买三个月以上云服务器，我选了最便宜的服务器，学生的话可以享受9.9一个月的学生机</td><td align="left">30元（学生）或160元左右</td></tr></tbody></table><p>购买域名地址：<a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com/</a></p><p>云服务器购买地址：<a href="https://www.aliyun.com/product/ecs">https://www.aliyun.com/product/ecs</a></p><p><img src="/imgs/image-20210323101054344.png" alt="img"></p><p>其他云厂商什么价位我不了解，我只试过阿里云的。</p><span id="more"></span><h2 id="申请域名备案"><a href="#申请域名备案" class="headerlink" title="申请域名备案"></a>申请域名备案</h2><p>在国内，申请备案是必须的。备案的流程很简单，登录阿里云控制台，右上角点击备案，然后按流程填表传资料即可。阿里云会进行初审，通过之后会将你的资料发给工信部进行审核。整个流程都很简单，也会有提示，一步步走就可以了</p><p>也可以手机下载阿里云app操作</p><p><img src="/imgs/image-20210323101639846.png" alt="img"></p><p>​<strong>备注：如果不备案，七牛云新建空间时，需要选择海外的，不能使用国内。</strong></p><h2 id="申请七牛云"><a href="#申请七牛云" class="headerlink" title="申请七牛云"></a>申请七牛云</h2><p>七牛云：<a href="https://portal.qiniu.com/home">https://portal.qiniu.com/home</a></p><p>cloudflare：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><p>七牛云账号可以免费申请，登录之后添加对象存储服务，并创建两个空间，一个用于存放图片，一个用于存放博客站点静态文件。只创建一个空间其实也可以，但我个人比较建议分开管理，到时候可以给两个空间分别设置一个二级域名</p><p><img src="/imgs/image-20210323101856790.png" alt="img"></p><p>创建好空间之后，七牛云会给你临时CDN域名用于测试</p><p><img src="/imgs/image-20210323102123961.png" alt="img"></p><h2 id="部署hexo到七牛云"><a href="#部署hexo到七牛云" class="headerlink" title="部署hexo到七牛云"></a>部署hexo到七牛云</h2><h3 id="qshell上传工具"><a href="#qshell上传工具" class="headerlink" title="qshell上传工具"></a>qshell上传工具</h3><p>这里借助了七牛云的命令行工具qshell，下载地址：<a href="https://developer.qiniu.com/kodo/1302/qshell">命令行工具(qshell)_实用工具_对象存储 - 七牛开发者中心 (qiniu.com)</a></p><p>下载下来就是qshell二进制文件（mac和linux），执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> qshell /usr/local/bin</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/qshell</span><br></pre></td></tr></table></figure><p>在你的博客根目录创建upload.conf，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;src_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/xxx/blog/public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;overwrite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rescan_local&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">src_dir</td><td align="left">要上传的目录，要指定到博客的public目录</td></tr><tr><td align="left">bucket</td><td align="left">博客存放的bucket</td></tr><tr><td align="left">overwrite</td><td align="left">覆盖重复文件</td></tr><tr><td align="left">rescan_local</td><td align="left">本地新增的文件不会被同步，需要手动设置为true才会去检测新增文件</td></tr></tbody></table><p>更多参数参考：<a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md">qshell&#x2F;qupload.md at master · qiniu&#x2F;qshell (github.com)</a></p><h4 id="账号设置"><a href="#账号设置" class="headerlink" title="账号设置"></a>账号设置</h4><p>注意：要使用qshell上传文件到七牛云，需要先配置秘钥，参考：<a href="https://developer.qiniu.com/kodo/1302/qshell#4">https://developer.qiniu.com/kodo/1302/qshell#4</a></p><p><img src="/imgs/image-20240415165049261.png" alt="image-20240415165049261"></p><p><img src="/imgs/image-20240415165024310.png" alt="image-20240415165024310"></p><p><img src="/imgs/image-20240415164908998.png" alt="image-20240415164908998"></p><h4 id="新建同步任务"><a href="#新建同步任务" class="headerlink" title="新建同步任务"></a>新建同步任务</h4><p>选择新建同步任务</p><p><img src="/imgs/image-20240415165111703.png" alt="image-20240415165111703"></p><p>本地目录：选择生成的public</p><p>存储类型：检查空间是否有同名文件，覆盖上传</p><p><img src="/imgs/image-20240415165152509.png" alt="image-20240415165152509"></p><p>​如使用命令上传，参考《部署上传》章节</p><h3 id="部署上传（可选）"><a href="#部署上传（可选）" class="headerlink" title="部署上传（可选）"></a>部署上传（可选）</h3><p>全量上传：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell qupload upload.conf</span><br></pre></td></tr></table></figure><p>上传成功后，在upload.conf增加<code>skip_path_prefixes</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;src_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/xxx/blog/public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skip_path_prefixes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;medias,css,js,libs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;overwrite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rescan_local&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>作用是忽略<code>medias,css,js,libs</code>目录不进行上传，因为这些静态文件大多数情况是不需要每次都上传的，有修改的时候再把这行去掉就好了。</p><p>最后，修改博客根目录下的package.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate &amp;&amp; qshell qupload upload.conf&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以后部署hexo到七牛云只需执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn deploy</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm deploy</span><br></pre></td></tr></table></figure><h2 id="设置自定义域名"><a href="#设置自定义域名" class="headerlink" title="设置自定义域名"></a>设置自定义域名</h2><p>域名备案申请通过之后，在七牛云后台为你的空间设置自定义域名：</p><p>配置想要设置的域名，如qbk.jiangjiawei.xyz</p><p><img src="/imgs/image-20210323110306124.png" alt="img"></p><p><img src="/imgs/image-20240415164548166.png" alt="image-20240415164548166"></p><p>解析认证域名归属</p><p><img src="/imgs/image-20240415164732231.png" alt="image-20240415164732231"></p><p>域名解析商处配置CANME</p><p><img src="/imgs/image-20240415164620001.png" alt="image-20240415164620001"></p><p><img src="/imgs/image-20240415164718466.png" alt="image-20240415164718466"></p><h2 id="自动上传图片"><a href="#自动上传图片" class="headerlink" title="自动上传图片"></a>自动上传图片</h2><h3 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h3><p>我使用typora来编写博客，typora支持使用图床工具自动上传图片到七牛云或其他云存储服务</p><p>打开typora设置，选择图像，进行如下设置：</p><p><img src="/imgs/image-20210323102431430.png" alt="img"></p><h3 id="图床工具设置"><a href="#图床工具设置" class="headerlink" title="图床工具设置"></a>图床工具设置</h3><p>下载并安装upic，这是完全免费的图床工具：<a href="https://gitee.com/gee1k/uPic">uPic: 简洁的 Mac 图床客户端 uPic (gitee.com)</a></p><p>打开upic设置，点击左下角+号，增加七牛云KODO，然后进行如下图设置：</p><p><img src="/imgs/image-20210323102724578.png" alt="img"></p><p>图中的access key，secret key从七牛云后台获取：</p><p><img src="/imgs/image-20210323102857841.png" alt="img"></p><p>记得将七牛云设置为默认图床</p><p><img src="/imgs/image-20210323102959476.png" alt="img"></p><p>进行以上设置之后，在typora直接黏贴图片就能自动上传到七牛云了</p><blockquote><p><strong>注意：域名通过之后，记得将图床设置以及博文中的七牛云临时域名替换成你的域名</strong></p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="记得开启默认首页"><a href="#记得开启默认首页" class="headerlink" title="记得开启默认首页"></a>记得开启默认首页</h3><p><img src="/imgs/image-20210329151040426.png" alt="img"></p><h3 id="勾选覆盖上传"><a href="#勾选覆盖上传" class="headerlink" title="勾选覆盖上传"></a>勾选覆盖上传</h3><p>​勾选覆盖上传，否则文件有更新时，上传无法更新。</p><p><img src="/imgs/image-20240415174125800.png" alt="image-20240415174125800"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; &lt;a href=&quot;http://javajun.net/2021/03/20/da-jian-ni-de-ge-ren-bo-ke/&quot;&gt;Hexo + GitHub Pages 搭建你的个人博客&lt;/a&gt;，但这种方案有两个缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;域名是github.io的二级域名&lt;/li&gt;
&lt;li&gt;github在国内网速较慢&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我最终还是选择了购买自己的域名，并借用七牛云搭建起了免费的博客站。&lt;/p&gt;
&lt;p&gt;七牛云每个月有&lt;strong&gt;10G&lt;/strong&gt;的免费流量，对于大多数博客站点来说足够使用了。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;备注：域名阿里云购买，空间使用七牛云每个月10G的免费流量。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;购买域名与云服务器&quot;&gt;&lt;a href=&quot;#购买域名与云服务器&quot; class=&quot;headerlink&quot; title=&quot;购买域名与云服务器&quot;&gt;&lt;/a&gt;购买域名与云服务器&lt;/h2&gt;&lt;p&gt;但想要使用自己的域名搭建博客，并非完全免费，前期还是要付出一点点的资金，主要付出的费用如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;购买项目&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;花费&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;域名&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;域名什么价位的都要，便宜的也有几块钱一年的，根据自己的需要买一个&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;10元以上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;阿里云服务器&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;使用阿里云备案服务进行域名备案要求你必须购买三个月以上云服务器，我选了最便宜的服务器，学生的话可以享受9.9一个月的学生机&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;30元（学生）或160元左右&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;购买域名地址：&lt;a href=&quot;https://wanwang.aliyun.com/&quot;&gt;https://wanwang.aliyun.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;云服务器购买地址：&lt;a href=&quot;https://www.aliyun.com/product/ecs&quot;&gt;https://www.aliyun.com/product/ecs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/image-20210323101054344.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;其他云厂商什么价位我不了解，我只试过阿里云的。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>配置oracle定时备份</title>
    <link href="https://github.com/jiangjiawei520/post/8ab9b48c.html"/>
    <id>https://github.com/jiangjiawei520/post/8ab9b48c.html</id>
    <published>2024-04-11T15:56:08.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="准备内容"><a href="#准备内容" class="headerlink" title="准备内容"></a>准备内容</h3><ul><li>2345好压程序（用于压缩备份）</li><li>oracle客户端程序（用于提供exp命令）</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装好压"><a href="#安装好压" class="headerlink" title="安装好压"></a>安装好压</h4><h5 id="配置好压到环境变量"><a href="#配置好压到环境变量" class="headerlink" title="配置好压到环境变量"></a>配置好压到环境变量</h5><h5 id="测试好压压缩命令"><a href="#测试好压压缩命令" class="headerlink" title="测试好压压缩命令"></a>测试好压压缩命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HaoZipC a -tzip 压缩文件名称.zip 需要压缩的目录</span><br></pre></td></tr></table></figure><h4 id="编写exp脚本"><a href="#编写exp脚本" class="headerlink" title="编写exp脚本"></a>编写exp脚本</h4><ul><li>配置目录H:\数据库备份\228数据库备份、H:\数据库备份\159数据库备份</li></ul><span id="more"></span><p>数据备份HaoZip_rb.bat：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">title 172.16.2.159和172.16.8.228实例备份</span><br><span class="line">set dtm=%Date:~0,4%-%Date:~5,2%-%Date:~8,2%</span><br><span class="line">REM 设置日志文件路径</span><br><span class="line">set LOG_FILE_159=H:\数据库备份\batrun_log-159-%dtm%.txt</span><br><span class="line">set LOG_FILE_228=H:\数据库备份\batrun_log-228-%dtm%.txt</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始备份159=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===在《H:\数据库备份\159数据库备份\》中新建以当前日期为名的文件夹%dtm%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">H: &gt;&gt; %LOG_FILE_159%</span><br><span class="line">cd H:\数据库备份\159数据库备份 &gt;&gt; %LOG_FILE_159%</span><br><span class="line">md H:\数据库备份\159数据库备份\%dtm% &gt;&gt; %LOG_FILE_159%</span><br><span class="line"></span><br><span class="line">:: 全库备份</span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始备份 159(GHZJ_ORCL)=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">exp GHZJ_TEST/xxx@172.16.2.159/ORCL  full=y  file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_ORCL-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始压缩 GHZJ_ORCL-%dtm%.dmp和 GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">HaoZipC a -tzip  GHZJ_ORCL-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_ORCL-%dtm%.dmp GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始备份 159(GHZJ_GHXGTEST)=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">exp GHZJ_GHXGTEST/xxx@172.16.2.159/ghxgtest  full=y  file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始压缩 GHZJ_GHXGTEST-%dtm%.dmp和 GHZJ_GHXGTEST-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">HaoZipC a -tzip  GHZJ_GHXGTEST-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log &gt;&gt; %LOG_FILE_159% </span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_GHXGTEST-%dtm%.dmp GHZJ_GHXGTEST-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line"></span><br><span class="line">:: 单独备份实例</span><br><span class="line">:: echo ===开始备份159(GHZJ_TEST)===</span><br><span class="line">:: exp GHZJ_TEST/xxx@172.16.2.159/ORCL compress=n buffer=65536 owner=GHZJ_TEST file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_TEST-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_TEST-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_TEST-%dtm%.dmp和 GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_TEST-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_TEST-%dtm%.dmp GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.log</span><br><span class="line">:: </span><br><span class="line">:: echo ===开始备份159(GHZJ_GHXGTEST)===</span><br><span class="line">:: exp GHZJ_GHXGTEST/xxx@172.16.2.159/ghxgtest compress=n buffer=65536 owner=GHZJ_GHXGTEST file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_GHXGTEST-%dtm%.dmp和 GHZJ_GHXGTEST-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_GHXGTEST-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_GHXGTEST-%dtm%.dmp GHZJ_GHXGTEST-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始备份228=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===在《H:\数据库备份\228数据库备份\》中新建以当前日期为名的文件夹%dtm%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">H:</span><br><span class="line">cd H:\数据库备份\228数据库备份 &gt;&gt; %LOG_FILE_228%</span><br><span class="line">md H:\数据库备份\228数据库备份\%dtm% &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">REM tables = (tbl1, tbl2) 导出指定的表</span><br><span class="line">REM owner = (user1, user2) 导出指定的用户，owner和full参数只能存在一个</span><br><span class="line">REM full = y 全库导出</span><br><span class="line"></span><br><span class="line">:: 全库备份</span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始备份228(GHZJ_GHXG)=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">exp system/xxx@172.16.8.228/ghxg  full=y  file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始压缩 GHZJ_GHXG-%dtm%.dmp和 GHZJ_GHXG-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">HaoZipC a -tzip  GHZJ_GHXG-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_GHXG-%dtm%.dmp GHZJ_GHXG-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始备份228(GHZJ_ORCL)=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">exp system/xxx@172.16.8.228/ORCL  full=y  file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_ORCL-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始压缩 GHZJ_ORCL-%dtm%.dmp和 GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">HaoZipC a -tzip  GHZJ_ORCL-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_228% </span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_ORCL-%dtm%.dmp GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">:: 单独备份实例</span><br><span class="line">:: echo ===开始备份228(GHZJ_GHXG)===</span><br><span class="line">:: exp GHZJ_GHXG/xxx@172.16.8.228/ghxg  owner=GHZJ_GHXG  file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_GHXG-%dtm%.dmp和 GHZJ_GHXG-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_GHXG-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_GHXG-%dtm%.dmp GHZJ_GHXG-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log</span><br><span class="line">:: </span><br><span class="line">:: </span><br><span class="line">:: echo ===开始备份228(GHZJ_TEST)===</span><br><span class="line">:: exp GHZJ_TEST/xxx@172.16.8.228/ORCL  owner=GHZJ_TEST file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_TEST-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_TEST-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_TEST-%dtm%.dmp和 GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_TEST-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_TEST-%dtm%.dmp GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.log</span><br><span class="line"></span><br><span class="line">echo ===压缩完成,删除日期空目录《H:\数据库备份\159数据库备份\%dtm%》=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">rd /s H:\数据库备份\159数据库备份\%dtm% &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===压缩完成,删除日期空目录《H:\数据库备份\228数据库备份\%dtm%》=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">rd /s H:\数据库备份\228数据库备份\%dtm% &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo ===使用forfiles删除159 30天之前的备份压缩文件,/D参数是天数，/m是文件类型=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">forfiles /p H:\数据库备份\159数据库备份\ /m  *.zip /d -30 -c &quot;cmd /c if @isdir==FALSE  DEL /S /Q @path&quot; &gt;&gt; %LOG_FILE_159%</span><br><span class="line">forfiles /p H:\数据库备份\159数据库备份 /m *.zip /d -30 /c &quot;cmd /c IF @isdir==TRUE RD /S /Q @path&quot; </span><br><span class="line">echo ===使用forfiles删除228 30天之前的备份压缩文件,/D参数是天数，/m是文件类型=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">forfiles /p H:\数据库备份\228数据库备份\ /m  *.zip /d -30 -c &quot;cmd /c if @isdir==FALSE  DEL /S /Q @path&quot;  &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">REM echo 备份SXKPN库</span><br><span class="line">REM expdp SXKPN/xxx@PNBDC Directory=PNSJB dumpfile=SXKPN-%dtm%.dump logfile=SXKPN-%dtm%.log </span><br><span class="line">REM HaoZipC a -tzip  SXKPN-%dtm%.zip E:\PNBDCBACKUP\SXKPN-%dtm%.dump  E:\PNBDCBACKUP\SXKPN-%dtm%.log </span><br><span class="line">REM del E:\PNBDCBACKUP\SXKPN-%dtm%.dump </span><br><span class="line">REM del E:\PNBDCBACKUP\SXKPN-%dtm%.log </span><br><span class="line"></span><br><span class="line">REM echo 移动当天所有数据库备份压缩文件到新建日期文件夹中</span><br><span class="line">REM move E:\PNBDCBACKUP\*%dtm%.zip E:\PNBDCBACKUP\%dtm%</span><br><span class="line"></span><br><span class="line">REM echo 使用forfiles删除30天之前的备份压缩文件,/D参数是天数，/m是文件类型</span><br><span class="line">REM forfiles /p E:\PNBDCpump /m *.zip /d -30 /c &quot;cmd /c IF @isdir==TRUE RD /S /Q @path&quot;</span><br></pre></td></tr></table></figure><p>​<strong>注：exp、expdp导出全库必备前提：①导出用户权限是EXP_FULL_DATABAS或者dba；②需要设置参数full&#x3D;y，owner和full参数只能存在一个</strong></p><h4 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h4><p>​通过任务计划程序配置</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>centos 定时任务每月1号全备</p><p>要在CentOS上设置一个定时任务以在每月的第一天执行全备，你可以使用<code>cron</code>来实现。以下是一个示例，它创建了一个cron任务，该任务每月的第一天运行一个全备脚本。</p><h3 id="创建一个备份脚本"><a href="#创建一个备份脚本" class="headerlink" title="创建一个备份脚本"></a>创建一个备份脚本</h3><p>首先，你需要创建一个备份脚本，例如<code>backup.sh</code>，并确保它可以正常工作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># backup.sh</span><br><span class="line"># 这里添加你的备份命令，例如使用tar或rsync</span><br><span class="line">if [ -f ~/.bash_profile ];</span><br><span class="line">then</span><br><span class="line">  . ~/.bash_profile</span><br><span class="line">fi</span><br><span class="line">export ORACLE_HOME=/data/oracle/product/11.2.0/db_1</span><br><span class="line">export ORACLE_SID=JCKDCS</span><br><span class="line">export PATH=$PATH:$HOME/bin:$ORACLE_HOME/bin</span><br><span class="line">export DATA_DIR=JCKDCS_BAK</span><br><span class="line">export nowFileName=`date +%Y%m%d%H`</span><br><span class="line">echo &quot;start......&quot;</span><br><span class="line">expdp JCKDCS/xxx@JCKDCS schemas=JCKDCS dumpfile=JCKDCS.JCKDCS_$nowFileName.dmp directory=JCKDCS_BAK logfile=JCKDCS.JCKDCS_$nowFileName.log</span><br><span class="line">expdp JCKDCSCS/xxx@JCKDCS schemas=JCKDCSCS dumpfile=JCKDCS.JCKDCSCS__$nowFileName.dmp directory=JCKDCS_BAK logfile=JCKDCS.JCKDCSCS_$nowFileName.log</span><br><span class="line">echo &quot;finished.....&quot;</span><br></pre></td></tr></table></figure><p>确保脚本可执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x backup.sh</span><br></pre></td></tr></table></figure><h3 id="编辑crontab文件"><a href="#编辑crontab文件" class="headerlink" title="编辑crontab文件"></a>编辑crontab文件</h3><p>打开当前用户的crontab文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在crontab文件中添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /path/to/backup.sh</span><br></pre></td></tr></table></figure><p>这个cron任务的意思是在每月的第一天午夜（00:00）运行<code>backup.sh</code>。</p><p>保存并退出编辑器，cron将自动安装新的定时任务。</p><h3 id="检查cron服务"><a href="#检查cron服务" class="headerlink" title="检查cron服务"></a>检查cron服务</h3><p>确保cron服务正在运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable crond</span><br><span class="line">systemctl start crond</span><br><span class="line">systemctl status crond</span><br></pre></td></tr></table></figure><p>现在，每当月份的第一天到来时，<code>backup.sh</code>脚本将会被自动执行。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;h3 id=&quot;准备内容&quot;&gt;&lt;a href=&quot;#准备内容&quot; class=&quot;headerlink&quot; title=&quot;准备内容&quot;&gt;&lt;/a&gt;准备内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;2345好压程序（用于压缩备份）&lt;/li&gt;
&lt;li&gt;oracle客户端程序（用于提供exp命令）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;h4 id=&quot;安装好压&quot;&gt;&lt;a href=&quot;#安装好压&quot; class=&quot;headerlink&quot; title=&quot;安装好压&quot;&gt;&lt;/a&gt;安装好压&lt;/h4&gt;&lt;h5 id=&quot;配置好压到环境变量&quot;&gt;&lt;a href=&quot;#配置好压到环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置好压到环境变量&quot;&gt;&lt;/a&gt;配置好压到环境变量&lt;/h5&gt;&lt;h5 id=&quot;测试好压压缩命令&quot;&gt;&lt;a href=&quot;#测试好压压缩命令&quot; class=&quot;headerlink&quot; title=&quot;测试好压压缩命令&quot;&gt;&lt;/a&gt;测试好压压缩命令&lt;/h5&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HaoZipC a -tzip 压缩文件名称.zip 需要压缩的目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;编写exp脚本&quot;&gt;&lt;a href=&quot;#编写exp脚本&quot; class=&quot;headerlink&quot; title=&quot;编写exp脚本&quot;&gt;&lt;/a&gt;编写exp脚本&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;配置目录H:&#92;数据库备份&#92;228数据库备份、H:&#92;数据库备份&#92;159数据库备份&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/categories/oracle/"/>
    
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oracle11g数据库使用expdp每周进行数据备份并上传到备份服务器</title>
    <link href="https://github.com/jiangjiawei520/post/fc083848.html"/>
    <id>https://github.com/jiangjiawei520/post/fc083848.html</id>
    <published>2024-04-10T10:47:01.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-看看数据库情况"><a href="#1-看看数据库情况" class="headerlink" title="1.看看数据库情况"></a>1.看看数据库情况</h2><h3 id="1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到"><a href="#1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到" class="headerlink" title="1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到"></a>1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到</h3><p>​查看所有表空间及使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">　　B.FILE_NAME 物理文件名,</span><br><span class="line">　　B.TABLESPACE_NAME 表空间名称,</span><br><span class="line">　　B.BYTES/1024/1024 大小M,</span><br><span class="line">　　(B.BYTES-SUM(NVL(A.BYTES,0)))/1024/1024 已使用M,</span><br><span class="line">　　SUBSTR((B.BYTES-SUM(NVL(A.BYTES,0)))/(B.BYTES)*100,1,5) 使用率</span><br><span class="line">FROM DBA_FREE_SPACE A,DBA_DATA_FILES B</span><br><span class="line">WHERE A.FILE_ID=B.FILE_ID</span><br><span class="line">GROUP BY B.TABLESPACE_NAME,B.FILE_NAME,B.BYTES</span><br><span class="line">ORDER BY B.TABLESPACE_NAME;</span><br></pre></td></tr></table></figure><p><img src="/imgs/2022062810410290.jpg"></p><h2 id="2-数据库备份"><a href="#2-数据库备份" class="headerlink" title="2.数据库备份"></a>2.数据库备份</h2><h3 id="2-1登陆数据库"><a href="#2-1登陆数据库" class="headerlink" title="2.1登陆数据库"></a>2.1登陆数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@]$ sqlplus / as sysdba</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2-2创建逻辑目录"><a href="#2-2创建逻辑目录" class="headerlink" title="2.2创建逻辑目录"></a>2.2创建逻辑目录</h3><p>执行这个操作并不会在Linux中创建&#x2F;opt&#x2F;data_backup这个文件，最后需要手动去创建该文件才能进行备份。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; create directory back_dir as &#x27;/opt/backup&#x27;</span><br><span class="line">SQL&gt; select * from dba_directories; #查看所有逻辑目录,看是否创建成功</span><br></pre></td></tr></table></figure><h3 id="2-3给数据库用户文件操作权限-dbuser为数据库用户名，更具实际情况更改"><a href="#2-3给数据库用户文件操作权限-dbuser为数据库用户名，更具实际情况更改" class="headerlink" title="2.3给数据库用户文件操作权限#dbuser为数据库用户名，更具实际情况更改"></a>2.3给数据库用户文件操作权限#dbuser为数据库用户名，更具实际情况更改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grant read,write on directory back_dir to dbuser;</span><br></pre></td></tr></table></figure><h3 id="2-3创建物理目录"><a href="#2-3创建物理目录" class="headerlink" title="2.3创建物理目录"></a>2.3创建物理目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@]$ mkdir -p /opt/backup #-p 确保目录名称存在，不存在的就建一个，可使用参数创建多级目录</span><br></pre></td></tr></table></figure><h3 id="2-4备份数据库"><a href="#2-4备份数据库" class="headerlink" title="2.4备份数据库"></a>2.4备份数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@]$ expdp dbuser/passwd@192.168.110.9:1521/orcl dumpfile=dbback.dmp log=log.log directory=back_dir schemas=cbyxy</span><br></pre></td></tr></table></figure><p>exedp有很多参数，这里是用到的一些解释<br>dbuser&#x2F;<a href="mailto:&#112;&#97;&#115;&#115;&#119;&#x64;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#x2e;&#x31;&#x31;&#x30;&#x2e;&#57;">&#112;&#97;&#115;&#115;&#119;&#x64;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#x2e;&#x31;&#x31;&#x30;&#x2e;&#57;</a>:1521&#x2F;orcl #导出用户名&#x2F;密码@数据库IP&#x2F;数据库SID<br>dumpfile&#x3D;导出的文件名.dmp<br>log&#x3D;导出过程的日志名.log<br>directory&#x3D;备份放的路径名,用的之前的逻辑目录名<br>schemas&#x3D;要备份的数据库用户名字<br>FULL&#x3D;y #加上意思为导出整个数据库就不需要schemas参数了<br>也可以按表空间导出TABLESPACES&#x3D;<br>表名导出TABLES&#x3D;<br>等等还有很多参数自行了解</p><h2 id="3-shell脚本实现自动备份"><a href="#3-shell脚本实现自动备份" class="headerlink" title="3.shell脚本实现自动备份"></a>3.shell脚本实现自动备份</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#导入环境变量，根据具自己实际情况填写</span><br><span class="line">export ORACLE_BASE=/home/oracle/app</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/oracle/product/11.2.0/dbhome_1</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br><span class="line">export LOCAL_IP=192.168.110.183:1521</span><br><span class="line">export BACKUP_USER_IP_DIR=root@192.168.110.187:/opt/   #备份服务器的用户，ip，保存地址</span><br><span class="line">export ORACLE_USER_NAME=system #数据库的用户密码根据实际情况填写，备份整个库最好使用system或sys管理员用户</span><br><span class="line">export ORACLE_USER_PASSWD=Abc123556..</span><br><span class="line">export ORACLE_SID=orcl #不知道可以使用Oracle用户执行echo $ORACLE_SID，或者SQL&gt; SELECT instance_name FROM v$instance</span><br><span class="line">export DATA_DIR=/opt/backup   #与数据库中的逻辑地址相同,用来储存备份文件</span><br><span class="line">export DELTIME=`date -d &quot;7 days ago&quot; +%Y%m%d` # -d &quot;7 days ago&quot; 为获取七天前的日期,以日期命名方便任务自动删&gt;除</span><br><span class="line">export BAKUPTIME=`date +%Y%m%d` #备份日期年月日</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK #定义语言地域和字符集属性的环境变量，根据自己数据库情况修改</span><br><span class="line">mkdir -p $DATA_DIR</span><br><span class="line">echo &quot;Starting bakup...&quot;</span><br><span class="line">echo &quot;Backup file path $DATA_DIR/$BAKUPTIME.dmp&quot;</span><br><span class="line">expdp $ORACLE_USER_NAME/$ORACLE_USER_PASSWD@$LOCAL_IP/$ORACLE_SID dumpfile=$BAKUPTIME.dmp log=$BAKUPTIME.log directory=expdp full=y</span><br><span class="line">echo &quot;backup file success...&quot;</span><br><span class="line">tar -zcvPf $DATA_DIR/$BAKUPTIME.tar.gz $DATA_DIR/$BAKUPTIME.dmp --remove-files ##-P：指定绝对路径 --remove-files :打包后删除原文件</span><br><span class="line">echo &quot;tar the file backup successfully&quot;</span><br><span class="line">echo &quot;scp to&quot;:$BACKUP_IP</span><br><span class="line">scp $DATA_DIR/$BAKUPTIME.tar.gz $BACKUP_USER_IP_DIR #远程服务器防火墙有限制scp端口需要加：-P 端口号</span><br><span class="line">rm -f $DATA_DIR/$DELTIME.log #删除之前的备份</span><br><span class="line">echo &quot;Bakup completed.&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/2022062810410391.png"></p><h2 id="4-添加定时任务"><a href="#4-添加定时任务" class="headerlink" title="4.添加定时任务"></a>4.添加定时任务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ ]$ crontab -e</span><br></pre></td></tr></table></figure><p>添加行：</p><p>* 1 * * 6 &#x2F;opt&#x2F;back.sh #每个星期的星期六早上执行备份任务</p><p>0 0 1 * * &#x2F;opt&#x2F;back.sh #每个月的1号凌晨12点执行备份任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure><h2 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5.参考文章"></a>5.参考文章</h2><p><a href="https://www.cnblogs.com/xwdreamer/p/3511047.html">https://www.cnblogs.com/xwdreamer/p/3511047.html</a><br><a href="https://www.cnblogs.com/farmer-y/p/5888432.html">https://www.cnblogs.com/farmer-y/p/5888432.html</a><br><a href="https://blog.csdn.net/weixin_41607523/article/details/110817646">https://blog.csdn.net/weixin_41607523&#x2F;article&#x2F;details&#x2F;110817646</a><br><a href="https://blog.csdn.net/XUEYUTIANQI/article/details/113976558">https://blog.csdn.net/XUEYUTIANQI/article/details/113976558</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-看看数据库情况&quot;&gt;&lt;a href=&quot;#1-看看数据库情况&quot; class=&quot;headerlink&quot; title=&quot;1.看看数据库情况&quot;&gt;&lt;/a&gt;1.看看数据库情况&lt;/h2&gt;&lt;h3 id=&quot;1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&quot;&gt;&lt;a href=&quot;#1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&quot; class=&quot;headerlink&quot; title=&quot;1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&quot;&gt;&lt;/a&gt;1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&lt;/h3&gt;&lt;p&gt;​	查看所有表空间及使用情况&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　B.FILE_NAME 物理文件名,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　B.TABLESPACE_NAME 表空间名称,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　B.BYTES/1024/1024 大小M,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　(B.BYTES-SUM(NVL(A.BYTES,0)))/1024/1024 已使用M,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　SUBSTR((B.BYTES-SUM(NVL(A.BYTES,0)))/(B.BYTES)*100,1,5) 使用率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM DBA_FREE_SPACE A,DBA_DATA_FILES B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WHERE A.FILE_ID=B.FILE_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GROUP BY B.TABLESPACE_NAME,B.FILE_NAME,B.BYTES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ORDER BY B.TABLESPACE_NAME;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/2022062810410290.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-数据库备份&quot;&gt;&lt;a href=&quot;#2-数据库备份&quot; class=&quot;headerlink&quot; title=&quot;2.数据库备份&quot;&gt;&lt;/a&gt;2.数据库备份&lt;/h2&gt;&lt;h3 id=&quot;2-1登陆数据库&quot;&gt;&lt;a href=&quot;#2-1登陆数据库&quot; class=&quot;headerlink&quot; title=&quot;2.1登陆数据库&quot;&gt;&lt;/a&gt;2.1登陆数据库&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@]$ sqlplus / as sysdba&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/categories/linux/oracle/"/>
    
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>vscode常用配置</title>
    <link href="https://github.com/jiangjiawei520/post/3ce06b7a.html"/>
    <id>https://github.com/jiangjiawei520/post/3ce06b7a.html</id>
    <published>2024-04-08T15:57:15.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode中如何将cmd设置为默认终端"><a href="#vscode中如何将cmd设置为默认终端" class="headerlink" title="vscode中如何将cmd设置为默认终端"></a>vscode中如何将cmd设置为默认终端</h2><p>vscode中如何将cmd设置为默认终端？下面本篇文章给大家介绍一下vscode中设置默认终端为cmdPowerShelWSL等的方法，希望对需要的朋友有所协助！</p><p>一、快捷键（Ctrl+Shift+P打开命令面板，输入select选择“Select Default Profile”</p><p>二、然后选择目标“Git Bash”</p><p>三、快捷键（ctrl+&#96;）调出终端，如图所示已经默认cmd</p><span id="more"></span><h2 id="查看文件的本地保存历史"><a href="#查看文件的本地保存历史" class="headerlink" title="查看文件的本地保存历史"></a>查看文件的本地保存历史</h2><p><strong>扩展中安装Local History插件</strong><br><img src="/imgs/729f0ab852694e9f834f68d12be3b124.png" alt="在这里插入图片描述"></p><p>2.<strong>打开资源管理器</strong>，可以看到一个LOCAL HISTORY<a href="https://so.csdn.net/so/search?q=%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8&spm=1001.2101.3001.7020">下拉列表</a>，直接点击某个文件，下面就可以显示你每次对该文件进行修改后保存的时间线，点击某个时间线就可以查看修改的内容，会与未修改的进行比较。<br><img src="/imgs/ffaa484cb3754189a1dafdb5aa9d3502.png" alt="在这里插入图片描述"><img src="/imgs/4ed65ff256b1463d84e64dc7411835aa.png" alt="img"></p><h2 id="VSCode-工作区"><a href="#VSCode-工作区" class="headerlink" title="VSCode 工作区"></a>VSCode 工作区</h2><h3 id="VSCode-创建工作区的的好处有以下几点"><a href="#VSCode-创建工作区的的好处有以下几点" class="headerlink" title="VSCode 创建工作区的的好处有以下几点"></a>VSCode 创建工作区的的好处有以下几点</h3><p>项目结构清晰：每个工作区都有自己的文件夹结构，可以更好地组织和管理项目文件。<br>版本控制：VSCode 支持多种版本控制系统，如Git，可以在工作区内进行代码的版本管理。<br>插件扩展：VSCode 提供了丰富的插件市场，可以根据项目需求安装不同的插件，提高工作效率。<br>多语言支持：VSCode 支持多种编程语言，可以为不同语言的项目创建不同的工作区。<br>跨平台：VSCode 支持Windows、macOS和Linux等操作系统，可以在不同平台上使用相同的工作区设置。</p><h3 id="如何建立工作区"><a href="#如何建立工作区" class="headerlink" title="如何建立工作区"></a>如何建立工作区</h3><p>1.点击文件 - 将文件夹添加到工作区，选择你需要打开的文件夹，也就是项目根目录，添加。<br>2.此时，在资源管理器中你能看到文件夹在一个无标题的工作区下面，接下来重复第1步的操作，依次将你其他项目文件夹添加到工作区<br>3.添加完需要放入工作区的项目文件夹之后，点击文件-将工作区另存为…<br>4.选择你想要保存工作区的文件夹，并且给工作区命名，比如我是命名‘project’，这个文件的后缀名是 “*.code-workspace”<br>5.点击保存之后，VS Code 就会在 workarea这个文件夹下创建一个 project.code-workspace 文件<br>6.至此，工作区建立完成，可以看到工作区的名字已经变成刚才的命名。如果想切换终端，可以使用快捷键ctrl+shift+&#96; 来切换</p><h3 id="编辑工作区设置"><a href="#编辑工作区设置" class="headerlink" title="编辑工作区设置"></a>编辑工作区设置</h3><p>在打开工作区之后，你会看到左侧的资源管理器中列出了工作区中包含的所有文件和文件夹。右键点击工作区中的任意文件或文件夹，然后选择“在资源管理器中显示（Reveal in Explorer）”。</p><p>在资源管理器中显示文件或文件夹后，你会看到右侧打开了一个名为 “xxx.code-workspace” 的文件，其中 “xxx” 是工作区的名称。双击打开这个文件。</p><h3 id="修改工作区名称"><a href="#修改工作区名称" class="headerlink" title="修改工作区名称"></a>修改工作区名称</h3><p>在编辑器中打开的 “xxx.code-workspace” 文件中，你可以看到一个 JSON 格式的文本内容。找到并修改以下部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;folders&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;: &quot;.&quot;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;settings&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 “Old Workspace Name” 修改为你想要的新名称。例如，将其修改为 “New Workspace Name”。</p><p>然后保存 “xxx.code-workspace” 文件。</p><h2 id="设置过滤某类型的文件"><a href="#设置过滤某类型的文件" class="headerlink" title="设置过滤某类型的文件"></a>设置过滤某类型的文件</h2><p>配置搜索功能，以指定忽略某些文件夹：</p><p>​如在 <code>.vscode</code> 文件夹中的 <code>settings.json</code> 文件中设置特定的过滤规则来排除 <code>.md</code> 文件，可以针对某些特定功能（如搜索）设置排除模式。例如，对于搜索功能，你可以在 <code>settings.json</code> 中设置 <code>search.exclude</code> 选项来排除 <code>.md</code> 文件。这会影响 VSCode 的文件搜索功能，但不会影响其他功能（如文件浏览器或 Git 更改视图）。</p><h3 id="打开Visual-Studio-Code"><a href="#打开Visual-Studio-Code" class="headerlink" title="打开Visual Studio Code"></a>打开Visual Studio Code</h3><p>首先，确保您已经打开了Visual Studio Code并加载了您的项目。</p><h3 id="创建-vscode文件夹"><a href="#创建-vscode文件夹" class="headerlink" title="创建.vscode文件夹"></a>创建.vscode文件夹</h3><p>要配置搜索设置，您需要在项目根目录中创建一个名为.vscode的文件夹（如果尚未存在）。可以使用以下命令在终端中创建它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .vscode</span><br></pre></td></tr></table></figure><h3 id="创建settings-json文件"><a href="#创建settings-json文件" class="headerlink" title="创建settings.json文件"></a>创建settings.json文件</h3><p>在.vscode文件夹中，您需要创建一个名为settings.json的文件，这是用于配置Visual Studio Code的设置的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .vscode/settings.json</span><br></pre></td></tr></table></figure><h3 id="配置搜索排除规则"><a href="#配置搜索排除规则" class="headerlink" title="配置搜索排除规则"></a>配置搜索排除规则</h3><p>现在，编辑settings.json文件以配置搜索排除规则。您可以使用以下JSON格式的示例进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;search.exclude&quot;: &#123;</span><br><span class="line">    &quot;**/node_modules&quot;: true,</span><br><span class="line">    &quot;**/build&quot;: true,</span><br><span class="line">    &quot;**/dist&quot;: true,</span><br><span class="line">    &quot;**/.git&quot;: true,</span><br><span class="line">    &quot;**/.vscode&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例中，我们配置了五个排除规则：</p><p>“**&#x2F;node_modules”: true - 这将排除项目中的node_modules文件夹，通常包含依赖库。</p><p>“**&#x2F;build”: true - 这将排除build文件夹，如果您的项目使用构建工具生成构建文件，可以排除它。</p><p>“**&#x2F;dist”: true - 这将排除dist文件夹，如果您的项目包含编译后的分发文件，可以排除它。</p><p>“**&#x2F;.git”: true - 这将排除.git文件夹，以防止搜索Git版本控制文件。</p><p>“**&#x2F;.vscode”: true - 这将排除.vscode文件夹，以防止搜索Visual Studio Code配置文件。<br>根据您的项目结构，您可以添加或修改这些规则以满足自己的需求。这些规则使用Glob模式匹配文件夹，true表示要排除它们。</p><h3 id="保存设置"><a href="#保存设置" class="headerlink" title="保存设置"></a>保存设置</h3><p>一旦您完成了搜索排除规则的配置，保存settings.json文件。</p><h3 id="使用搜索功能"><a href="#使用搜索功能" class="headerlink" title="使用搜索功能"></a>使用搜索功能</h3><p>现在，您可以在Visual Studio Code中使用搜索功能，而不会搜索被排除的文件夹中的内容。只有未在排除规则中指定的文件夹中的内容才会包含在搜索结果中。示例：</p><p>假设您有一个Node.js项目，项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">my-project/</span><br><span class="line">  ├── src/</span><br><span class="line">  │    ├── app.js</span><br><span class="line">  │    └── utils.js</span><br><span class="line">  ├── node_modules/</span><br><span class="line">  │    ├── module1/</span><br><span class="line">  │    └── module2/</span><br><span class="line">  ├── build/</span><br><span class="line">  │    └── bundle.js</span><br><span class="line">  ├── dist/</span><br><span class="line">  │    └── main.js</span><br><span class="line">  ├── .git/</span><br><span class="line">  ├── .vscode/</span><br><span class="line">  └── package.json</span><br></pre></td></tr></table></figure><p>​备注：项目需要设置过滤.vscode文件</p><h2 id="vscode中如何将cmd设置为默认终端-1"><a href="#vscode中如何将cmd设置为默认终端-1" class="headerlink" title="vscode中如何将cmd设置为默认终端"></a>vscode中如何将cmd设置为默认终端</h2><p>vscode中如何将cmd设置为默认终端？下面本篇文章给大家介绍一下vscode中设置默认终端为cmdPowerShelWSL等的方法，希望对需要的朋友有所协助！</p><p>一、快捷键（Ctrl+Shift+P打开命令面板，输入select选择“Select Default Profile”</p><p>二、然后选择目标“Git Bash”</p><p>三、快捷键（ctrl+&#96;）调出终端，如图所示已经默认cmd</p><h2 id="查看文件的本地保存历史-1"><a href="#查看文件的本地保存历史-1" class="headerlink" title="查看文件的本地保存历史"></a>查看文件的本地保存历史</h2><p><strong>扩展中安装Local History插件</strong><br><img src="/imgs/729f0ab852694e9f834f68d12be3b124.png" alt="在这里插入图片描述"></p><p>2.<strong>打开资源管理器</strong>，可以看到一个LOCAL HISTORY<a href="https://so.csdn.net/so/search?q=%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8&spm=1001.2101.3001.7020">下拉列表</a>，直接点击某个文件，下面就可以显示你每次对该文件进行修改后保存的时间线，点击某个时间线就可以查看修改的内容，会与未修改的进行比较。<br><img src="/imgs/ffaa484cb3754189a1dafdb5aa9d3502.png" alt="在这里插入图片描述"><img src="/imgs/4ed65ff256b1463d84e64dc7411835aa.png" alt="img"></p><h2 id="在-Windows-上使用-VS-Code-指定-Python-版本"><a href="#在-Windows-上使用-VS-Code-指定-Python-版本" class="headerlink" title="在 Windows 上使用 VS Code 指定 Python 版本"></a>在 Windows 上使用 VS Code 指定 Python 版本</h2><p>概述<br>在使用 Visual Studio Code（VS Code）进行 Python 开发时，有时我们需要指定使用特定的 Python 版本。本文将详细介绍在 Windows 上使用 VS Code 指定 Python 版本的步骤和代码示例。</p><p>步骤概览<br>以下表格展示了在 Windows 上使用 VS Code 指定 Python 版本的步骤：</p><p>步骤描述<br>步骤 1安装所需的 Python 版本<br>步骤 2在 VS Code 中安装 Python 扩展<br>步骤 3配置 VS Code 使用指定的 Python 版本<br>接下来，我们将详细说明每一步需要做什么。</p><p>步骤详细说明<br>步骤 1：安装所需的 Python 版本<br>首先，确保你已经安装了需要使用的 Python 版本。你可以从 Python 官方网站</p><p>步骤 2：在 VS Code 中安装 Python 扩展<br>在 VS Code 中，我们需要安装 Python 扩展以获得对 Python 开发的支持。按下 Ctrl + Shift + X 打开扩展面板，搜索并安装名为 “Python” 的扩展。</p><p>步骤 3：配置 VS Code 使用指定的 Python 版本<br>完成以上步骤后，我们需要配置 VS Code 使用我们所安装的特定 Python 版本。</p><p>打开 VS Code 的设置，可以通过 文件 &gt; 首选项 &gt; 设置 或按下 Ctrl + , 快捷键打开。</p><p>在设置中搜索 “Python: Python Path”，找到该设置项。</p><p>点击 “编辑 in settings.json” 链接，在右侧的 JSON 配置文件中添加以下代码：</p><p>“python.pythonPath”: “path&#x2F;to&#x2F;python.exe”<br>1.<br>将 path&#x2F;to&#x2F;python.exe 替换为你安装的 Python 版本的路径。例如，如果你安装的是 Python 3.9 版本，并将其安装在 C:\Python39\python.exe，则代码应为：</p><p>“python.pythonPath”: “C:\Python39\python.exe”<br>1.<br>保存配置文件并关闭。</p><p>现在，你已成功配置了 VS Code 使用指定的 Python 版本。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vscode中如何将cmd设置为默认终端&quot;&gt;&lt;a href=&quot;#vscode中如何将cmd设置为默认终端&quot; class=&quot;headerlink&quot; title=&quot;vscode中如何将cmd设置为默认终端&quot;&gt;&lt;/a&gt;vscode中如何将cmd设置为默认终端&lt;/h2&gt;&lt;p&gt;vscode中如何将cmd设置为默认终端？下面本篇文章给大家介绍一下vscode中设置默认终端为cmdPowerShelWSL等的方法，希望对需要的朋友有所协助！&lt;/p&gt;
&lt;p&gt;一、快捷键（Ctrl+Shift+P打开命令面板，输入select选择“Select Default Profile”&lt;/p&gt;
&lt;p&gt;二、然后选择目标“Git Bash”&lt;/p&gt;
&lt;p&gt;三、快捷键（ctrl+&amp;#96;）调出终端，如图所示已经默认cmd&lt;/p&gt;</summary>
    
    
    
    <category term="vscode" scheme="https://github.com/jiangjiawei520/categories/vscode/"/>
    
    
    <category term="vscode" scheme="https://github.com/jiangjiawei520/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>linux中unzip解压文件中文乱码问题的解决方案</title>
    <link href="https://github.com/jiangjiawei520/post/67e26b88.html"/>
    <id>https://github.com/jiangjiawei520/post/67e26b88.html</id>
    <published>2024-04-08T15:54:33.000Z</published>
    <updated>2024-06-03T10:27:48.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在windows上压缩的文件，是以系统默认编码中文来压缩文件。由于zip文件中没有声明其编码，所以linux上的unzip一般以默认编码解压，中文文件名会出现乱码。<br>虽然2005年就有人把这报告为bug, 但是info-zip的官方网站没有把自动识别编码列入计划，可能他们不认为这是个问题。Sun对java中存在N年的zip编码问题，采用了同样的处理方式。</p><h3 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h3><p>第一种：通过unzip行命令解压，指定字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -O GBK xxx.zip (用GBK, GB18030也可以)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;在windows上压缩的文件，是以系统默认编码中文来压缩文件。由于zip文件中没有声明其编码，所以linux上的unzip一般以默认编码解压</summary>
      
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/tags/linux/"/>
    
  </entry>
  
</feed>
