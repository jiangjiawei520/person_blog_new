<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒋家威的博客</title>
  
  
  <link href="https://github.com/jiangjiawei520/atom.xml" rel="self"/>
  
  <link href="https://github.com/jiangjiawei520/"/>
  <updated>2024-04-25T08:47:13.406Z</updated>
  <id>https://github.com/jiangjiawei520/</id>
  
  <author>
    <name>JiaWei Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python之列表、元组、字典、字符串和集合的区别与联系</title>
    <link href="https://github.com/jiangjiawei520/post/32391538.html"/>
    <id>https://github.com/jiangjiawei520/post/32391538.html</id>
    <published>2024-04-25T16:17:21.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python容器定义"><a href="#Python容器定义" class="headerlink" title="Python容器定义"></a>Python容器定义</h2><p>容器：用来存储和组织其他对象的对象。容器里面可以放很多东西，这些东西可以是字符串，可以是整数，可以是自定义类型，然后把这些东西有组织的存放在内存中<br>Python容器：列表(list)，元组(tuple)，集合(set)，字典(dict)，队列(queue)等</p><h2 id="区别与联系概括-★★★★★"><a href="#区别与联系概括-★★★★★" class="headerlink" title="区别与联系概括 ★★★★★"></a>区别与联系概括 ★★★★★</h2><table><thead><tr><th>数据类型</th><th>列表 (list)</th><th>元组 (tuple)</th><th>集合 (set)</th><th>字典 (dictionary)</th><th></th></tr></thead><tbody><tr><td>表示</td><td><code>[]</code></td><td><code>()</code></td><td><code>()</code></td><td><code>&#123;&#125;</code></td><td></td></tr><tr><td>举例</td><td>a_list &#x3D; [1, True, ‘aa’]</td><td>a_tuple &#x3D; (1, True, ‘aa’)； t2 &#x3D; (1<code>,</code>)</td><td>a_set &#x3D; {1, True, ‘aa’}; s &#x3D; set( [1, True, ‘aa’])</td><td>a_dict &#x3D; {‘name’: ‘xuan’, ‘age’: 21}</td><td></td></tr><tr><td>是否有序</td><td>有序</td><td>有序</td><td><code>无序</code></td><td><code>无序</code></td><td></td></tr><tr><td>是否读写</td><td>读写</td><td><code>只读</code></td><td>读写</td><td>读写</td><td></td></tr><tr><td>空定义</td><td>a_list &#x3D; []</td><td>a_tuple &#x3D; ()</td><td>a_set &#x3D; set(); not_sure &#x3D; {}空字典</td><td>a_dict &#x3D; {}</td><td></td></tr><tr><td>元素可修改</td><td>a_list[0] &#x3D; 23</td><td><code>否</code></td><td><code>否</code></td><td>a_dict[‘age’] &#x3D; 30</td><td></td></tr><tr><td>下标访问</td><td>a_list[0] &#x3D; 23</td><td>a_tuple[0]</td><td><code>否</code></td><td>a_dict[‘age’] &#x3D; 30</td><td></td></tr><tr><td>添加元素</td><td><strong>+、append、extend、insert</strong></td><td><code>不可添加</code></td><td><strong>add、update</strong></td><td>a_dict[‘new_key’] &#x3D; ‘value’</td><td></td></tr><tr><td>删除元素</td><td><strong>del、remove、pop()、pop(1)、clear</strong></td><td><code>不可删除</code></td><td><strong>discard、remove、pop、clear</strong></td><td><strong>pop、popitem、clear</strong></td><td></td></tr><tr><td>元素查找</td><td><strong>index、count、in</strong></td><td><strong>in</strong></td><td><strong>in</strong></td><td>a_dict[‘key’]</td><td></td></tr><tr><td>布尔真值</td><td>非空</td><td>非空</td><td>非空</td><td>非空</td><td></td></tr><tr><td>定义</td><td>列表(list)是有序的集合，可以存放不同数据类型的数据，并且list中的每个元素的都对应着一个索引来标记其位置，且索引从0开始。</td><td>tuple与list类似，不同之处在于tuple中的元素不能进行修改。而且tuple使用小括号，list使用方括号。</td><td>dic字典是另一种可变的容器模型，且可存储任意类型对象。字典的每个键值(key:value)对用冒号(<code>:</code>)分割，每个对之间用逗号(,)分割，整个字典包括在花括号{}中</td><td>set()函数是创建一个无序不重复元素集，可添加，删除数据，还可以计算交集、差集、并集等。<br/>python 的集合类型和 其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.集合对象还支持union(联合), intersection(交), difference(差)和sysmmetricdifference(对称差集)等数学运算,和我们初中数学学的集合的非常的相似。</td><td></td></tr></tbody></table><span id="more"></span><h2 id="全方位分析-★★★☆☆"><a href="#全方位分析-★★★☆☆" class="headerlink" title="全方位分析 ★★★☆☆"></a>全方位分析 ★★★☆☆</h2><table><thead><tr><th>数据结构</th><th>表示</th><th>分析</th></tr></thead><tbody><tr><td><strong>列表list</strong></td><td>[]</td><td>列表list，用中括号“[ ]”表示<br/>1.任意对象的有序集合<br/>列表是一组任意类型的值，按照一定顺序组合而成的<br/>2.通过偏移读取<br/>组成列表的值叫做元素(Elements)。每一个元素被标识一个索引，第一个索引是0，序列的功能都能实现<br/>3.可变长度，异构以及任意嵌套<br/>列表中的元素可以是任意类型，甚至是列表类型，也就是说列表可以嵌套<br/>4.可变的序列<br/>支持索引、切片、合并、删除等等操作，它们都是在原处进行修改列表<br/>5.对象引用数组<br/>列表可以当成普通的数组，每当用到引用时，Python总是会将这个引用指向一个对象，所以程序只需处理对象的操作。当把一个对象赋给一个数据结构元素或变量名时，Python总是会存储对象的引用，而不是对象的一个拷贝</td></tr><tr><td><strong>元组tuple</strong></td><td>()</td><td>1.任意对象的有序集合<br/>与列表相同<br/>2.通过偏移存取<br/>与列表相同<br/>3.属于不可变序列类型<br/>类似于字符串，但元组是不可变的，不支持在列表中任何原处修改操作，不支持任何方法调用<br/>4.固定长度、异构、任意嵌套<br/>固定长度即元组不可变，在不被拷贝的情况下长度固定，其他同列表<br/>5.对象引用的数组<br/>与列表相似，元组是对象引用的数组&gt;<br/><br/>tuple和list相比<br/>1.比列表操作速度快<br/>2.对数据“写保护“<br/>3.可用于字符串格式化中<br/>4.可作为字典的key<br/></td></tr><tr><td><strong>字典dic</strong></td><td>{}</td><td>1.通过键而不是偏移量来读取<br/>字典就是一个关联数组，是一个通过关键字索引的对象的集合，使用键-值（key-value）进行存储，查找速度快<br/><br/>2.任意对象的无序集合<br/>字典中的项没有特定顺序，以“键”为象征<br/><br/>3.可变长、异构、任意嵌套<br/>同列表，嵌套可以包含列表和其他的字典等<br/><br/>4.属于可变映射类型<br/>因为是无序，故不能进行序列操作，但可以在远处修改，通过键映射到值。字典是唯一内置的映射类型（键映射到值的对象）<br/><br/>5.对象引用表<br/>字典存储的是对象引用，不是拷贝，和列表一样。字典的key是不能变的，list不能作为key，字符串、元组、整数等都可以<br/><br/>dic和list比较，dict有以下几个特点:<br/>1.查找和插入的速度极快，不会随着key的增加而增加<br/>2.需要占用大量的内存，内存浪费多<br/>而list相反：<br/>1.查找和插入的时间随着元素的增加而增加<br/>2.占用空间小，浪费内存很少<br/>所以，dict是用空间来换取时间的一种方法<br/></td></tr><tr><td><strong>集合</strong></td><td>()</td><td>1.是一组key的集合，但不存储value，并且key不能重复<br/><br/>创建一个set，需要提供一个list作为输入集合,s &#x3D; set([1,2,3]),注意，传入的参数 [1, 2, 3] 是一个list，而显示的 set([1, 2, 3]) 只是告诉你这个set内部有1，2，3这3个元素，显示的[ ]不表示这是一个list<br/><br/>2.重复元素在set中自动被过滤<br/><br/>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作<br/>还有一种集合是forzenset( )，是冻结的集合，它是不可变的，存在哈希值，好处是它可以作为字典的key，也可以作为其它集合的元素。缺点是一旦创建便不能更改，没有add，remove方法<br/><br/>3. set和dict对比<br/><br/>1.set和dict的唯一区别仅在于没有存储对应的value<br/>2.set的原理和dict一样，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”&lt;br&#x2F;</td></tr></tbody></table><h2 id="相互PK-★★☆☆☆"><a href="#相互PK-★★☆☆☆" class="headerlink" title="相互PK ★★☆☆☆"></a>相互PK ★★☆☆☆</h2><table><thead><tr><th>比较</th><th>详情</th></tr></thead><tbody><tr><td><strong>字典dict和列表list的比较</strong></td><td>dict的查找和插入的速度极快，不会随着key的增加而变慢。但是需要占用大量的内存，内存浪费多。相反，list查找和插入的时间随着元素的增加而增加。但是占用空间小，浪费内存很少。</td></tr><tr><td><strong>字典dict和集合set比较</strong></td><td>唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</td></tr><tr><td><strong>元组tuple与列表list比较</strong></td><td>tuple与list类似，不同之处在于tuple中的元素不能进行修改。而且tuple使用小括号，list使用方括号。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Python容器定义&quot;&gt;&lt;a href=&quot;#Python容器定义&quot; class=&quot;headerlink&quot; title=&quot;Python容器定义&quot;&gt;&lt;/a&gt;Python容器定义&lt;/h2&gt;&lt;p&gt;容器：用来存储和组织其他对象的对象。容器里面可以放很多东西，这些东西可以是字符串，可以是整数，可以是自定义类型，然后把这些东西有组织的存放在内存中&lt;br&gt;Python容器：列表(list)，元组(tuple)，集合(set)，字典(dict)，队列(queue)等&lt;/p&gt;
&lt;h2 id=&quot;区别与联系概括-★★★★★&quot;&gt;&lt;a href=&quot;#区别与联系概括-★★★★★&quot; class=&quot;headerlink&quot; title=&quot;区别与联系概括 ★★★★★&quot;&gt;&lt;/a&gt;区别与联系概括 ★★★★★&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;列表 (list)&lt;/th&gt;
&lt;th&gt;元组 (tuple)&lt;/th&gt;
&lt;th&gt;集合 (set)&lt;/th&gt;
&lt;th&gt;字典 (dictionary)&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;表示&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;举例&lt;/td&gt;
&lt;td&gt;a_list &amp;#x3D; [1, True, ‘aa’]&lt;/td&gt;
&lt;td&gt;a_tuple &amp;#x3D; (1, True, ‘aa’)； t2 &amp;#x3D; (1&lt;code&gt;,&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;a_set &amp;#x3D; {1, True, ‘aa’}; s &amp;#x3D; set( [1, True, ‘aa’])&lt;/td&gt;
&lt;td&gt;a_dict &amp;#x3D; {‘name’: ‘xuan’, ‘age’: 21}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否有序&lt;/td&gt;
&lt;td&gt;有序&lt;/td&gt;
&lt;td&gt;有序&lt;/td&gt;
&lt;td&gt;&lt;code&gt;无序&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;无序&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否读写&lt;/td&gt;
&lt;td&gt;读写&lt;/td&gt;
&lt;td&gt;&lt;code&gt;只读&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读写&lt;/td&gt;
&lt;td&gt;读写&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空定义&lt;/td&gt;
&lt;td&gt;a_list &amp;#x3D; []&lt;/td&gt;
&lt;td&gt;a_tuple &amp;#x3D; ()&lt;/td&gt;
&lt;td&gt;a_set &amp;#x3D; set(); not_sure &amp;#x3D; {}空字典&lt;/td&gt;
&lt;td&gt;a_dict &amp;#x3D; {}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;元素可修改&lt;/td&gt;
&lt;td&gt;a_list[0] &amp;#x3D; 23&lt;/td&gt;
&lt;td&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘age’] &amp;#x3D; 30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;下标访问&lt;/td&gt;
&lt;td&gt;a_list[0] &amp;#x3D; 23&lt;/td&gt;
&lt;td&gt;a_tuple[0]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘age’] &amp;#x3D; 30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;添加元素&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;+、append、extend、insert&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;不可添加&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;add、update&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘new_key’] &amp;#x3D; ‘value’&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除元素&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;del、remove、pop()、pop(1)、clear&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;不可删除&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;discard、remove、pop、clear&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;pop、popitem、clear&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;元素查找&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;index、count、in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a_dict[‘key’]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布尔真值&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;非空&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定义&lt;/td&gt;
&lt;td&gt;列表(list)是有序的集合，可以存放不同数据类型的数据，并且list中的每个元素的都对应着一个索引来标记其位置，且索引从0开始。&lt;/td&gt;
&lt;td&gt;tuple与list类似，不同之处在于tuple中的元素不能进行修改。而且tuple使用小括号，list使用方括号。&lt;/td&gt;
&lt;td&gt;dic字典是另一种可变的容器模型，且可存储任意类型对象。字典的每个键值(key:value)对用冒号(&lt;code&gt;:&lt;/code&gt;)分割，每个对之间用逗号(,)分割，整个字典包括在花括号{}中&lt;/td&gt;
&lt;td&gt;set()函数是创建一个无序不重复元素集，可添加，删除数据，还可以计算交集、差集、并集等。&lt;br/&gt;python 的集合类型和 其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.集合对象还支持union(联合), intersection(交), difference(差)和sysmmetricdifference(对称差集)等数学运算,和我们初中数学学的集合的非常的相似。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/categories/python/"/>
    
    
    <category term="python" scheme="https://github.com/jiangjiawei520/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>docker容器常用知识</title>
    <link href="https://github.com/jiangjiawei520/post/999a0a70.html"/>
    <id>https://github.com/jiangjiawei520/post/999a0a70.html</id>
    <published>2024-04-22T09:18:39.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a><strong>Docker 是什么？</strong></h2><p>​    1. Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架包括系统。</p><p>​    2. Docker 是基于Go语言实现的云开源项目，诞生于2013年初，最初是dotCloud公司发起。由镜像(Image)、容器(Container)、仓库(Repository) 三大核心组成。</p><pre><code>   3. Docker 通过对应用组件的封装、分发、部署、运行等生命周期的管理，达到应用组件级别的“一次封装，到处运行”。这里应用组件，即可以是Web应用，也可以是一套数据库服务，甚至是一个操作系统或编译器。</code></pre><h2 id="为什么要使用-Docker？"><a href="#为什么要使用-Docker？" class="headerlink" title="为什么要使用 Docker？"></a><strong>为什么要使用 Docker？</strong></h2><p>​    1. Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><p>​    2. 更快速的交付和部署(使用docker，开发人员可以用镜像来快速构建一套标准的开发环境;开发完成之后，测试和运维人员可以直接使用相同环境来部署代码)。</p><p>​    3. 响应式部署和扩展(docker容器几乎可以在任意平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。可以在不同的平台轻松地迁移应用)。</p><p>​    4. 更简单的更新管理(使用Dockerfile，只需要修改小小的配置，就可以替代以往大量的更新工作)。</p><p>​      与传统的虚拟机对比</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529075343772-1700042586.png"><img src="/imgs/1610676-20200529075343772-1700042586.png" alt="img"></a></p><span id="more"></span><h2 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a><strong>Docker 架构</strong></h2><h3 id="Docker-核心三要素"><a href="#Docker-核心三要素" class="headerlink" title="Docker 核心三要素"></a>Docker 核心三要素</h3><p>​      1. 镜像（Image）：用于创建 Docker 容器的模板，相当于一个 root 文件系统。镜像内部是一个精简的操作系统和应用运行所需要的文件以及所有依赖（镜像不包含内核，容器都是共享所在Docker主机的内核），比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p><p>​      2. 容器（Container）：容器是镜像的运行时实例，可以从单个镜像启动一个或多个容器。</p><p>​      3. 仓库（Repository）：用于存放镜像，可以理解为代码控制中的代码仓库。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529083236188-1322739337.png"><img src="/imgs/1610676-20200529083236188-1322739337.png" alt="img"></a></p><h3 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h3><p>​      1. Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>​      2. Docker 容器通过 Docker 镜像来创建。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529083636028-1758306848.png"><img src="/imgs/1610676-20200529083636028-1758306848.png" alt="img"></a></p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529084433346-1189779290.png"><img src="/imgs/1610676-20200529084433346-1189779290.png" alt="img"></a></p><h2 id="核心架构-1"><a href="#核心架构-1" class="headerlink" title="核心架构"></a>核心架构</h2><p>​      1. Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>​      2. Docker 容器通过 Docker 镜像来创建。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529083636028-1758306848.png"><img src="/imgs/1610676-20200529083636028-1758306848-1713748943826-13.png" alt="img"></a></p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529084433346-1189779290.png"><img src="/imgs/1610676-20200529084433346-1189779290-1713748943827-15.png" alt="img"></a></p><p>​    3. 运行原理</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529084735750-1592954389.png"><img src="/imgs/1610676-20200529084735750-1592954389.png" alt="img"></a></p><p>​      1. 命令行工具或CLI在被称为用户空间的内存中运行，就像是在操作系统上运行的其他程序。运行 Docker 可以认为是在用户空间运行着两个程序：一个是 Docker 守护进程，另一个是 DockerCLI，DockerCLI 是与用户交互的 Docker 程序。上图也显示了三个运行着的容器，每个都是以 Docker 守护程序的子进程运行，封装在容器中。在容器中运行的程序只能访问该容器内部的内存空间和资源（除非特别规定可以访问容器外部资源）。</p><p>​      2. Docker 可以执行、复制和轻松的分发容器，Docker 通过一种打包和分发的软件完成传统容器的封装，这个用来充当容器（Container）分发角色的组件被称为 镜像（Image）。</p><h2 id="安装部署（Centos7）"><a href="#安装部署（Centos7）" class="headerlink" title="安装部署（Centos7）"></a><strong>安装部署（Centos7）</strong></h2><h3 id="查看内核版本（高于3-10）"><a href="#查看内核版本（高于3-10）" class="headerlink" title="查看内核版本（高于3.10）"></a>查看内核版本（高于3.10）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 [root@docker ~]# uname -r</span><br><span class="line">2 3.10.0-327.el7.x86_64  # 必须是3.10版本以上</span><br></pre></td></tr></table></figure><h3 id="卸载旧版本-Docker"><a href="#卸载旧版本-Docker" class="headerlink" title="卸载旧版本 Docker"></a>卸载旧版本 Docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 [root@docker ~]# yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line">2 Loaded plugins: fastestmirror</span><br><span class="line">3 No Match for argument: docker</span><br><span class="line">4 No Match for argument: docker-common</span><br><span class="line">5 No Match for argument: docker-selinux</span><br><span class="line">6 No Match for argument: docker-engine</span><br><span class="line">7 No Packages marked for removal</span><br></pre></td></tr></table></figure><h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 1 [root@localhost ~]# yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"> 2 Loaded plugins：fastestmirror</span><br><span class="line"> 3 Loading mirror speeds from cached hostfile</span><br><span class="line"> 4  * base: centos.ustc.edu.cn</span><br><span class="line"> 5  * extras: mirrors.aliyun.com</span><br><span class="line"> 6  * updates: mirrors.cn99.com</span><br><span class="line"> 7 软件包 device-mapper-persistent-data-0.7.3-3.el7.x86_64 已安装并且是最新版本</span><br><span class="line"> 8 软件包 7:lvm2-2.02.180-10.el7_6.8.x86_64 已安装并且是最新版本</span><br><span class="line"> 9 正在解决依赖关系</span><br><span class="line">10 --&gt; 正在检查事务</span><br><span class="line">11 ---&gt; 软件包 yum-utils.noarch.0.1.1.31-50.el7 将被 安装</span><br><span class="line">12 --&gt; 正在处理依赖关系 python-kitchen，它被软件包 yum-utils-1.1.31-50.el7.noarch </span><br></pre></td></tr></table></figure><h3 id="设置-yum-源"><a href="#设置-yum-源" class="headerlink" title="设置 yum 源"></a>设置 yum 源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 1 ### 中央仓库</span><br><span class="line"> 2 [root@localhost ~]# yum-config-manager --add-repo http://download.docker.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"> 3 Loaded plugins: fastestmirror</span><br><span class="line"> 4 adding repo from: http://download.docker.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"> 5 grabbing file http://download.docker.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"> 6 repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"> 7 </span><br><span class="line"> 8 ### 阿里云</span><br><span class="line"> 9 [root@localhost ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">10 Loaded plugins: fastestmirror</span><br><span class="line">11 adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">12 grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">13 repo saved to /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> 1 ### 查看仓库中 Docker的版本</span><br><span class="line"> 2 [root@docker ~]# yum list docker-ce --showduplicates | sort -r</span><br><span class="line"> 3  * updates: mirrors.nju.edu.cn</span><br><span class="line"> 4 Loading mirror speeds from cached hostfile</span><br><span class="line"> 5 Loaded plugins: fastestmirror</span><br><span class="line"> 6 Installed Packages</span><br><span class="line"> 7  * extras: mirrors.nju.edu.cn</span><br><span class="line"> 8 docker-ce.x86_64            3:19.03.9-3.el7                    docker-ce-stable </span><br><span class="line"> 9 docker-ce.x86_64            3:19.03.8-3.el7                    docker-ce-stable </span><br><span class="line">10 docker-ce.x86_64            3:19.03.7-3.el7                    docker-ce-stable 30 docker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable </span><br><span class="line">31 docker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable </span><br><span class="line">32 docker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable </span><br><span class="line">33 docker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable </span><br><span class="line">34 docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">35 docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">36 docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">37 docker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable 43 docker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable </span><br><span class="line">44 docker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">45 docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">46 docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">47 </span><br><span class="line">48 ### 安装最新版本</span><br><span class="line">49 [root@localhost ~]# yum install -y docker-ce</span><br><span class="line">50 Loaded plugins: fastestmirror</span><br><span class="line">51 Loading mirror speeds from cached hostfile</span><br><span class="line">52  * base: mirrors.nju.edu.cn</span><br><span class="line">53  * extras: mirrors.nju.edu.cn</span><br><span class="line">54  * updates: mirrors.nju.edu.cn</span><br><span class="line">55 Resolving Dependencies</span><br><span class="line">56 --&gt; Running transaction check</span><br><span class="line">57 ---&gt; Package docker-ce.x86_64 3:19.03.10-3.el7 will be installed</span><br><span class="line">58 --&gt; Processing Dependency: container-selinux &gt;= 2:2.74 for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">59 --&gt; Processing Dependency: containerd.io &gt;= 1.2.2-3 for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">60 --&gt; Processing Dependency: libseccomp &gt;= 2.3 for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">61 --&gt; Processing Dependency: docker-ce-cli for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">62 --&gt; Processing Dependency: libcgroup for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">63 --&gt; Processing Dependency: libseccomp.so.2()(64bit) for package: 3:docker-ce-19.03.10-3.el7.x86_64</span><br><span class="line">64 </span><br><span class="line">65 ### 安装特定版本</span><br><span class="line">66 yum install -y docker-ce-版本 docker-ce-selinux-版本 docker-ce-cli-版本 containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 [root@localhost ~]# systemctl start docker</span><br><span class="line">2 [root@localhost ~]# systemctl enable docker</span><br><span class="line">3 Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><h4 id="获取自己的镜像加速地址：点击“创建我的容器镜像”"><a href="#获取自己的镜像加速地址：点击“创建我的容器镜像”" class="headerlink" title="获取自己的镜像加速地址：点击“创建我的容器镜像”"></a><a href="https://dev.aliyun.com/search.html">获取自己的镜像加速地址</a>：点击“创建我的容器镜像”</h4><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529141619252-919434962.png"><img src="/imgs/1610676-20200529141619252-919434962.png" alt="img"></a></p><h4 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 [root@docker ~]# mkdir -p /etc/docker/daemon.json</span><br><span class="line">2 [root@docker ~]# vi /etc/docker/daemon.json</span><br><span class="line">4 &#123;</span><br><span class="line">5   &quot;registry-mirrors&quot;: [&quot;https://78ssvya7.mirror.aliyuncs.com&quot;]</span><br><span class="line">6 &#125;8 [root@docker ~]# systemctl daemon-reload</span><br><span class="line">9 [root@docker ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Docker-核心操作"><a href="#Docker-核心操作" class="headerlink" title="Docker 核心操作"></a><strong>Docker 核心操作</strong></h2><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>​    1. 简介：镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件。它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>​    2. 镜像分层</p><p>​      1. 原理：Docker 镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS（联合文件系统）：是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>​        1. 一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><p>​        2. Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>​        3. 共享资源。一个基础镜像可以实例多个容器。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529205925608-1115947547.png"><img src="/imgs/1610676-20200529205925608-1115947547.png" alt="img"></a></p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529205934949-2014645065.png"><img src="/imgs/1610676-20200529205934949-2014645065.png" alt="img"></a></p><h3 id="多架构镜像（Multi-architecture-Image）"><a href="#多架构镜像（Multi-architecture-Image）" class="headerlink" title="多架构镜像（Multi-architecture Image）"></a>多架构镜像（Multi-architecture Image）</h3><p>​      1. 原理：在拉取镜像的时候，Docker 客户端会调用 Docker 镜像仓库服务的 API 完成拉取。如果该镜像有 Manifest 列表，则 Docker 客户端会找到当前主机架构对应的 Manifest 并解析出组成该镜像的镜像层加密ID，然后从镜像仓库中拉取每个镜像层。</p><p>​      2. 作用：是为了解决镜像支持不同架构（Linux、Windows、ARM等）的问题。为了实现这个特性，镜像仓库服务API支持两种重要的结构：Manifest列表和Manifest。Manifest列表是指某个镜像标签支持的架构列表，其支持的每种架构都有自己的Manifest定义，其中列举了镜像的构成。如下图所示，图中左侧是Manifest列表，其中包含了该镜像支持的每种架构。Manifest列表的每一项都有一个箭头，指向具体的Manifest，其中包含了镜像配置和镜像层数据。</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529210351739-1165288683.png"><img src="/imgs/1610676-20200529210351739-1165288683.png" alt="img"></a></p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p>​      <strong><a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529204157038-805203922.png"><img src="/imgs/1610676-20200529204157038-805203922.png" alt="img"></a></strong></p><h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><p>​    1. 容器是镜像的运行时实例，可以从单个镜像启动一个或多个容器。</p><p>​    2. 相对于虚拟机，容器较轻量级，而且容器启动非常快————与虚拟机运行在完整的操作系统之上相比，<strong>容器会共享其所在主机的操作系统&#x2F;内核</strong>（一个很简单是证明方法就是在容器内部查看下进程，在容器所在主机的操作系统上也能找到容器内部运行的进程（由于容器拥有隔离的PID，所以进程号会不同，但是进程确是相同的））。</p><p>​    3. Docker在创建容器的时候会为每个容器分配一个唯一的标识符，也会分配一个人性化的名称（如果用户没有指定名称的话）。</p><p>​    4. Docker容器有四种状态：运行中（Up）、暂停中（Paused）、已退出（Exited）、重新启动中（一种临时状态），状态转移图如下：</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530081044810-829723354.png"><img src="/imgs/1610676-20200530081044810-829723354.png" alt="img"></a></p><p>​    5. 常用操作</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530101902904-2079806059.png"><img src="/imgs/1610676-20200530101902904-2079806059.png" alt="img"></a></p><p>​    6. 重启策略（<code>--restart</code> 重启策略）</p><p>​      1. always：除非容器被明确停止，否则会一直尝试重启处于停止状态的容器。当Docker daemon重启的时候，停止的容器也会被重启。</p><p>​      2. unless-stopped：unless-stopped 和 always 最大区别的就是使用 unless-stopped 策略并处于已退出状态的容器，不会在Docker daemon重启的时候被重启。</p><p>​      3. on-failure：退出容器并且返回值不是0的时候重启容器，就算容器处于已退出状态，在Docker daemon重启的时候，容器也会重启。</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530153409959-450638579.png"><img src="/imgs/1610676-20200530153409959-450638579.png" alt="img"></a></p><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>​    1. 网络容器模型：Closed容器、Bridged容器（默认）、Joined容器、Open容器，所有的Docker容器都要符合这四种模型中的一种。这些模型定义了一个容器如何与其他的本地容器、主机网络进行通信。</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530114232299-740108263.png"><img src="/imgs/1610676-20200530114232299-740108263.png" alt="img"></a></p><p>​    2. Closed 容器：不允许任何的网络流量，运行在这种容器中的进程只能访问本地回环接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 # 可以看到，Closed容器只有一个回环接口</span><br><span class="line">2 [root@server ~]# docker run --name centos centos:latest ip a</span><br><span class="line">3 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">4     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5     inet 127.0.0.1/8 scope host lo</span><br><span class="line">6        valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>​    3. Bridged 容器：默认的网络容器模型，有两个接口，一个是本地回环接口，另一个接口通过网桥连接到主机网络。可以通过主机网络访问任何主机网络能访问的外部网络。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 一个本地回环接口，一个桥接到主机网络的接口</span><br><span class="line"> 2 [root@server ~]#  docker run --network bridge centos:latest ip a;</span><br><span class="line"> 3 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line"> 4     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line"> 5     inet 127.0.0.1/8 scope host lo</span><br><span class="line"> 6        valid_lft forever preferred_lft forever</span><br><span class="line"> 7 255: eth0@if256: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line"> 8     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"> 9     inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">10        valid_lft forever preferred_lft forever</span><br><span class="line">11 [root@server ~]#  ping -c 2 www.baidu.com</span><br><span class="line">12 PING www.a.shifen.com (180.101.49.12) 56(84) bytes of data.</span><br><span class="line">13 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=1 ttl=50 time=29.0 ms</span><br><span class="line">14 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=2 ttl=50 time=28.4 ms</span><br></pre></td></tr></table></figure><p>​    4. Joined 容器：所有容器共享一个网络栈，容器之间没有任何网络隔离。Joined容器通过将某一个容器接口的访问权限提供给另外一个新的容器来构建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 创建一个closed容器，看下其内部网络状态，可以看到容器内部监听的是39439端口</span><br><span class="line"> 2 [root@server ~]# docker run -d --name join-base-container --network none centos:latest</span><br><span class="line"> 3 e2907c7a889d209734f63309a5351687ac2761489e129cd6a7d6a392234a3cde</span><br><span class="line"> 4 [root@server ~]# docker exec join-base-container netstat -al</span><br><span class="line"> 5 Active Internet connections (servers and established)</span><br><span class="line"> 6 Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line"> 7 tcp        0      0 0.0.0.0:39439           0.0.0.0:*               LISTEN      </span><br><span class="line"> 8 Active UNIX domain sockets (servers and established)</span><br><span class="line"> 9 Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class="line">10 </span><br><span class="line">11 # 创建一个基于上面容器的joined容器，发现其共享了上面的close容器中的网络</span><br><span class="line">12 [root@server ~]# docker run --network container:join-base-container centos:latest netstat -al</span><br><span class="line">13 Active Internet connections (servers and established)</span><br><span class="line">14 Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line">15 tcp        0      0 0.0.0.0:39439           0.0.0.0:*               LISTEN      </span><br><span class="line">16 Active UNIX domain sockets (servers and established)</span><br><span class="line">17 Proto RefCnt Flags       Type       State         I-Node Path</span><br></pre></td></tr></table></figure><p>​    5. Open容器：没有网络容器，共享主机网络，并且对主机网络有完全的访问权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 发现open容器里能访问主机所有的网络接口</span><br><span class="line"> 2 [root@server ~]#  docker run --network host centos:latest ip a</span><br><span class="line"> 3 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line"> 4     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line"> 5     inet 127.0.0.1/8 scope host lo</span><br><span class="line"> 6        valid_lft forever preferred_lft forever</span><br><span class="line"> 7     inet6 ::1/128 scope host </span><br><span class="line"> 8        valid_lft forever preferred_lft forever</span><br><span class="line"> 9 2: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">10     link/ether 8c:ec:4b:ab:6d:38 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">11     inet 10.55.2.40/24 brd 10.55.2.255 scope global noprefixroute dynamic eno1</span><br><span class="line">12        valid_lft 522693sec preferred_lft 522693sec</span><br><span class="line">13     inet6 fe80::7b57:66c8:6d06:833d/64 scope link noprefixroute </span><br><span class="line">14        valid_lft forever preferred_lft forever</span><br><span class="line">15 3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">16     link/ether 02:42:cc:a9:3a:68 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">17     inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">18        valid_lft forever preferred_lft forever</span><br><span class="line">19     inet6 fe80::42:ccff:fea9:3a68/64 scope link </span><br><span class="line">20        valid_lft forever preferred_lft forever</span><br><span class="line">21 4: vboxnet0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">22     link/ether 0a:00:27:00:00:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">23     inet 192.168.99.1/24 brd 192.168.99.255 scope global vboxnet0</span><br><span class="line">24        valid_lft forever preferred_lft forever</span><br><span class="line">25     inet6 fe80::800:27ff:fe00:0/64 scope link </span><br><span class="line">26        valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>​    6. 常用操作</p><p>​      <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530152902816-1058144649.png"><img src="/imgs/1610676-20200530152902816-1058144649.png" alt="img"></a></p><h2 id="Docker-卷和数据持久化"><a href="#Docker-卷和数据持久化" class="headerlink" title="Docker 卷和数据持久化"></a>Docker 卷和数据持久化</h2><p>​    1. 简介：</p><p>​      1. 术语：一个主机或容器的目录树是由一组挂载点创建而成，这些挂载点描述了如何能构建出一个或多个文件系统。存储卷是容器目录树上的挂载点，提供了容器无关的数据管理方式。</p><p>​      2. 个人理解：将主机磁盘的某个目录挂载到容器的文件系统（主机上的这个目录就称为存储卷），那么在容器内对这个挂载点的操作实际上都是对主机上那个目录的操作。比如将主机目录 &#x2F;opt&#x2F;soft 挂载到容器的 &#x2F;soft 目录，那么容器中对 &#x2F;soft 的所有操作实际上都是对主机目录 &#x2F;opt&#x2F;soft 的操作。</p><p>​    2. 类型</p><p>​      1. 绑定挂载存储卷：使用用户提供的主机目录或文件，在启动容器时需要加入选项 -v &lt;主机位置&gt;:&lt;容器挂载点&gt;。&#96;&#96;</p><p>​      2. 管理存储卷：使用 Docker 的管理空间，在启动容器时需要加入选项 -v &lt;容器挂载点&gt;。Docker 守护进程会自动在主机文件系统（&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes）中创建一个目录来挂载到容器中指定的挂载掉点。&#96;&#96;</p><p>​         <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200530161418315-987094290.png"><img src="/imgs/1610676-20200530161418315-987094290.png" alt="img"></a></p><p>​    3. 常用操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 创建数据卷</span><br><span class="line"> 2 [root@server ~]# docker volume create --name volume1  [-d  指定位置]</span><br><span class="line"> 3 volume1</span><br><span class="line"> 4 </span><br><span class="line"> 5 # 查看数据卷列表信息</span><br><span class="line"> 6 [root@server ~]# docker volume ls</span><br><span class="line"> 7 DRIVER              VOLUME NAME</span><br><span class="line"> 8 local               412e102c656ee75de3db150c41fc9c3c21e2861ff9028a53aa49b25504e1e001</span><br><span class="line"> 9 local               81ad13949b48f53ab4917848fdaa8473ee9523bb18353b38925969f323bc166d</span><br><span class="line">10 local               volume1</span><br><span class="line">11 </span><br><span class="line">12 # 查看数据卷详细信息</span><br><span class="line">13 [root@server ~]# docker volume inspect volume1</span><br><span class="line">14 [</span><br><span class="line">15     &#123;</span><br><span class="line">16         &quot;Name&quot;: &quot;volume1&quot;,</span><br><span class="line">17         &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">18         &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/volume1/_data&quot;,</span><br><span class="line">19         &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">20         &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">21     &#125;</span><br><span class="line">22 ]</span><br><span class="line">23 </span><br><span class="line">24 # 删除数据卷</span><br><span class="line">25 [root@server ~]# docker volume rm volume1</span><br><span class="line">26 volume1</span><br><span class="line">27 </span><br><span class="line">28 # 挂载宿主机文件或目录到容器数据卷</span><br><span class="line">29 ## 挂载文件</span><br><span class="line">30 [root@server ~]# cat /opt/test.txt </span><br><span class="line">31 hello world!!!</span><br><span class="line">32 [root@server ~]# docker run -it --name centos-file -v /opt/test.txt:/opt/test.txt:ro centos:latest </span><br><span class="line">33 [root@d62e52a32a07 /]# cat /opt/test.txt </span><br><span class="line">34 hello world!!!</span><br><span class="line">35 </span><br><span class="line">36 ## 挂载目录</span><br><span class="line">37 [root@server ~]# ll /tmp/</span><br><span class="line">38 total 0</span><br><span class="line">39 drwx------ 2 root root 6 May 29 16:14 tmp.fJOTUQbyx3</span><br><span class="line">40 drwx------ 2 root root 6 May 29 16:48 tmp.kt4W6bwra4</span><br><span class="line">41 drwx------ 2 root root 6 May 29 16:10 tmp.xmy3qeNyIx</span><br><span class="line">42 [root@server ~]# docker run --name centos-dir -v /tmp/:/opt/ centos:latest  ls -l /opt/                            </span><br><span class="line">43 total 0</span><br><span class="line">44 drwx------ 2 root root 6 May 29 16:14 tmp.fJOTUQbyx3</span><br><span class="line">45 drwx------ 2 root root 6 May 29 16:48 tmp.kt4W6bwra4</span><br><span class="line">46 drwx------ 2 root root 6 May 29 16:10 tmp.xmy3qeNyIx</span><br><span class="line">47 </span><br><span class="line">48 # 共享数据卷</span><br><span class="line">49 [root@server ~]# docker run --name centos-shared -v /tmp/:/opt/ centos:latest</span><br><span class="line">50 [root@server ~]# docker run --name centos --volumes-from centos-shared  centos:latest ls -l /opt/</span><br><span class="line">51 total 0</span><br><span class="line">52 drwx------ 2 root root 6 May 29 16:14 tmp.fJOTUQbyx3</span><br><span class="line">53 drwx------ 2 root root 6 May 29 16:48 tmp.kt4W6bwra4</span><br><span class="line">54 drwx------ 2 root root 6 May 29 16:10 tmp.xmy3qeNyIx</span><br><span class="line">55 </span><br><span class="line">56 # 备份数据卷</span><br><span class="line">57 [root@server ~]# docker run --name centos-shared -v /tmp/:/opt/ centos:latest </span><br><span class="line">58 [root@server ~]# docker run --rm --volumes-from centos-shared -v $(pwd):/backup centos:latest tar cvf /backup/centos.tar /opt/                         </span><br><span class="line">59 tar: Removing leading `/&#x27; from member names</span><br><span class="line">60 /opt/</span><br><span class="line">61 /opt/.ICE-unix/</span><br><span class="line">62 /opt/.Test-unix/</span><br><span class="line">63 /opt/.X11-unix/</span><br><span class="line">64 /opt/.XIM-unix/</span><br><span class="line">65 /opt/.font-unix/</span><br><span class="line">66 /opt/ks-script-Rl3Umm</span><br><span class="line">67 /opt/yum.log</span><br></pre></td></tr></table></figure><h2 id="Docker-资源限制"><a href="#Docker-资源限制" class="headerlink" title="Docker 资源限制"></a><strong>Docker 资源限制</strong></h2><p>​    1. 简介</p><p>​      1. cgroup：是将任意进程进行分组化管理的Linux内核功能，限制某个或者某些进程的分配资源。</p><p>​      2. subsystem：用于控制cgroup中的进程行为的内核组件。</p><p>​      3. hierarchy：由cgroup组成的层级树，每个hierarchy都对应一个cgroup虚拟文件系统，都有系统上的所有task，此外低 level 的hierarchy 不能超过高 level 设定的资源上限。</p><p>​    2. subsystem（资源控制器）</p><p>​      1. blkio：控制块设备的访问，比如带宽等。</p><p>​      2. cpu：控制进程占用cpu的多少。</p><p>​      3. cpuacct：记录cgroup 中进程使用的 CPU 情况。</p><p>​      4. cpuset：为 cgroup 中的进程分配 CPU 和内存节点。</p><p>​      5. devices：控制进程对设备的访问。</p><p>​      6. freezer：挂起或者恢复 cgroup 中的进程。</p><p>​      7. memory：设定 cgroup 中进程的内存限制，统计使用的内存资源。</p><p>​      8. net_cls：使用等级识别符（classid）标记网络数据包，使得Linux 流量控制程序（tc）识别具体 cgroup 中的数据包。</p><p>​    3. 常用操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> 1 # CPU 资源配额控制</span><br><span class="line"> 2 ## CPU 份额配置</span><br><span class="line"> 3 [root@server ~]# docker run -itd --name cpu512 -c 512 centos:latest </span><br><span class="line"> 4 426e23ed9c96b9482cd167d17ca79c57e140be2359191372a5a0bdfd10d73173</span><br><span class="line"> 5 [root@server ~]# top -p  $(docker inspect -f &#123;&#123;.State.Pid&#125;&#125; da8d71c623ce)</span><br><span class="line"> 6 top - 15:43:49 up 1 day, 23:51,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line"> 7 Tasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie</span><br><span class="line"> 8 %Cpu(s):  0.3 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line"> 9 KiB Mem :  8176044 total,  1236396 free,  1157452 used,  5782196 buff/cache</span><br><span class="line">10 KiB Swap:        0 total,        0 free,        0 used.  6711724 avail Mem</span><br><span class="line">11 </span><br><span class="line">12 ## CPU 周期控制</span><br><span class="line">13 docker run -tid --cpu-period 100000(周期) --cpu-quota200000(配额) centos:latest</span><br><span class="line">14 &lt;容器的完整长ID&gt;</span><br><span class="line">15 [root@server ~]# cat /sys/fs/cgroup/cpu/docker/&lt;容器的完整长ID&gt;/cpu.cfs_period_us</span><br><span class="line">16 100000</span><br><span class="line">17 [root@server ~]# cat /sys/fs/cgroup/cpu/docker/&lt;容器的完整长ID&gt;/cpu.cfs_quota_us</span><br><span class="line">18 200000</span><br><span class="line">19 </span><br><span class="line">20 ## CPU 内核控制</span><br><span class="line">21 [root@server ~]# docker run -itd --name cupset --cpuset-cpus=&quot;0,1&quot; centos:latest</span><br><span class="line">22 da8d71c623ce35105201d824234d476b065e8bd6e87b416d262599b7d2ac333f</span><br><span class="line">23 [root@server ~]# cat /sys/fs/cgroup/cpuset/docker/&lt;容器的完整长ID&gt;/cpuset.cpus</span><br><span class="line">24 0-1</span><br><span class="line">25 </span><br><span class="line">26 # 内存资源配额控制</span><br><span class="line">27 -m 设置内存的使用限额</span><br><span class="line">28 --memory-swap 设置内存和swap的使用限额</span><br><span class="line">29 [root@server ~]# docker run -m 200M --memory-swap=300M centos:latest</span><br><span class="line">30 </span><br><span class="line">31 # Block IO 的限制</span><br><span class="line">32 ## 限制 block IO（默认500） </span><br><span class="line">33 [root@server ~]# docker run -itd --name B --blkio-weight 300 centos:latest</span><br><span class="line">34 </span><br><span class="line">35 ## 限制 bps 和 iops</span><br><span class="line">36 bps 是 byte per second，每秒读写的数据量。</span><br><span class="line">37 iops 是 io per second，每秒 IO 的次数。</span><br><span class="line">38 [root@server ~]# docker run -itd --device-write-bps /dev/sda:30MB centos:latest</span><br></pre></td></tr></table></figure><h2 id="Docker-API"><a href="#Docker-API" class="headerlink" title="Docker API"></a><strong>Docker API</strong></h2><p>​    1. 种类</p><p>​      1. Docker Registry API：docker镜像仓库的api，通过操作这套API，你可以自由的自动化、程序化的管理你的镜像仓库。</p><p>​      2. Docker Hub API：用户管理操作的API，docker hub是使用校验和公共 namespaces 的方式来存储账户信息、认证账户、进行账户授权。API同时也允许操作相关的用户仓库和 library 仓库。</p><p>​      3. Docker Remote API：用于控制主机 Docker 服务端的 API，等价于 docker命令行客户端。 有了它，你能远程操作docker容器，更重要的是你可以通过程序自动化运维docker进程。</p><p>​    2. 配置（需要重启 Docker）</p><p>​      1. 在 &#x2F;etc&#x2F;sysconfig&#x2F;docker 文件中添加 OPTIONS&#x3D;’ -H tcp:&#x2F;&#x2F;0.0.0.0:2357 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock ‘ &#96;&#96;</p><p>​      2. 在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service 文件中 ExecStart 后面添加 -H tcp:&#x2F;&#x2F;0.0.0.0:2357 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</p><p>​    3. 使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> 1 #### 查看</span><br><span class="line"> 2 # 查看 docker 版本信息</span><br><span class="line"> 3 curl http://localhost:2357/version | python -mjson.tool</span><br><span class="line"> 4 </span><br><span class="line"> 5 # 查看 docker 详细信息</span><br><span class="line"> 6 curl http://localhost:2357/info | python -mjson.tool</span><br><span class="line"> 7 </span><br><span class="line"> 8 # 列出所有镜像</span><br><span class="line"> 9 curl http://localhost:2357/images/json | python -mjson.tool</span><br><span class="line">10 </span><br><span class="line">11 # 列出指定镜像</span><br><span class="line">12 curl http://localhost:2357/images/images_id/json | python -mjson.tool</span><br><span class="line">13 </span><br><span class="line">14 # 列出所有容器</span><br><span class="line">15 curl http://localhost:2357/containers/json | python -mjson.tool</span><br><span class="line">16 </span><br><span class="line">17 # 列出指定容器</span><br><span class="line">18 curl http://localhost:2357/containers/contianer_id/json | python -mjson.tool</span><br><span class="line">19 </span><br><span class="line">20 # 查看 docker 系统文件的变更情况</span><br><span class="line">21 curl http://localhost:2357/containers/contianer_id/changes/json | python -mjson.tool</span><br><span class="line">22 </span><br><span class="line">23 #### 生命周期</span><br><span class="line">24 # 创建容器（mariadb数据库的容器，设置了密码是123456，监听端口是3306）</span><br><span class="line">25 curl -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class="line">26     &quot;Image&quot;: &quot;mariadb&quot;,</span><br><span class="line">27     &quot;Env&quot;: [&quot;MYSQL_ROOT_PASSWORD=123456&quot;],</span><br><span class="line">28     &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">29         &quot;3306/tcp&quot;: &#123;&#125;</span><br><span class="line">30     &#125;,</span><br><span class="line">31     &quot;HostConfig&quot;: &#123;</span><br><span class="line">32         &quot;PortBindings&quot;: &#123;</span><br><span class="line">33             &quot;3306/tcp&quot;: [&#123;&quot;HostIp&quot;: &quot;&quot;,&quot;HostPort&quot;: &quot;3306&quot;&#125;]</span><br><span class="line">34         &#125;</span><br><span class="line">35     &#125;,</span><br><span class="line">36     &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">37         &quot;Ports&quot;: &#123;</span><br><span class="line">38             &quot;5000/tcp&quot;: [&#123;&quot;HostIp&quot;: &quot;0.0.0.0&quot;,&quot;HostPort&quot;: &quot;3306&quot;&#125;]</span><br><span class="line">39         &#125;</span><br><span class="line">40     &#125;</span><br><span class="line">41 &#125;&#x27; http://localhost:2357/containers/create</span><br><span class="line">42 </span><br><span class="line">43 # 启动容器</span><br><span class="line">44 curl -X POST http://127.0.0.1:8088/containers/&#123;id&#125;/start  </span><br><span class="line">45 </span><br><span class="line">46 # 停止容器</span><br><span class="line">47 curl -X POST http://127.0.0.1:8088/containers/&#123;id&#125;/stop</span><br><span class="line">48 </span><br><span class="line">49 # 删除容器</span><br><span class="line">50 curl -X POST http://127.0.0.1:8088/containers/&#123;id&#125;/rm</span><br></pre></td></tr></table></figure><h2 id="Docker-实例"><a href="#Docker-实例" class="headerlink" title="Docker 实例"></a><strong>Docker 实例</strong></h2><p>  <strong>一、应用容器化技术</strong></p><p>​    1. supermin5 构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 安装</span><br><span class="line"> 2 [root@server ~]# yum install -y supermin5</span><br><span class="line"> 3 Loaded plugins: fastestmirror</span><br><span class="line"> 4 Loading mirror speeds from cached hostfile</span><br><span class="line"> 5 Resolving Dependencies</span><br><span class="line"> 6 --&gt; Running transaction check</span><br><span class="line"> 7 ---&gt; Package supermin5.x86_64 0:5.1.10-1.2.el7 will be installed</span><br><span class="line"> 8 --&gt; Finished Dependency Resolution</span><br><span class="line"> 9 </span><br><span class="line">10 # 预装镜像</span><br><span class="line">11 [root@server ~]# supermin5 -v –prepare bash yum net-tools initscripts vi coreutils -o supermin.d</span><br><span class="line">12 supermin: version: 5.1.10</span><br><span class="line">13 supermin: rpm: detected RPM version 4.11</span><br><span class="line">14 supermin: package handler: fedora/rpm</span><br><span class="line">15 supermin: prepare: bash net-tools initscripts vi coreutils</span><br><span class="line">16 supermin: packages specified on the command line:</span><br><span class="line">17   - bash-4.2.46-12.el7.x86_64</span><br><span class="line">18   - net-tools-2.0-0.17.20131004git.el7.x86_64</span><br><span class="line">19   - initscripts-9.49.39-1.el7_4.1.x86_64</span><br><span class="line">20   - coreutils-8.22-11.el7.x86_64</span><br><span class="line">21 ...</span><br><span class="line">22 supermin: renaming supermin.d.9ohzr3uh to supermin.d</span><br><span class="line">23 </span><br><span class="line">24 # 构建镜像</span><br><span class="line">25 [root@server ~]# supermin5 -v --build --format chroot supermin.d/ -o appliance.d</span><br><span class="line">26 supermin: version: 5.1.10</span><br><span class="line">27 supermin: rpm: detected RPM version 4.11</span><br><span class="line">28 supermin: package handler: fedora/rpm</span><br><span class="line">29 supermin: build: supermin.d/</span><br><span class="line">30 supermin: build: visiting supermin.d/base.tar.gz type gzip base image (tar)</span><br><span class="line">31 supermin: build: visiting supermin.d/packages type uncompressed packages</span><br><span class="line">32 ...</span><br><span class="line">33 supermin: renaming appliance.d.t7dbj8kr to appliance.d</span><br><span class="line">34 </span><br><span class="line">35 # 使用yum安装软件</span><br><span class="line">36 [root@server ~]# echo 7 &gt; appliance.d/etc/yum/vars/releasever</span><br><span class="line">37 </span><br><span class="line">38 # 构建网络(如果需要)</span><br><span class="line">39 [root@server ~]# cp /etc/resolv.conf appliance.d/etc</span><br><span class="line">40 </span><br><span class="line">41 # 将构建镜像归档</span><br><span class="line">42 [root@server ~]# tar --numeric-owner -cpf centos-7.tar -C appliance.d/ .</span><br><span class="line">43 </span><br><span class="line">44 # 从归档文件启动镜像并设置tag</span><br><span class="line">45 [root@server ~]# cat centos-7.tar | docker import - 192.168.200.105:5000/centos-7:latest</span><br><span class="line">46 sha256:b1e7942497d9372d43ad7bc0bfc27687dad6e77f100e7242139592efc2ab4e62</span><br><span class="line">47 </span><br><span class="line">48 # 将镜像上传到仓库</span><br><span class="line">49 [root@server ~]# docker push 192.168.200.105:5000/centos-7:latest</span><br><span class="line">50 The push refers to a repository [192.168.200.51:5000/centos-7]</span><br><span class="line">51 11f2f8c2668b: Pushed </span><br><span class="line">52 latest: digest: sha256:fc47a231f23c189dd93ceeb1bba5aceca50f394003425eaabfbb2062b2feaa9c size: 528</span><br><span class="line">53 </span><br><span class="line">54 # 查看镜像信息</span><br><span class="line">55 [root@server ~]# docker images 192.168.200.105:5000/centos-7:latest</span><br><span class="line">56 REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">57 192.168.200.51:5000/centos-7   latest              5e83db682966        2 minutes ago       213.4 MB</span><br></pre></td></tr></table></figure><p>​    2. Dockerfile 创建镜像</p><p>​      1. 简介</p><p>​       1. Dockerfile是一个包含用于组合映像的命令的文本文档，可以在命令行中调用任何命令。 Docker 通过读取 Dockerfile 中的指令自动生成映像。</p><p>​       2. <code>Docker build命令用于从 Dockerfile 构建映像，可以使用 -f </code>标志指向文件系统中任何位置的Dockerfile。</p><p>​      2. 常用命令</p><p>​        <a href="https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200531135240518-1486540818.png"><img src="/imgs/1610676-20200531135240518-1486540818.png" alt="img"></a></p><p>​      3. 示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> 1 # This my first nginx Dockerfile</span><br><span class="line"> 2 # Version 1.0</span><br><span class="line"> 3 </span><br><span class="line"> 4 # Base images 基础镜像</span><br><span class="line"> 5 FROM centos</span><br><span class="line"> 6 </span><br><span class="line"> 7 # MAINTAINER 维护者信息</span><br><span class="line"> 8 LABLE maintainer=&quot;mj_1028@qq.com&quot; </span><br><span class="line"> 9 </span><br><span class="line">10 # ENV 设置环境变量</span><br><span class="line">11 ENV PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line">12 </span><br><span class="line">13 # ADD  文件放在当前目录下，拷过去会自动解压</span><br><span class="line">14 ADD nginx-1.8.0.tar.gz /usr/local/  </span><br><span class="line">15 ADD epel-release-latest-7.noarch.rpm /usr/local/  </span><br><span class="line">16 </span><br><span class="line">17 # RUN 执行以下命令 </span><br><span class="line">18 RUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm</span><br><span class="line">19 RUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean all</span><br><span class="line">20 RUN useradd -s /sbin/nologin -M www</span><br><span class="line">21 </span><br><span class="line">22 # WORKDIR 相当于cd</span><br><span class="line">23 WORKDIR /usr/local/nginx-1.8.0 </span><br><span class="line">24 </span><br><span class="line">25 RUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line">27 RUN echo &quot;daemon off;&quot; &gt;&gt; /etc/nginx.conf</span><br><span class="line">28 </span><br><span class="line">29 # EXPOSE 暴露端口</span><br><span class="line">30 EXPOSE 80</span><br><span class="line">31 </span><br><span class="line">32 # CMD 运行以下命令</span><br><span class="line">33 CMD [&quot;nginx&quot;]</span><br></pre></td></tr></table></figure><p>  <strong>二、Dockerfile 构建 MySQL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">  1 # 编写数据库建表脚本</span><br><span class="line">  2 [root@server mysql]# cat build_table.sh </span><br><span class="line">  3 #!/bin/bash</span><br><span class="line">  4 mysqld_safe &amp;</span><br><span class="line">  5 sleep 5</span><br><span class="line">  6 mysql -uroot -e &quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;$MYSQL_USER&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;$MYSQL_PASS&#x27;  WITH GRANT OPTION;&quot;</span><br><span class="line">  7 mysql -uroot -e &quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;$MYSQL_USER&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;$MYSQL_PASS&#x27;  WITH GRANT OPTION;&quot;</span><br><span class="line">  8 mysql -e &quot;create database chinaskills;&quot;</span><br><span class="line">  9 mysql -e &quot;create table chinaskills.company(name char(20) not null,years int not null)DEFAULT CHARSET=utf8;&quot;</span><br><span class="line"> 10 mysql -e &quot;insert into chinaskills.company values(&#x27;mm&#x27;,2020),(&#x27;dd&#x27;,2020);&quot;</span><br><span class="line"> 11 </span><br><span class="line"> 12 # 编写 yum 源文件</span><br><span class="line"> 13 [root@server mysql]# cat local.repo </span><br><span class="line"> 14 [centos]</span><br><span class="line"> 15 name=centos</span><br><span class="line"> 16 baseurl=file:///opt/centos</span><br><span class="line"> 17 gpgcheck=0</span><br><span class="line"> 18 enabled=1</span><br><span class="line"> 19 [pass]</span><br><span class="line"> 20 name=pass</span><br><span class="line"> 21 baseurl=file:///opt/pass/docker</span><br><span class="line"> 22 gpgcheck=0</span><br><span class="line"> 23 enabled=1</span><br><span class="line"> 24 </span><br><span class="line"> 25 # 编写 Dockerfile</span><br><span class="line"> 26 [root@server mysql]# cat Dockerfile </span><br><span class="line"> 27 # 基础镜像</span><br><span class="line"> 28 FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 29 # 维护者信息</span><br><span class="line"> 30 LABLE maintainer=&quot;mj_1028@qq.com&quot;</span><br><span class="line"> 31 # 使用当前系统的 yum 源文件</span><br><span class="line"> 32 RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 33 ADD local.repo /etc/yum.repos.d/</span><br><span class="line"> 34 # 安装MySQL服务，初始化数据库，设置用户名和密码，支持中文</span><br><span class="line"> 35 RUN yum install -y mariadb-server </span><br><span class="line"> 36 RUN mysql_install_db --user=mysql</span><br><span class="line"> 37 ENV MYSQL_USER xiandian</span><br><span class="line"> 38 ENV MYSQL_PASS xiandian</span><br><span class="line"> 39 ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 40 # 运行并修改数据库脚本</span><br><span class="line"> 41 ADD build_table.sh /docker/mysql/build_table.sh</span><br><span class="line"> 42 RUN chmod +x /docker/mysql/build_table.sh</span><br><span class="line"> 43 RUN /docker/mysql/build_table.sh</span><br><span class="line"> 44 # 暴露3306端口，并以后台安全模式启动</span><br><span class="line"> 45 EXPOSE 3306</span><br><span class="line"> 46 CMD mysqld_safe</span><br><span class="line"> 47 </span><br><span class="line"> 48 # 构建镜像</span><br><span class="line"> 49 [root@server mysql]# docker build -t mysql:latest .</span><br><span class="line"> 50 Sending build context to Docker daemon 5.632 kB</span><br><span class="line"> 51 Step 1 : FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 52  ---&gt; 6300524e4fcb</span><br><span class="line"> 53 Step 2 : LABEL maintainer &quot;mj_1028@qq.com&quot;</span><br><span class="line"> 54  ---&gt; Using cache</span><br><span class="line"> 55  ---&gt; 297bb01a36e7</span><br><span class="line"> 56 Step 3 : RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 57  ---&gt; Using cache</span><br><span class="line"> 58  ---&gt; 5cd2c60db6e4</span><br><span class="line"> 59 Step 4 : ADD local.repo /etc/yum.repos.d/</span><br><span class="line"> 60  ---&gt; Using cache</span><br><span class="line"> 61  ---&gt; 6bf93249441b</span><br><span class="line"> 62 Step 5 : RUN yum install -y mariadb-server</span><br><span class="line"> 63  ---&gt; Using cache</span><br><span class="line"> 64  ---&gt; c032f3770d64</span><br><span class="line"> 65 Step 6 : RUN mysql_install_db --user=mysql</span><br><span class="line"> 66  ---&gt; Using cache</span><br><span class="line"> 67  ---&gt; cebd6468488a</span><br><span class="line"> 68 Step 7 : ENV MYSQL_USER xiandian</span><br><span class="line"> 69  ---&gt; Using cache</span><br><span class="line"> 70  ---&gt; 4f0a879d55cd</span><br><span class="line"> 71 Step 8 : ENV MYSQL_PASS xiandian</span><br><span class="line"> 72  ---&gt; Using cache</span><br><span class="line"> 73  ---&gt; 168de6eb69ab</span><br><span class="line"> 74 Step 9 : ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 75  ---&gt; Using cache</span><br><span class="line"> 76  ---&gt; a8fa8e895f78</span><br><span class="line"> 77 Step 10 : ADD build_table.sh /docker/mysql/build_table.sh</span><br><span class="line"> 78  ---&gt; Using cache</span><br><span class="line"> 79  ---&gt; 31201ac69e2a</span><br><span class="line"> 80 Step 11 : RUN chmod +x /docker/mysql/build_table.sh</span><br><span class="line"> 81  ---&gt; Using cache</span><br><span class="line"> 82  ---&gt; 27069a74cb3d</span><br><span class="line"> 83 Step 12 : RUN /docker/mysql/build_table.sh</span><br><span class="line"> 84  ---&gt; Using cache</span><br><span class="line"> 85  ---&gt; 41f7ef5e31a7</span><br><span class="line"> 86 Step 13 : EXPOSE 3306</span><br><span class="line"> 87  ---&gt; Using cache</span><br><span class="line"> 88  ---&gt; 0e4dab8114cf</span><br><span class="line"> 89 Step 14 : CMD mysqld_safe</span><br><span class="line"> 90  ---&gt; Using cache</span><br><span class="line"> 91  ---&gt; 1835da94d00e</span><br><span class="line"> 92 Successfully built 1835da94d00e</span><br><span class="line"> 93 </span><br><span class="line"> 94 # 启动容器，登录数据库，查看数据库列表</span><br><span class="line"> 95 [root@server mysql]# docker run -itP --name mysql -e MYSQL_ROOT_PASSWORD=000000 mysql:latest /bin/bash</span><br><span class="line"> 96 bash-4.2# mysql -uxiandian -pxiandian</span><br><span class="line"> 97 Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line"> 98 Your MariaDB connection id is 4</span><br><span class="line"> 99 Server version: 5.5.56-MariaDB MariaDB Server</span><br><span class="line">100 </span><br><span class="line">101 Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">102 </span><br><span class="line">103 Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line">104 </span><br><span class="line">105 MariaDB [(none)]&gt; show databases;</span><br><span class="line">106 +--------------------+</span><br><span class="line">107 | Database           |</span><br><span class="line">108 +--------------------+</span><br><span class="line">109 | information_schema |</span><br><span class="line">110 | mysql              |</span><br><span class="line">111 | performance_schema |</span><br><span class="line">112 | test              |</span><br><span class="line">113 | chinaskills            |</span><br><span class="line">114 +--------------------+</span><br><span class="line">115 4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>  三<strong>、Dockerfile 构建 Apache+PHP</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">  1 # 编写 PHP 远程访问 MySQL</span><br><span class="line">  2 [root@server ~]# cat test.php </span><br><span class="line">  3 &lt;?php</span><br><span class="line">  4   $con = mysql_connect(getenv(&quot;MYSQL_ADDR&quot;),getenv(&quot;MYSQL_USER&quot;),getenv(&quot;MYSQL_PASS&quot;));</span><br><span class="line">  5   if (!$con)</span><br><span class="line">  6     &#123;</span><br><span class="line">  7       die(&#x27;Could not connect: &#x27; . mysql_error());</span><br><span class="line">  8     &#125;</span><br><span class="line">  9   mysql_select_db(&quot;chinaskills&quot;, $con);</span><br><span class="line"> 10   $result = mysql_query(&quot;SELECT * FROM company&quot;);</span><br><span class="line"> 11   echo &quot;&lt;table border=&#x27;1&#x27;&gt;</span><br><span class="line"> 12   &lt;tr&gt;</span><br><span class="line"> 13   &lt;th&gt;NAME&lt;/th&gt;</span><br><span class="line"> 14   &lt;th&gt;YEARS&lt;/th&gt;</span><br><span class="line"> 15   &lt;/tr&gt;&quot;;</span><br><span class="line"> 16   while($row = mysql_fetch_array($result))</span><br><span class="line"> 17     &#123;</span><br><span class="line"> 18       echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line"> 19       echo &quot;&lt;td&gt;&quot; . $row[&#x27;name&#x27;] . &quot;&lt;/td&gt;&quot;;</span><br><span class="line"> 20       echo &quot;&lt;td&gt;&quot; . $row[&#x27;years&#x27;] . &quot;&lt;/td&gt;&quot;;</span><br><span class="line"> 21       echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line"> 22     &#125;</span><br><span class="line"> 23     echo &quot;&lt;/table&gt;&quot;;</span><br><span class="line"> 24  </span><br><span class="line"> 25   mysql_close($con);</span><br><span class="line"> 26 ?&gt;</span><br><span class="line"> 27 </span><br><span class="line"> 28 # 编写 Dockerfile</span><br><span class="line"> 29 [root@server ~]# cat Dockerfile </span><br><span class="line"> 30 FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 31 LABEL maintainer=&quot;mj_1028@qq.com&quot;</span><br><span class="line"> 32 RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 33 ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line"> 34 WORKDIR /root/</span><br><span class="line"> 35 RUN yum install -y httpd php php-mysql </span><br><span class="line"> 36 RUN mkdir -p /var/log/httpd</span><br><span class="line"> 37 RUN mkdir -p /var/www/html</span><br><span class="line"> 38 ENV MYSQL_ADDR 172.17.0.5</span><br><span class="line"> 39 ENV MYSQL_USER xiandian</span><br><span class="line"> 40 ENV MYSQL_PASS xiandian</span><br><span class="line"> 41 ENV TERM linux</span><br><span class="line"> 42 ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 43 ADD test.php /var/www/html/test.php</span><br><span class="line"> 44 EXPOSE 80</span><br><span class="line"> 45 ADD run.sh /root/run.sh</span><br><span class="line"> 46 RUN chmod u+x /root/run.sh</span><br><span class="line"> 47 CMD /root/run.sh</span><br><span class="line"> 48 </span><br><span class="line"> 49 # 构建</span><br><span class="line"> 50 [root@server ~]# docker build -t apache-php:laetst .</span><br><span class="line"> 51 Sending build context to Docker daemon 32.77 kB</span><br><span class="line"> 52 Step 1 : FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 53  ---&gt; 6300524e4fcb</span><br><span class="line"> 54 Step 2 : LABEL maintainer &quot;mj_1028@qq.com&quot;</span><br><span class="line"> 55  ---&gt; Using cache</span><br><span class="line"> 56  ---&gt; 297bb01a36e7</span><br><span class="line"> 57 Step 3 : RUN rm -f /etc/yum.repos.d/*</span><br><span class="line"> 58  ---&gt; Using cache</span><br><span class="line"> 59  ---&gt; 5cd2c60db6e4</span><br><span class="line"> 60 Step 4 : ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line"> 61  ---&gt; Using cache</span><br><span class="line"> 62  ---&gt; 6bf93249441b</span><br><span class="line"> 63 Step 5 : WORKDIR /root/</span><br><span class="line"> 64  ---&gt; Using cache</span><br><span class="line"> 65  ---&gt; 86be0e478fd9</span><br><span class="line"> 66 Step 6 : RUN yum install -y httpd php php-mysql</span><br><span class="line"> 67  ---&gt; Using cache</span><br><span class="line"> 68  ---&gt; 40756572de7f</span><br><span class="line"> 69 Step 7 : RUN mkdir -p /var/log/httpd</span><br><span class="line"> 70  ---&gt; Using cache</span><br><span class="line"> 71  ---&gt; 457d374ff59a</span><br><span class="line"> 72 Step 8 : RUN mkdir -p /var/www/html</span><br><span class="line"> 73  ---&gt; Using cache</span><br><span class="line"> 74  ---&gt; 738f8d821172</span><br><span class="line"> 75 Step 9 : ENV MYSQL_ADDR 172.17.0.5</span><br><span class="line"> 76  ---&gt; Using cache</span><br><span class="line"> 77  ---&gt; 6348e4d33a2b</span><br><span class="line"> 78 Step 10 : ENV MYSQL_USER xiandian</span><br><span class="line"> 79  ---&gt; Using cache</span><br><span class="line"> 80  ---&gt; d3ba7946fb52</span><br><span class="line"> 81 Step 11 : ENV MYSQL_PASS xiandian</span><br><span class="line"> 82  ---&gt; Using cache</span><br><span class="line"> 83  ---&gt; 3d40f9cfe126</span><br><span class="line"> 84 Step 12 : ENV TERM linux</span><br><span class="line"> 85  ---&gt; Using cache</span><br><span class="line"> 86  ---&gt; 1a6ad56ec0e8</span><br><span class="line"> 87 Step 13 : ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 88  ---&gt; Using cache</span><br><span class="line"> 89  ---&gt; ed9fdc4a238b</span><br><span class="line"> 90 Step 14 : ADD test.php /var/www/html/test.php</span><br><span class="line"> 91  ---&gt; Using cache</span><br><span class="line"> 92  ---&gt; 3d45b3c49b07</span><br><span class="line"> 93 Step 15 : EXPOSE 80</span><br><span class="line"> 94  ---&gt; Using cache</span><br><span class="line"> 95  ---&gt; 1609552d6493</span><br><span class="line"> 96 Step 16 : ADD run.sh /root/run.sh</span><br><span class="line"> 97  ---&gt; Using cache</span><br><span class="line"> 98  ---&gt; 7b00521525e8</span><br><span class="line"> 99 Step 17 : RUN chmod u+x /root/run.sh</span><br><span class="line">100  ---&gt; Using cache</span><br><span class="line">101  ---&gt; 411bd471e1ee</span><br><span class="line">102 Step 18 : CMD /root/run.sh</span><br><span class="line">103  ---&gt; Using cache</span><br><span class="line">104  ---&gt; c719019aa274</span><br><span class="line">105 Successfully built c719019aa274</span><br><span class="line">106 </span><br><span class="line">107 # 访问</span><br><span class="line">108 [root@server ~]# curl http://192.168.200.51:8096/test.php</span><br><span class="line">109 &lt;table border=&#x27;1&#x27;&gt;</span><br><span class="line">110    &lt;tr&gt;</span><br><span class="line">111      &lt;th&gt;NAME&lt;/th&gt;</span><br><span class="line">112      &lt;th&gt;YEARS&lt;/th&gt;</span><br><span class="line">113    &lt;/tr&gt;</span><br><span class="line">114    &lt;tr&gt;</span><br><span class="line">115       &lt;td&gt;mm&lt;/td&gt;</span><br><span class="line">116       &lt;td&gt;2020&lt;/td&gt;</span><br><span class="line">117     &lt;/tr&gt;</span><br><span class="line">118     &lt;tr&gt;</span><br><span class="line">119       &lt;td&gt;dd&lt;/td&gt;</span><br><span class="line">120       &lt;td&gt;2020&lt;/td&gt;</span><br><span class="line">121     &lt;/tr&gt;</span><br><span class="line">122 &lt;/table&gt;</span><br></pre></td></tr></table></figure><p>  <strong>四、Dockerfile 构建 Tomcat</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> 1 # 编辑 Dockerfile</span><br><span class="line"> 2 [root@server ~]# cat Dockerfile</span><br><span class="line"> 3 FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line"> 4 LABEL maintainer=&quot;mj_1028@qq.com&quot;</span><br><span class="line"> 5 RUN rm -f /etc/yum.repos.d/</span><br><span class="line"> 6 ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line"> 7 RUN yum install -y java unzip</span><br><span class="line"> 8 ENV LC_ALL en_US.UTF-8</span><br><span class="line"> 9 ADD apache-tomcat.zip  /root/apache-tomcat.zip</span><br><span class="line">10 RUN unzip /root/apache-tomcat.zip -d /root/</span><br><span class="line">11 EXPOSE 8080</span><br><span class="line">12 RUN chmod u+x /root/apache-tomcat-6/bin/</span><br><span class="line">13 ADD index.html /root/apache-tomcat-6/webapps/ROOT/index.html</span><br><span class="line">14 CMD /root/apache-tomcat-6/bin/catalina.sh</span><br><span class="line">15 </span><br><span class="line">16 # 构建</span><br><span class="line">17 [root@server ~]# docker build -t tomcat:v1.0 .</span><br><span class="line">18 Sending build context to Docker daemon 5.055 MB</span><br><span class="line">19 Step 1 : FROM 192.168.200.51:5000/centos-7:latest</span><br><span class="line">20  ---&gt; 6300524e4fcb</span><br><span class="line">21 Step 2 : LABEL maintainer &quot;mj_1028@qq.com&quot;</span><br><span class="line">22  ---&gt; Using cache</span><br><span class="line">23  ---&gt; 297bb01a36e7</span><br><span class="line">24 Step 3 : RUN rm -f /etc/yum.repos.d/</span><br><span class="line">25  ---&gt; Using cache</span><br><span class="line">26  ---&gt; 5cd2c60db6e4</span><br><span class="line">27 Step 4 : ADD local.repo /etc/yum.repos.d/local.repo</span><br><span class="line">28  ---&gt; Using cache</span><br><span class="line">29  ---&gt; 65c3b9a5e36c</span><br><span class="line">30 Step 5 : RUN yum install -y java unzip</span><br><span class="line">31  ---&gt; Using cache</span><br><span class="line">32  ---&gt; c52f6b212a3e</span><br><span class="line">33 Step 6 : ENV LC_ALL en_US.UTF-8</span><br><span class="line">34  ---&gt; Using cache</span><br><span class="line">35  ---&gt; c79e93ff2f1a</span><br><span class="line">36 Step 7 : ADD apache-tomcat.zip /root/apache-tomcat.zip</span><br><span class="line">37  ---&gt; Using cache</span><br><span class="line">38  ---&gt; 1d9559d21467</span><br><span class="line">39 Step 8 : RUN unzip /root/apache-tomcat.zip -d /root/</span><br><span class="line">40  ---&gt; Using cache</span><br><span class="line">41  ---&gt; cff845220459</span><br><span class="line">42 Step 9 : EXPOSE 8080</span><br><span class="line">43  ---&gt; Using cache</span><br><span class="line">44  ---&gt; 3c7b78ef3e32</span><br><span class="line">45 Step 10 : RUN chmod u+x /root/apache-tomcat-6/bin/</span><br><span class="line">46  ---&gt; Using cache</span><br><span class="line">47  ---&gt; db348be4e9a7</span><br><span class="line">48 Step 11 : ADD index.html /root/apache-tomcat-6/webapps/ROOT/index.html</span><br><span class="line">49  ---&gt; Using cache</span><br><span class="line">50  ---&gt; 8f1be41345b2</span><br><span class="line">51 Step 12 : CMD /root/apache-tomcat-6/bin/catalina.sh</span><br><span class="line">52  ---&gt; Using cache</span><br><span class="line">53  ---&gt; d1fadb90c70f</span><br><span class="line">54 Successfully built d1fadb90c70f57 </span><br><span class="line">58 #  访问并查看JDK及Tomcat版本信息</span><br><span class="line">59 [root@server ~]# curl 192.168.200.51:8080</span><br><span class="line">60 Xiandian WEB</span><br><span class="line">61 </span><br><span class="line">62 bash-4.2# java -version</span><br><span class="line">63 openjdk version &quot;1.8.0_102&quot;</span><br><span class="line">64 OpenJDK Runtime Environment (build 1.8.0_102-b14)</span><br><span class="line">65 OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)</span><br><span class="line">66 </span><br><span class="line">67 bash-4.2# ./version.sh </span><br><span class="line">68 Server version: Apache Tomcat/6.0.20</span><br><span class="line">69 Server built:   May 14 2009 01:13:50</span><br><span class="line">70 Server number:  6.0.20.0</span><br><span class="line">71 OS Name:        Linux</span><br><span class="line">72 OS Version:     3.10.0-229.el7.x86_64</span><br><span class="line">73 Architecture:   amd64</span><br><span class="line">74 JVM Version:    1.8.0_102-b14</span><br><span class="line">75 JVM Vendor:     Oracle Corporation</span><br></pre></td></tr></table></figure><h2 id="常用内容"><a href="#常用内容" class="headerlink" title="常用内容"></a>常用内容</h2><h3 id="设置docker开机自启动，并设置容器自动重启"><a href="#设置docker开机自启动，并设置容器自动重启" class="headerlink" title="设置docker开机自启动，并设置容器自动重启"></a>设置docker开机自启动，并设置容器自动重启</h3><h4 id="设置docker开机启动"><a href="#设置docker开机启动" class="headerlink" title="设置docker开机启动"></a>设置docker开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="查询容器启动情况"><a href="#查询容器启动情况" class="headerlink" title="查询容器启动情况"></a>查询容器启动情况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="设置容器自动重启"><a href="#设置容器自动重启" class="headerlink" title="设置容器自动重启"></a>设置容器自动重启</h3><h4 id="创建容器时设置"><a href="#创建容器时设置" class="headerlink" title="创建容器时设置"></a>创建容器时设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name 设置容器名 使用的镜像</span><br><span class="line">（上面命令  --name后面两个参数根据实际情况自行修改）</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 容器的重启策略如下：</span></span><br><span class="line"> --restart具体参数值详细信息：</span><br><span class="line">       no　　　　　　　 // 默认策略,容器退出时不重启容器；</span><br><span class="line">       on-failure　　  // 在容器非正常退出时（退出状态非0）才重新启动容器；</span><br><span class="line">       on-failure:3    // 在容器非正常退出时重启容器，最多重启3次；</span><br><span class="line">       always　　　　  // 无论退出状态是如何，都重启容器；</span><br><span class="line">       unless-stopped  // 在容器退出时总是重启容器，但是不考虑在 Docker 守护进程启动时就已经停止了的容器。</span><br></pre></td></tr></table></figure><h4 id="修改已有容器，使用update"><a href="#修改已有容器，使用update" class="headerlink" title="修改已有容器，使用update"></a>修改已有容器，使用update</h4><p>如果创建时未指定 --restart&#x3D;always，可通过update 命令设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always 容器ID(或者容器名)</span><br><span class="line">（容器ID或者容器名根据实际情况修改）</span><br></pre></td></tr></table></figure><h3 id="将docker镜像打成tar包导出"><a href="#将docker镜像打成tar包导出" class="headerlink" title="将docker镜像打成tar包导出"></a>将docker镜像打成tar包导出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、docker commit &lt;容器id&gt; &lt;镜像名&gt;:&lt;tag&gt;     ---- 将容器保存成镜像</span><br><span class="line"></span><br><span class="line">保存后 docker images 便可以看到镜像</span><br><span class="line"></span><br><span class="line">2、docker save -o &lt;tar包名&gt;.tar &lt;镜像名&gt;:&lt;tag&gt;      ---- 将镜像保存为.tar文件，默认保存在当前目录</span><br></pre></td></tr></table></figure><h3 id="从tar包中导入docker镜像"><a href="#从tar包中导入docker镜像" class="headerlink" title="从tar包中导入docker镜像"></a>从tar包中导入docker镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、docker load -i &lt;tar包名&gt;.tar     ---- 从 tar 包导入镜像</span><br><span class="line"></span><br><span class="line">导入镜像后，通过 docker images 便可看到导入的镜像。</span><br><span class="line"></span><br><span class="line">2、docker run -itd -p &lt;本地端口&gt;:&lt;容器端口&gt; --restart=always &lt;镜像名&gt;:&lt;tag&gt;    ---- 通过镜像起容器</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker-是什么？&quot;&gt;&lt;a href=&quot;#Docker-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Docker 是什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;Docker 是什么？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    1. Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架包括系统。&lt;/p&gt;
&lt;p&gt;​    2. Docker 是基于Go语言实现的云开源项目，诞生于2013年初，最初是dotCloud公司发起。由镜像(Image)、容器(Container)、仓库(Repository) 三大核心组成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   3. Docker 通过对应用组件的封装、分发、部署、运行等生命周期的管理，达到应用组件级别的“一次封装，到处运行”。这里应用组件，即可以是Web应用，也可以是一套数据库服务，甚至是一个操作系统或编译器。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;为什么要使用-Docker？&quot;&gt;&lt;a href=&quot;#为什么要使用-Docker？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 Docker？&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么要使用 Docker？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    1. Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。&lt;/p&gt;
&lt;p&gt;​    2. 更快速的交付和部署(使用docker，开发人员可以用镜像来快速构建一套标准的开发环境;开发完成之后，测试和运维人员可以直接使用相同环境来部署代码)。&lt;/p&gt;
&lt;p&gt;​    3. 响应式部署和扩展(docker容器几乎可以在任意平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。可以在不同的平台轻松地迁移应用)。&lt;/p&gt;
&lt;p&gt;​    4. 更简单的更新管理(使用Dockerfile，只需要修改小小的配置，就可以替代以往大量的更新工作)。&lt;/p&gt;
&lt;p&gt;​      与传统的虚拟机对比&lt;/p&gt;
&lt;p&gt;​        &lt;a href=&quot;https://img2020.cnblogs.com/blog/1610676/202005/1610676-20200529075343772-1700042586.png&quot;&gt;&lt;img src=&quot;/imgs/1610676-20200529075343772-1700042586.png&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://github.com/jiangjiawei520/categories/docker/"/>
    
    
    <category term="docker" scheme="https://github.com/jiangjiawei520/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之使用github Actions将自动构建并发布静态源码</title>
    <link href="https://github.com/jiangjiawei520/post/912f3dbd.html"/>
    <id>https://github.com/jiangjiawei520/post/912f3dbd.html</id>
    <published>2024-04-19T14:16:26.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动构建并发布"><a href="#自动构建并发布" class="headerlink" title="自动构建并发布"></a>自动构建并发布</h2><p>​   github的action功能，可以使用这个功能代替手工的发布操作。在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI&#x2F;CD），并将操作合并到完全自定义的工作流程中。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><pre><code>首先建立一个Git仓库，这里不再赘述这里我采用了sshkey的形式来进行仓库的操作</code></pre><h3 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C YourCount@example.com</span><br></pre></td></tr></table></figure><h3 id="打开git仓库-添加部署用的私钥"><a href="#打开git仓库-添加部署用的私钥" class="headerlink" title="打开git仓库,添加部署用的私钥"></a>打开git仓库,添加部署用的私钥</h3><p>​  注意添加的secret名称需要唯一，不能于本账号的其他仓库的重复，不然会导致失败。</p><blockquote><p>setting-&gt;secrets-&gt;add new secret</p></blockquote><p><a href="https://i.loli.net/2020/04/16/ePo2EwfZirp9h31.png"><img src="/imgs/ePo2EwfZirp9h31.png" alt="ePo2EwfZirp9h31"></a></p><span id="more"></span><h3 id="添加权限验证的公钥"><a href="#添加权限验证的公钥" class="headerlink" title="添加权限验证的公钥"></a>添加权限验证的公钥</h3><p>​在个人账号的设置里面设置，只用设置一次就行，如果之前设置过，可以跳过本步骤。</p><blockquote><p>setting-&gt;deploy keys-&gt;add deploy key</p></blockquote><p><a href="https://i.loli.net/2020/04/16/UK1lDvTx5PZBM2m.png"><img src="/imgs/UK1lDvTx5PZBM2m.png" alt="UK1lDvTx5PZBM2m"></a></p><p>至此我们的仓库准备工作就已经完成</p><h2 id="编写action发布文件"><a href="#编写action发布文件" class="headerlink" title="编写action发布文件"></a>编写action发布文件</h2><blockquote><p>action-&gt;set up a new workflow file</p></blockquote><p>可以看到下方有很多发布模板供我们选择</p><p>此次我们自己来进行编写</p><p><a href="https://i.loli.net/2020/04/16/LHfVB3gmRvQ18se.png"><img src="/imgs/LHfVB3gmRvQ18se.png" alt="LHfVB3gmRvQ18se"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">name: auto publish #发布名称</span><br><span class="line"></span><br><span class="line">on:  </span><br><span class="line">  push: #触发方式</span><br><span class="line">    branches: </span><br><span class="line">      - master #触发分支</span><br><span class="line"></span><br><span class="line">jobs: #脚本内容</span><br><span class="line">  build-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v1</span><br><span class="line">    - run: npm ci</span><br><span class="line">    - run: npm install vuepress</span><br><span class="line">    - run: npm run build</span><br><span class="line">    - run: cp CNAME .vuepress/dist/ #指定gitpage的自定义域名</span><br><span class="line">    </span><br><span class="line">    - name: Deploy</span><br><span class="line">      uses: peaceiris/actions-gh-pages@v2.5.0</span><br><span class="line">      env:</span><br><span class="line">        ACTIONS_DEPLOY_KEY: $&#123;&#123;secrets.ACCESS_TOKEN&#125;&#125; #这里引用的是刚才生成的私钥</span><br><span class="line">        PUBLISH_BRANCH: gh-pages #发布到的分支</span><br><span class="line">        PUBLISH_DIR: .vuepress/dist #需要发布的内容</span><br></pre></td></tr></table></figure><p>下面我们每次对master分支的推送都会触发该发布流程</p><p>该发布流程会自动构建vuepress项目并把生成的文件发布到当前项目的gh-pages分支下</p><h2 id="自动构建并发布到另一仓库"><a href="#自动构建并发布到另一仓库" class="headerlink" title="自动构建并发布到另一仓库"></a>自动构建并发布到另一仓库</h2><p>​新的需求 <strong>自动构建后发布到不同的仓库</strong>。</p><h3 id="正文-1"><a href="#正文-1" class="headerlink" title="正文"></a>正文</h3><p>我们直接新建一个yml发布文件</p><p>在系统给我们生成的文件中我们可以看到基础语法的介绍</p><p>这里我结合自己的理解标注一下</p><p>在进行解读之前我们先了解一下基本概念</p><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul><li>workflow (工作流程)</li><li>job (任务) 一个workflow可以由多个不同的job组成</li><li>step (步骤) 每个job可以由多个step来组成</li><li>action(动作) 每个step又可以由多个action来组成</li></ul><h3 id="Action市场"><a href="#Action市场" class="headerlink" title="Action市场"></a>Action市场</h3><p>由于持续集成大家的需求大部分可能都是相同的操作</p><p>所以github建立了一个Action市场</p><p>使得每个人编写的Action脚本都可以被其他人来引用</p><p>这就使得当我这种彩笔小白想要使用这些功能的时候而不用写出很复杂的脚本</p><p>而这整个持续集成的过程也就成为了不同的Action相组合的产物</p><p>使用方法也很简单，只需要使用<code>uses</code>关键字直接引用别人的库即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uses userName/repoName</span><br></pre></td></tr></table></figure><h3 id="结合模板"><a href="#结合模板" class="headerlink" title="结合模板"></a>结合模板</h3><p>然后我们来结合系统生成的基础模板来进行基本的解读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># This is a basic workflow to help you get started with Actions</span><br><span class="line"></span><br><span class="line">name: CI  # 构建流程的名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">on: #触发该流程的方式</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]  #触犯该流程的分支</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  # 该任务当前仅包含了一个任务  名称是build</span><br><span class="line">  build:    </span><br><span class="line">    runs-on: ubuntu-latest #任务锁运行的工作环境</span><br><span class="line"></span><br><span class="line">    # 该任务所包含的步骤</span><br><span class="line">    steps:</span><br><span class="line">    # 步骤所依赖的操作库 这里引用了官方发布的git操作库 目的是拉取当前库的代码</span><br><span class="line">    - uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">    # 这里是一个单行命令的模板</span><br><span class="line">    - name: Run a one-line script</span><br><span class="line">      run: echo Hello, world!</span><br><span class="line"></span><br><span class="line">    # 这里是一个多行命令的模板</span><br><span class="line">    - name: Run a multi-line script</span><br><span class="line">      run: |</span><br><span class="line">        echo Add other actions to build,</span><br><span class="line">        echo test, and deploy your project.</span><br></pre></td></tr></table></figure><h3 id="用已有的库进行持续集成-当前库构建发布到另外的库"><a href="#用已有的库进行持续集成-当前库构建发布到另外的库" class="headerlink" title="用已有的库进行持续集成(当前库构建发布到另外的库)"></a>用已有的库进行持续集成(当前库构建发布到另外的库)</h3><p>到这里我们就可以开始进行自己的Action的组装了</p><p>首先我们先找一个有发布到其他Git库功能的Action</p><p>我们可以在github的市场搜索自己需要的Action</p><p><a href="https://i.loli.net/2020/04/17/MFcPRLTway742pE.png"><img src="/imgs/MFcPRLTway742pE.png" alt="MFcPRLTway742pE"></a></p><p>这里我使用的是<code>s0/git-publish-subdir-action@master</code></p><p>点开这个库的主页我们可以在下方看到该库的使用说明</p><p>这里就不在赘述了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">name: AutoBuild</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ OneKeyVip-master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ OneKeyVip-master ]</span><br><span class="line">jobs:</span><br><span class="line">  </span><br><span class="line">  build:</span><br><span class="line">    name: build</span><br><span class="line">    runs-on: ubuntu-latest    </span><br><span class="line">    steps:    </span><br><span class="line">    - uses: actions/checkout@v2    </span><br><span class="line">    - name: npm install</span><br><span class="line">      run: |</span><br><span class="line">        npm install</span><br><span class="line">        npm ci</span><br><span class="line">    - name: npm build</span><br><span class="line">      run: |</span><br><span class="line">       npm run build</span><br><span class="line">       cp README.MD ./publish/README.MD #可选</span><br><span class="line">       cp CHANGELOG ./publish/CHANGELOG #可选</span><br><span class="line"></span><br><span class="line">    - name: publish</span><br><span class="line">      uses: s0/git-publish-subdir-action@master</span><br><span class="line">      env:</span><br><span class="line">        REPO: 目标库</span><br><span class="line">        BRANCH: 目标分支</span><br><span class="line">        FOLDER: 要发布的内容所在的文件夹        </span><br><span class="line">        SSH_PRIVATE_KEY: $&#123;&#123; secrets.publish &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Repository-not-found"><a href="#Repository-not-found" class="headerlink" title="Repository not found."></a>Repository not found.</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo b</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start backup: git</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">ERROR: Repository not found.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">INFO  Backup done: git</span><br></pre></td></tr></table></figure><p>删除.git目录，重新执行hexo b</p><p>检查添加命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">检查已有分支</span><br><span class="line">git remote -v</span><br><span class="line">gitee   git@gitee.com:jiangjiawei520172/person_blog_new.git (fetch)</span><br><span class="line">gitee   git@gitee.com:jiangjiawei520172/person_blog_new.git (push)</span><br><span class="line">github  git@github.com:jiangjiawei520/person_blog_new.git (fetch)</span><br><span class="line">github  git@github.com:jiangjiawei520/person_blog_new.git (push)</span><br><span class="line">github_source   git@github.com:jiangjiawei520/person_blog_new_source.git (fetch)</span><br><span class="line">github_source   git@github.com:jiangjiawei520/person_blog_new_source.git (push)</span><br><span class="line"></span><br><span class="line">如无gitee、github_source则添加，github未启动（查询站点根目录_config.yml配置文件backup下的repository参数）</span><br><span class="line">git remote add gitee/github/github_source git@xxx.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;自动构建并发布&quot;&gt;&lt;a href=&quot;#自动构建并发布&quot; class=&quot;headerlink&quot; title=&quot;自动构建并发布&quot;&gt;&lt;/a&gt;自动构建并发布&lt;/h2&gt;&lt;p&gt;​   github的action功能，可以使用这个功能代替手工的发布操作。在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI&amp;#x2F;CD），并将操作合并到完全自定义的工作流程中。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;首先建立一个Git仓库，这里不再赘述

这里我采用了sshkey的形式来进行仓库的操作
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;生成ssh密钥&quot;&gt;&lt;a href=&quot;#生成ssh密钥&quot; class=&quot;headerlink&quot; title=&quot;生成ssh密钥&quot;&gt;&lt;/a&gt;生成ssh密钥&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C YourCount@example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;打开git仓库-添加部署用的私钥&quot;&gt;&lt;a href=&quot;#打开git仓库-添加部署用的私钥&quot; class=&quot;headerlink&quot; title=&quot;打开git仓库,添加部署用的私钥&quot;&gt;&lt;/a&gt;打开git仓库,添加部署用的私钥&lt;/h3&gt;&lt;p&gt;​	  注意添加的secret名称需要唯一，不能于本账号的其他仓库的重复，不然会导致失败。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;setting-&amp;gt;secrets-&amp;gt;add new secret&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://i.loli.net/2020/04/16/ePo2EwfZirp9h31.png&quot;&gt;&lt;img src=&quot;/imgs/ePo2EwfZirp9h31.png&quot; alt=&quot;ePo2EwfZirp9h31&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
    <category term="github" scheme="https://github.com/jiangjiawei520/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+yilia添加隐藏左边栏目按钮</title>
    <link href="https://github.com/jiangjiawei520/post/2af8072d.html"/>
    <id>https://github.com/jiangjiawei520/post/2af8072d.html</id>
    <published>2024-04-18T18:16:26.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<p>效果图：<br><img src="/imgs/image-1573145229532.png" alt="file"></p><p>点击按钮时，缩进左侧边栏，再次点击再弹出来。</p><h2 id="添加隐藏左边栏目按钮"><a href="#添加隐藏左边栏目按钮" class="headerlink" title="添加隐藏左边栏目按钮"></a>添加隐藏左边栏目按钮</h2><p>参考：<a href="https://cqh-i.github.io/2019/08/07/hexo-yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9A%90%E8%97%8F%E5%B7%A6%E8%BE%B9%E6%A0%8F%E7%9B%AE%E6%8C%89%E9%92%AE/">添加隐藏左边栏目按钮</a></p><p>折腾了一个下午,终于把隐藏左边侧边栏目的效果实现了. 实现了点击按钮隐藏侧边栏, 查找和修改源码实在是太麻烦了.</p><h3 id="制作按钮样式"><a href="#制作按钮样式" class="headerlink" title="制作按钮样式"></a>制作按钮样式</h3><p>先找一款你喜欢的CSS菜单按钮切换,或者自己实现一个,我在网上找到一款比较<a href="https://c.runoob.com/codedemo/3156">简单的样式</a>,稍微做了下修改.</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">.mymenucontainer &#123;</span><br><span class="line">display:block;</span><br><span class="line">cursor:pointer;</span><br><span class="line">left:0;</span><br><span class="line">top:0;</span><br><span class="line">width:35px;</span><br><span class="line">height:35px;</span><br><span class="line">z-index:9999;</span><br><span class="line">position:fixed;</span><br><span class="line">&#125;</span><br><span class="line">.bar1 &#123;</span><br><span class="line">width:35px;</span><br><span class="line">height:3px;</span><br><span class="line">background-color:#333;</span><br><span class="line">margin:6px 0;</span><br><span class="line">transition:0.4s;</span><br><span class="line">-webkit-transform:rotate(-45deg) translate(-8px,8px);</span><br><span class="line">transform:rotate(-45deg) translate(-8px,8px);</span><br><span class="line">&#125;</span><br><span class="line">.bar2 &#123;</span><br><span class="line">width:35px;</span><br><span class="line">height:3px;</span><br><span class="line">background-color:#333;</span><br><span class="line">margin:6px 0;</span><br><span class="line">transition:0.4s;</span><br><span class="line">opacity:0;</span><br><span class="line">&#125;</span><br><span class="line">.bar3 &#123;</span><br><span class="line">width:35px;</span><br><span class="line">height:3px;</span><br><span class="line">background-color:#333;</span><br><span class="line">margin:6px 0;</span><br><span class="line">transition:0.4s;</span><br><span class="line">-webkit-transform:rotate(45deg) translate(-4px,-6px);</span><br><span class="line">transform:rotate(45deg) translate(-4px,-6px);</span><br><span class="line">&#125;</span><br><span class="line">.change .bar1 &#123;</span><br><span class="line">-webkit-transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">&#125;</span><br><span class="line">.change .bar2 &#123;</span><br><span class="line">opacity:1;</span><br><span class="line">&#125;</span><br><span class="line">.change .bar3 &#123;</span><br><span class="line">-webkit-transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">transform:rotate(0deg) translate(0px,0px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样式制作完成后,压缩,然后添加进<code>themes\new-yilia\source\css\main.0cf68a.css</code>文件中,添加在最上面即可（否则下面兼容移动端会取不到mymenucontainer）</p><h3 id="添加按钮到相应的位置"><a href="#添加按钮到相应的位置" class="headerlink" title="添加按钮到相应的位置"></a>添加按钮到相应的位置</h3><p>打开<code>themes\new-yilia\layout\layout.ejs</code>文件, 找到<code>&lt;div class=&quot;left-col&quot;</code>,在其上面添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;mymenucontainer&quot; onclick=&quot;myFunction(this)&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在<code>&lt;/body&gt;</code>之后, <code>&lt;/html&gt;</code>前添加如下Js代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var hide = false;</span><br><span class="line">    function myFunction(x) &#123;</span><br><span class="line">        x.classList.toggle(&quot;change&quot;);</span><br><span class="line">        if(hide == false)&#123;</span><br><span class="line">            $(&quot;.left-col&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;);</span><br><span class="line">            $(&quot;.mid-col&quot;).css(&quot;left&quot;, 6);</span><br><span class="line">            $(&quot;.tools-col&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;);</span><br><span class="line">            $(&quot;.tools-col.hide&quot;).css(&#x27;display&#x27;, &#x27;none&#x27;);</span><br><span class="line">            hide = true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $(&quot;.left-col&quot;).css(&#x27;display&#x27;, &#x27;&#x27;);</span><br><span class="line">            $(&quot;.mid-col&quot;).css(&quot;left&quot;, 300);</span><br><span class="line">            $(&quot;.tools-col&quot;).css(&#x27;display&#x27;, &#x27;&#x27;);</span><br><span class="line">            $(&quot;.tools-col.hide&quot;).css(&#x27;display&#x27;, &#x27;&#x27;);</span><br><span class="line">            hide = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>重新生成文件,部署即可看到效果, 可以看看<a href="https://cqh-i.github.io/">我的博客</a>效果</p><p>效果图：<br><img src="/imgs/image-1573143726040.png" alt="file"></p><blockquote><p>引用结束</p></blockquote><h3 id="响应式：手机端隐藏按钮"><a href="#响应式：手机端隐藏按钮" class="headerlink" title="响应式：手机端隐藏按钮"></a>响应式：手机端隐藏按钮</h3><p>手机端(当页面变小时)隐藏按钮：修改文件：<code>themes\new-yilia\source\css\main.0cf68a.css</code>，找到<code>@media screen and (max-width:800px)</code>下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">    #container, body, html &#123;</span><br><span class="line">        height:auto;</span><br><span class="line">        overflow-x:hidden;</span><br><span class="line">        overflow-y:auto</span><br><span class="line">    &#125;</span><br><span class="line">    #mobile-nav &#123;</span><br><span class="line">        display:block</span><br><span class="line">    &#125;</span><br><span class="line">    .body-wrap &#123;</span><br><span class="line">        margin-bottom:0</span><br><span class="line">    &#125;</span><br><span class="line">    .left-col&#123;</span><br><span class="line">        display:none</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>.left-col</code>中添加一个按钮的标签（需要确保上面pc端添加的mymenucontainer样式在本样式下面）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left-col,.mymenucontainer &#123;</span><br><span class="line">    display:none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🐛bug"><a href="#🐛bug" class="headerlink" title="🐛bug"></a>🐛bug</h2><p>有个小问题：在PC端进行测试时，如果先尝试缩放，然后返回再展开，直接测试手机端，就会出现问题：按钮仍然撑开界面；但是如果进到页面直接测试手机端就不会这种问题（或者是在缩放后进行测试也不会影响）。</p><p>因为这个问题好像影响不是很大，就不深入了。</p><p><strong>本文链接：</strong> <a href="https://yansheng836.bitbucket.io/article/31bbdc67.html">https://yansheng836.bitbucket.io/article/31bbdc67.html</a><br><strong>版权声明：</strong> 本作品采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议进行许可。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;效果图：&lt;br&gt;&lt;img src=&quot;/imgs/image-1573145229532.png&quot; alt=&quot;file&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击按钮时，缩进左侧边栏，再次点击再弹出来。&lt;/p&gt;
&lt;h2 id=&quot;添加隐藏左边栏目按钮&quot;&gt;&lt;a href=&quot;#添加隐藏左边栏目按钮&quot; class=&quot;headerlink&quot; title=&quot;添加隐藏左边栏目按钮&quot;&gt;&lt;/a&gt;添加隐藏左边栏目按钮&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;https://cqh-i.github.io/2019/08/07/hexo-yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9A%90%E8%97%8F%E5%B7%A6%E8%BE%B9%E6%A0%8F%E7%9B%AE%E6%8C%89%E9%92%AE/&quot;&gt;添加隐藏左边栏目按钮&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;折腾了一个下午,终于把隐藏左边侧边栏目的效果实现了. 实现了点击按钮隐藏侧边栏, 查找和修改源码实在是太麻烦了.&lt;/p&gt;
&lt;h3 id=&quot;制作按钮样式&quot;&gt;&lt;a href=&quot;#制作按钮样式&quot; class=&quot;headerlink&quot; title=&quot;制作按钮样式&quot;&gt;&lt;/a&gt;制作按钮样式&lt;/h3&gt;&lt;p&gt;先找一款你喜欢的CSS菜单按钮切换,或者自己实现一个,我在网上找到一款比较&lt;a href=&quot;https://c.runoob.com/codedemo/3156&quot;&gt;简单的样式&lt;/a&gt;,稍微做了下修改.&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用hexo-neat插件压缩页面静态资源</title>
    <link href="https://github.com/jiangjiawei520/post/bbc1a57.html"/>
    <id>https://github.com/jiangjiawei520/post/bbc1a57.html</id>
    <published>2024-04-18T18:04:33.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章针对下面的几个话题进行了讲解： 为什么要压缩页面静态资源， hexo的压缩静态资源插件， 如何使用hexo-neat。</p><h2 id="为什么要压缩页面静态资源"><a href="#为什么要压缩页面静态资源" class="headerlink" title="为什么要压缩页面静态资源"></a>为什么要压缩页面静态资源</h2><p>对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。</p><p>那么怎么提高hexo这个静态博客的页面加载速度呢？可以从以下的几个方面去入手：</p><ol><li>将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。</li><li>尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。</li><li>对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。</li></ol><h2 id="hexo的压缩静态资源插件"><a href="#hexo的压缩静态资源插件" class="headerlink" title="hexo的压缩静态资源插件"></a>hexo的压缩静态资源插件</h2><p>网上有很多相关的博文，常规的做法是使用<code>gulp</code>来进行压缩，<code>gulp</code>是<code>Node.js</code>下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。</p><p>使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下<a href="https://segmentfault.com/a/1190000009544924#articleHeader8">相关的东西</a>。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。</p><p>这里我选择的是由rozbo大佬开发的<code>hexo-neat</code>压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！</p><span id="more"></span><h2 id="如何使用hexo-neat"><a href="#如何使用hexo-neat" class="headerlink" title="如何使用hexo-neat"></a>如何使用hexo-neat</h2><h3 id="在站点根目录下安装hexo-neat"><a href="#在站点根目录下安装hexo-neat" class="headerlink" title="在站点根目录下安装hexo-neat"></a>在站点根目录下安装hexo-neat</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p><strong>为站点配置文件添加相关配置</strong></p><p>下边是我自己站点的相关配置，直接添加到站点配置文件<code>_config.yml</code>的末尾就可以。可以按照自己的需求去自定义配置，不过有些注意事项，可以参考我后文的踩坑记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.js&#x27;</span><br><span class="line">    - &#x27;**/jquery.fancybox.pack.js&#x27;</span><br><span class="line">    - &#x27;**/index.js&#x27;</span><br></pre></td></tr></table></figure><h2 id="hexo-neat插件踩坑记录"><a href="#hexo-neat插件踩坑记录" class="headerlink" title="hexo-neat插件踩坑记录"></a>hexo-neat插件踩坑记录</h2><p>由于在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是我就开始捣鼓跳过哪些文件可以让效率更高。在鼓捣了一段时间之后，记录下使用该插件的一些注意事项，避免日后重蹈覆辙，也希望能对各位看官有所帮助。</p><h3 id="跳过压缩文件的正确配置方式"><a href="#跳过压缩文件的正确配置方式" class="headerlink" title="跳过压缩文件的正确配置方式"></a>跳过压缩文件的正确配置方式</h3><p>如果按照官方插件的文档说明来配置<code>exclude</code>，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;</span><br></pre></td></tr></table></figure><p><strong>压缩html时不要跳过</strong><code>.md</code><strong>文件</strong></p><p><code>.md</code>文件就是我们写文章时的markdown文件，如果跳过压缩<code>.md</code>文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p><p>当初为了找到这个原因花了我两个晚上的时间，简直是夜不能寐。</p><h3 id="压缩html时不要跳过-swig文件"><a href="#压缩html时不要跳过-swig文件" class="headerlink" title="压缩html时不要跳过.swig文件"></a>压缩html时不要跳过<code>.swig</code>文件</h3><p><code>.swig</code>文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/rozbo/hexo-neat">GitHub项目地址</a></li><li><a href="https://segmentfault.com/a/1190000008082288">hexo博客压缩优化</a></li><li><a href="https://segmentfault.com/a/1190000005799759">Hexo-Neat介绍</a></li></ol><hr><p>版权声明：本文为博主<a href="https://blog.csdn.net/lewky_liu">雨临Lewis</a>原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC 4.0 by-sa</a> 版权协议，转载请附上原文出处链接和本声明。</p><p>本文链接：<a href="https://blog.csdn.net/lewky_liu/article/details/82432003">https://blog.csdn.net/lewky_liu&#x2F;article&#x2F;details&#x2F;82432003</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章针对下面的几个话题进行了讲解： 为什么要压缩页面静态资源， hexo的压缩静态资源插件， 如何使用hexo-neat。&lt;/p&gt;
&lt;h2 id=&quot;为什么要压缩页面静态资源&quot;&gt;&lt;a href=&quot;#为什么要压缩页面静态资源&quot; class=&quot;headerlink&quot; title=&quot;为什么要压缩页面静态资源&quot;&gt;&lt;/a&gt;为什么要压缩页面静态资源&lt;/h2&gt;&lt;p&gt;对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。&lt;/p&gt;
&lt;p&gt;那么怎么提高hexo这个静态博客的页面加载速度呢？可以从以下的几个方面去入手：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。&lt;/li&gt;
&lt;li&gt;尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。&lt;/li&gt;
&lt;li&gt;对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;hexo的压缩静态资源插件&quot;&gt;&lt;a href=&quot;#hexo的压缩静态资源插件&quot; class=&quot;headerlink&quot; title=&quot;hexo的压缩静态资源插件&quot;&gt;&lt;/a&gt;hexo的压缩静态资源插件&lt;/h2&gt;&lt;p&gt;网上有很多相关的博文，常规的做法是使用&lt;code&gt;gulp&lt;/code&gt;来进行压缩，&lt;code&gt;gulp&lt;/code&gt;是&lt;code&gt;Node.js&lt;/code&gt;下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。&lt;/p&gt;
&lt;p&gt;使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下&lt;a href=&quot;https://segmentfault.com/a/1190000009544924#articleHeader8&quot;&gt;相关的东西&lt;/a&gt;。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。&lt;/p&gt;
&lt;p&gt;这里我选择的是由rozbo大佬开发的&lt;code&gt;hexo-neat&lt;/code&gt;压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo+yilia(new-yilia)使用hexo-generator-search插件集成本地搜索</title>
    <link href="https://github.com/jiangjiawei520/post/613d6936.html"/>
    <id>https://github.com/jiangjiawei520/post/613d6936.html</id>
    <published>2024-04-18T17:43:32.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<p>yilia主题也有集成搜索功能，不过它使用的搜索是基于标题和标签的，有一定的局限性，没有提供全文检索功能。这篇文章介绍的就是集成全文检索和今日诗词。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/imgs/20200411232312.png"></p><p>动图<br><img src="/imgs/hexo-yilia-local-search2.gif"></p><h2 id="1-集成本地搜索"><a href="#1-集成本地搜索" class="headerlink" title="1.集成本地搜索"></a>1.集成本地搜索</h2><p>参考：为 Hexo 博客增加一个站内搜索：<a href="https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/">https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/</a></p><p><img src="/imgs/20200411214252.png"></p><h3 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h3><p>使用<code>hexo-generator-search</code>插件为文章生成一个全局的<code>search.xml</code>，里面包含所有文章的内容（可配置）。然后再去这个文件中搜索关键字，以此来找到需要的文章。</p><span id="more"></span><h3 id="1-1安装插件"><a href="#1-1安装插件" class="headerlink" title="1.1安装插件"></a>1.1安装插件</h3><p><a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><p>安装分为两步，首先通过 npm 将插件安装到本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后在主题new-yilia的（<code>_config.yml</code>）配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: all</span><br></pre></td></tr></table></figure><ul><li><code>path</code>，生成的路径，上述配置后可以通过 <code>/search.xml</code> 访问到文。</li><li><code>field</code>，用来配置全局检索的区间，可以是 <code>post/page/all</code>。</li></ul><p>重新clean、测试，就可以访问：<a href="http://localhost:4000/search.xml">http://localhost:4000/search.xml</a> 了。</p><h3 id="1-2为网页添加搜索栏"><a href="#1-2为网页添加搜索栏" class="headerlink" title="1.2为网页添加搜索栏"></a>1.2为网页添加搜索栏</h3><p>参考了博主的代码：<a href="https://github.com/barretlee/hexo-search-plugin-snippets">https://github.com/barretlee/hexo-search-plugin-snippets</a></p><h4 id="1-2-1添加搜索框"><a href="#1-2-1添加搜索框" class="headerlink" title="1.2.1添加搜索框"></a>1.2.1添加搜索框</h4><p>在<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\layout\layout.ejs</code>的<code>&lt;div id=&quot;wrapper&quot; class=&quot;body-wrap&quot;&gt;</code>上面添加如下代码（同时添加了‘今日诗词’）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.search) &#123; %&gt;</span><br><span class="line">&lt;div class=&quot;page-header&quot; style=&quot;&quot;&gt;</span><br><span class="line">    &lt;%# 今日诗词网址： https://www.jinrishici.com/ %&gt;</span><br><span class="line">    &lt;span&gt;🍻  </span><br><span class="line">        &lt;span id=&quot;jinrishici-sentence&quot; title=&quot;今日诗词&quot;&gt;正在加载今日诗词....&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%# 《集成本地搜索 %&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/js/search.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;span id=&quot;local-search&quot; class=&quot;local-search local-search-plugin&quot; style=&quot;&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;search&quot; placeholder=&quot;站内搜索&quot; id=&quot;local-search-input&quot; class=&quot;local-search-input-cls&quot; style=&quot;&quot;&gt;</span><br><span class="line">      &lt;i id=&quot;local-search-icon-search&quot; class=&quot;icon&quot; aria-hidden=&quot;true&quot; title=&quot;站内搜索&quot;&gt;🔍&lt;/i&gt;</span><br><span class="line">      &lt;div id=&quot;local-search-result&quot; class=&quot;local-search-result-cls&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        if ($(&#x27;.local-search&#x27;).size()) &#123;</span><br><span class="line">          $.getScript(&#x27;/js/search.js&#x27;, function() &#123;</span><br><span class="line">            searchFunc(&quot;/search.xml&quot;, &#x27;local-search-input&#x27;, &#x27;local-search-result&#x27;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;%# 集成本地搜索》 %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">...上面添加，这段和注释去掉</span><br><span class="line">  &lt;div id=&quot;wrapper&quot; class=&quot;body-wrap&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-2添加js脚本"><a href="#1-2-2添加js脚本" class="headerlink" title="1.2.2添加js脚本"></a>1.2.2添加js脚本</h4><p>新建文件：<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\js\search.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">// A local search script with the help of hexo-generator-search</span><br><span class="line">// Copyright (C) 2015 </span><br><span class="line">// Joseph Pan &lt;http://github.com/wzpan&gt;</span><br><span class="line">// Shuhao Mao &lt;http://github.com/maoshuhao&gt;</span><br><span class="line">// This library is free software; you can redistribute it and/or modify</span><br><span class="line">// it under the terms of the GNU Lesser General Public License as</span><br><span class="line">// published by the Free Software Foundation; either version 2.1 of the</span><br><span class="line">// License, or (at your option) any later version.</span><br><span class="line">// </span><br><span class="line">// This library is distributed in the hope that it will be useful, but</span><br><span class="line">// WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="line">// Lesser General Public License for more details.</span><br><span class="line">// </span><br><span class="line">// You should have received a copy of the GNU Lesser General Public</span><br><span class="line">// License along with this library; if not, write to the Free Software</span><br><span class="line">// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span><br><span class="line">// 02110-1301 USA</span><br><span class="line">// </span><br><span class="line"></span><br><span class="line">var searchFunc = function (path, search_id, content_id) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    var BTN = &quot;&lt;i id=&#x27;local-search-close&#x27;&gt;x&lt;/i&gt;&quot;;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: path,</span><br><span class="line">        dataType: &quot;xml&quot;,</span><br><span class="line">        success: function (xmlResponse) &#123;</span><br><span class="line">            // get the contents from search data</span><br><span class="line">            var datas = $(&quot;entry&quot;, xmlResponse).map(function () &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    title: $(&quot;title&quot;, this).text(),</span><br><span class="line">                    content: $(&quot;content&quot;, this).text(),</span><br><span class="line">                    url: $(&quot;url&quot;, this).text()</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;).get();</span><br><span class="line"></span><br><span class="line">            var $input = document.getElementById(search_id);</span><br><span class="line">            var $resultContent = document.getElementById(content_id);</span><br><span class="line"></span><br><span class="line">            $input.addEventListener(&#x27;input&#x27;, function () &#123;</span><br><span class="line">                var str = &#x27;&lt;ul class=\&quot;search-result-list\&quot;&gt;&#x27;;</span><br><span class="line">                var keywords = this.value.trim().toLowerCase().split(/[\s\-]+/);</span><br><span class="line">                $resultContent.innerHTML = &quot;&quot;;</span><br><span class="line">                if (this.value.trim().length &lt;= 0) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                // perform local searching</span><br><span class="line">                datas.forEach(function (data) &#123;</span><br><span class="line">                    var isMatch = true;</span><br><span class="line">                    var content_index = [];</span><br><span class="line">                    if (!data.title || data.title.trim() === &#x27;&#x27;) &#123;</span><br><span class="line">                        data.title = &quot;Untitled&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    var data_title = data.title.trim().toLowerCase();</span><br><span class="line">                    var data_content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;).toLowerCase();</span><br><span class="line">                    var data_url = data.url;</span><br><span class="line">                    var index_title = -1;</span><br><span class="line">                    var index_content = -1;</span><br><span class="line">                    var first_occur = -1;</span><br><span class="line">                    // only match artiles with not empty contents</span><br><span class="line">                    if (data_content !== &#x27;&#x27;) &#123;</span><br><span class="line">                        keywords.forEach(function (keyword, i) &#123;</span><br><span class="line">                            index_title = data_title.indexOf(keyword);</span><br><span class="line">                            index_content = data_content.indexOf(keyword);</span><br><span class="line"></span><br><span class="line">                            if (index_title &lt; 0 &amp;&amp; index_content &lt; 0) &#123;</span><br><span class="line">                                isMatch = false;</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                if (index_content &lt; 0) &#123;</span><br><span class="line">                                    index_content = 0;</span><br><span class="line">                                &#125;</span><br><span class="line">                                if (i == 0) &#123;</span><br><span class="line">                                    first_occur = index_content;</span><br><span class="line">                                &#125;</span><br><span class="line">                                // content_index.push(&#123;index_content:index_content, keyword_len:keyword_len&#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        isMatch = false;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // show search results</span><br><span class="line">                    if (isMatch) &#123;</span><br><span class="line">                        str += &quot;&lt;li&gt;&lt;a href=&#x27;&quot; + data_url +</span><br><span class="line">                            &quot;&#x27; class=&#x27;search-result-title&#x27;&gt;&quot; + data_title + &quot;&lt;/a&gt;&quot;;</span><br><span class="line">                        var content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;);</span><br><span class="line">                        if (first_occur &gt;= 0) &#123;</span><br><span class="line">                            // cut out 100 characters</span><br><span class="line">                            var start = first_occur - 20;</span><br><span class="line">                            var end = first_occur + 80;</span><br><span class="line"></span><br><span class="line">                            if (start &lt; 0) &#123;</span><br><span class="line">                                start = 0;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            if (start == 0) &#123;</span><br><span class="line">                                end = 100;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            if (end &gt; content.length) &#123;</span><br><span class="line">                                end = content.length;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            var match_content = content.substr(start, end);</span><br><span class="line"></span><br><span class="line">                            // highlight all keywords</span><br><span class="line">                            keywords.forEach(function (keyword) &#123;</span><br><span class="line">                                var regS = new RegExp(keyword, &quot;gi&quot;);</span><br><span class="line">                                match_content = match_content.replace(regS,</span><br><span class="line">                                    &quot;&lt;em class=\&quot;search-keyword\&quot;&gt;&quot; +</span><br><span class="line">                                    keyword + &quot;&lt;/em&gt;&quot;);</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                            str += &quot;&lt;p class=\&quot;search-result\&quot;&gt;&quot; + match_content +</span><br><span class="line">                                &quot;...&lt;/p&gt;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                        str += &quot;&lt;/li&gt;&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                str += &quot;&lt;/ul&gt;&quot;;</span><br><span class="line">                if (str.indexOf(&#x27;&lt;li&gt;&#x27;) === -1) &#123;</span><br><span class="line">                    return $resultContent.innerHTML = BTN +</span><br><span class="line">                        &quot;&lt;ul&gt;&lt;span class=&#x27;local-search-empty&#x27;&gt;没有找到内容，更换下搜索词试试吧~&lt;span&gt;&lt;/ul&gt;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                $resultContent.innerHTML = BTN + str;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(document).on(&#x27;click&#x27;, &#x27;#local-search-close&#x27;, function () &#123;</span><br><span class="line">        $(&#x27;#local-search-input&#x27;).val(&#x27;&#x27;);</span><br><span class="line">        $(&#x27;#local-search-result&#x27;).html(&#x27;&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(document).on(&#x27;focus&#x27;, &#x27;#local-search&#x27;, function () &#123;</span><br><span class="line">        $(&#x27;#local-search-icon-search&#x27;).html(&#x27;❌&#x27;);</span><br><span class="line">        $(&#x27;#local-search-icon-search&#x27;).attr(&#x27;id&#x27;, &#x27;local-search-icon-close&#x27;);</span><br><span class="line">        //console.log(&quot;66666&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(document).on(&#x27;click&#x27;, &#x27;#local-search-icon-close&#x27;, function () &#123;</span><br><span class="line">        $(&#x27;#local-search-input&#x27;).val(&#x27;&#x27;);</span><br><span class="line">        $(&#x27;#local-search-result&#x27;).html(&#x27;&#x27;);</span><br><span class="line">        $(&#x27;#local-search-icon-close&#x27;).html(&#x27;🔍&#x27;);</span><br><span class="line">        $(&#x27;#local-search-icon-close&#x27;).attr(&#x27;id&#x27;, &#x27;local-search-icon-search&#x27;);</span><br><span class="line">        //console.log(&quot;1111&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3添加样式文件"><a href="#1-2-3添加样式文件" class="headerlink" title="1.2.3添加样式文件"></a>1.2.3添加样式文件</h4><p>1.新建：<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\search.css</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">.local-search &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    text-align: left;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    margin-bottom: 0px;</span><br><span class="line">    right:10%;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    /* margin: 10px 0; */</span><br><span class="line">    padding: 8px 12px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    border: 2px solid #5ad1ed;</span><br><span class="line">    color: #666;</span><br><span class="line">    font-size: 14px</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls::-webkit-input-placeholder &#123;</span><br><span class="line">    color: #2d2626;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls::-moz-input-placeholder &#123;</span><br><span class="line">    color: #2d2626;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-input-cls::-ms-input-placeholder &#123;</span><br><span class="line">    color: #2d2626;</span><br><span class="line">&#125;</span><br><span class="line">#local-search-close &#123;</span><br><span class="line">    content:&#x27;x&#x27;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 10px;</span><br><span class="line">    top: 10px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    color: #888;</span><br><span class="line">    border-radius: 100%;</span><br><span class="line">    line-height: 16px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: consolas;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    font-style: normal;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    transform: rotateZ(0);</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">#local-search-close:hover &#123;</span><br><span class="line">    border-color: #666;</span><br><span class="line">    color: #222;</span><br><span class="line">    transform: rotateZ(180deg);</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 99;</span><br><span class="line">    width: 400px;</span><br><span class="line">    /* top: 50px; */</span><br><span class="line">    right: -16px;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls .local-search-empty &#123;</span><br><span class="line">    color: #888;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: block;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-weight: 400</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul &#123;</span><br><span class="line">    width: 360px;</span><br><span class="line">    max-height: 450px;</span><br><span class="line">    min-height: 0;</span><br><span class="line">    height: auto;</span><br><span class="line">    overflow-y: auto;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">    background: rgba(255, 255, 255, 0.9);</span><br><span class="line">    box-shadow: 3px 4px 10px #7dc3d8;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    border-bottom: 1px solid #bdb7b7;</span><br><span class="line">    padding-bottom: 20px;</span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    font-weight: 400</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li:last-child &#123;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    margin-bottom: 0</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li a &#123;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    text-decoration:none;</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li a:hover &#123;</span><br><span class="line">    text-decoration:underline;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li p &#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    max-height: 124px;</span><br><span class="line">    overflow: hidden</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul li em.search-keyword &#123;</span><br><span class="line">    color: #e58c7c;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .local-search-input-cls &#123;</span><br><span class="line">    opacity: .6;</span><br><span class="line">    width: 160px;</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .local-search-input-cls:hover &#123;</span><br><span class="line">    opacity: 1;</span><br><span class="line">    width: 200px;</span><br><span class="line">    transition: all .3s</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .icon &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: -30px;</span><br><span class="line">    color: #999;</span><br><span class="line">    cursor: pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.将上面的样式引入页面中，修改<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\layout\_partial\css.ejs</code>，再后面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;%=config.root%&gt;css/search.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>3.修改<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\main.0cf68a.css</code>最后面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* 页面头部：包含‘今日诗词’，站内搜索 */</span><br><span class="line">.page-header &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    margin: 5px 30px 4px 30px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    -webkit-transition: all 0.2s ease-in;</span><br><span class="line">    height:45px;</span><br><span class="line">    font-family: &#x27;微软雅黑&#x27;;</span><br><span class="line">    border-radius:5px;</span><br><span class="line">    padding-left:10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 今日诗词 */</span><br><span class="line">#jinrishici-sentence&#123;</span><br><span class="line">  color:#27d7a1;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  line-height: 45px;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图2"><a href="#效果图2" class="headerlink" title="效果图2"></a>效果图2</h3><p>详见文章<a href="#">开头</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>hexo+yilia集成本地搜索：<a href="https://yansheng836.github.io/article/915f21c1.html">https://yansheng836.github.io/article/915f21c1.html</a></li><li>今日诗词安装：<a href="https://www.jinrishici.com/doc/#json-fast-easy">https://www.jinrishici.com/doc/#json-fast-easy</a></li><li>为 Hexo 博客增加一个站内搜索：<a href="https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/">https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/</a></li><li>搜索栏样式参考：<a href="http://liangtao.site/">http://liangtao.site/</a></li><li>search.js部分参考：<a href="https://github.com/Kiritor/hexo-theme-yilia-l/blob/8f42e032e14a9746682dc91a0382a0576687a1f0/layout/_partial/post/search.ejs">https://github.com/Kiritor/hexo-theme-yilia-l/blob/8f42e032e14a9746682dc91a0382a0576687a1f0/layout/_partial&#x2F;post&#x2F;search.ejs</a></li><li>另一种配置方式：<a href="https://github.com/Kiritor/hexo-theme-yilia-l/search?q=wrapStyle&unscoped_q=wrapStyle">https://github.com/Kiritor/hexo-theme-yilia-l/search?q=wrapStyle&unscoped_q&#x3D;wrapStyle</a></li><li>可复制的表情包：<a href="http://www.fhdq.net/emoji/emojifuhao.html">http://www.fhdq.net/emoji/emojifuhao.html</a></li></ul><h2 id="2-更近一步"><a href="#2-更近一步" class="headerlink" title="2.更近一步"></a>2.更近一步</h2><h3 id="适配手机端"><a href="#适配手机端" class="headerlink" title="适配手机端"></a>适配手机端</h3><p><code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\main.0cf68a.css</code>，新增下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">.page-header &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 1px solid #fff;</span><br><span class="line">    /* margin: 5px 30px 4px 30px; */</span><br><span class="line">    background: #fff;</span><br><span class="line">    -webkit-transition: all 0.2s ease-in;</span><br><span class="line">    height: 45px;</span><br><span class="line">    font-family: &#x27;微软雅黑&#x27;;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    padding-left: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\search.css</code>，新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* 手机端 */</span><br><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">.local-search &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    text-align: left;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    margin-bottom: 0px;</span><br><span class="line">    right: -5%;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-plugin .local-search-input-cls &#123;</span><br><span class="line">    opacity: .6;</span><br><span class="line">    width: 100px;</span><br><span class="line">    transition: all .3s;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls &#123;</span><br><span class="line">    right: 2px;</span><br><span class="line">&#125;</span><br><span class="line">.local-search-result-cls ul &#123;</span><br><span class="line">    width: 360px;</span><br><span class="line">    max-height: 400px;</span><br><span class="line">    min-height: 0;</span><br><span class="line">    height: auto;</span><br><span class="line">    overflow-y: auto;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">    background: rgba(255, 255, 255, 0.9);</span><br><span class="line">    box-shadow: 3px 4px 10px #7dc3d8;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手机端取消本地搜索功能"><a href="#手机端取消本地搜索功能" class="headerlink" title="手机端取消本地搜索功能"></a>手机端取消本地搜索功能</h3><p>因为考虑到手机端界面比较小，这里取消搜索功能。</p><p><code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\layout\layout.ejs</code>，在layout.ejs的最后的body前新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 移动设备侦测</span><br><span class="line">    var isMobile = &#123;</span><br><span class="line">      Android: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/Android/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      BlackBerry: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/BlackBerry/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      iOS: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/iPhone|iPad|iPod/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      Opera: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/Opera Mini/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      Windows: function () &#123;</span><br><span class="line">        return navigator.userAgent.match(/IEMobile/i);</span><br><span class="line">      &#125;,</span><br><span class="line">      any: function () &#123;</span><br><span class="line">        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    if(isMobile.any())&#123;</span><br><span class="line">        //手机端取消搜索功能</span><br><span class="line">        $(&#x27;.local-search&#x27;).css(&quot;display&quot;,&quot;none&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($(&#x27;.local-search&#x27;).size() &amp;&amp; !isMobile.any()) &#123;</span><br><span class="line">      $.getScript(&#x27;/js/search.js&#x27;, function() &#123;</span><br><span class="line">        searchFunc(&quot;/search.xml&quot;, &#x27;local-search-input&#x27;, &#x27;local-search-result&#x27;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>或者直接用css隐藏搜索框<code>E:\OneDrive - shjd\github\person_blog_new\themes\new-yilia\source\css\search.css</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 手机端 */</span><br><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">    .local-search &#123;</span><br><span class="line">        display:none;</span><br><span class="line">        /* right: -5%; */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><p>测试时，修改文件名后，可能不能立即将文章加入索引，即不能进行搜索。</p><p>停止测试，重新hexo s即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;yilia主题也有集成搜索功能，不过它使用的搜索是基于标题和标签的，有一定的局限性，没有提供全文检索功能。这篇文章介绍的就是集成全文检索和今日诗词。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/imgs/20200411232312.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;动图&lt;br&gt;&lt;img src=&quot;/imgs/hexo-yilia-local-search2.gif&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-集成本地搜索&quot;&gt;&lt;a href=&quot;#1-集成本地搜索&quot; class=&quot;headerlink&quot; title=&quot;1.集成本地搜索&quot;&gt;&lt;/a&gt;1.集成本地搜索&lt;/h2&gt;&lt;p&gt;参考：为 Hexo 博客增加一个站内搜索：&lt;a href=&quot;https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/&quot;&gt;https://www.barretlee.com/blog/2017/06/04/hexo-search-insite/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/20200411214252.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;原理说明&quot;&gt;&lt;a href=&quot;#原理说明&quot; class=&quot;headerlink&quot; title=&quot;原理说明&quot;&gt;&lt;/a&gt;原理说明&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;hexo-generator-search&lt;/code&gt;插件为文章生成一个全局的&lt;code&gt;search.xml&lt;/code&gt;，里面包含所有文章的内容（可配置）。然后再去这个文件中搜索关键字，以此来找到需要的文章。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MobaXterm登录堡垒机/跳板机直接使用Linux/Windows服务器</title>
    <link href="https://github.com/jiangjiawei520/post/81cbb71e.html"/>
    <id>https://github.com/jiangjiawei520/post/81cbb71e.html</id>
    <published>2024-04-16T09:16:00.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>xshell很好用，但是没找到正式版本，公司不允许使用，看了网上的一些资料，发现MobaXterm是比较好的替代产品,，使用MobaXterm登录堡垒机&#x2F;跳板机直接使用Linux服务器。</p><h2 id="安装mobaxterm"><a href="#安装mobaxterm" class="headerlink" title="安装mobaxterm"></a>安装mobaxterm</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>v21.0</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>官网的免费版本：<br><a href="https://mobaxterm.mobatek.net/download-home-edition.html">https://mobaxterm.mobatek.net/download-home-edition.html</a><br>直接portable edition就可以了。</p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><span id="more"></span><h2 id="登录堡垒机-跳板机Linux服务器"><a href="#登录堡垒机-跳板机Linux服务器" class="headerlink" title="登录堡垒机&#x2F;跳板机Linux服务器"></a>登录堡垒机&#x2F;跳板机Linux服务器</h2><h3 id="登录方法"><a href="#登录方法" class="headerlink" title="登录方法"></a>登录方法</h3><h4 id="输入自己的信息"><a href="#输入自己的信息" class="headerlink" title="输入自己的信息"></a>输入自己的信息</h4><p>session–&gt;SSH，新增《创建或者管理凭据》<img src="/imgs/image-20240416092314200.png" alt="image-20240416092314200"></p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70-1713230457868-3.png" alt="在这里插入图片描述"></p><p>新建凭据</p><p>点击新建new，创建凭据；<br>name：随意填<br>username：就是你的用户名（你在公司的账户，一般是姓名拼音，大公司是拼音后还有个序号）<br>password：就是你用户名对应的密码；</p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70-1713230507195-10.png" alt="在这里插入图片描述"></p><p><img src="/imgs/image-20240416092428250.png" alt="image-20240416092428250"></p><p>点击最下方的确认按钮，保存</p><h3 id="登录堡垒机-跳板机"><a href="#登录堡垒机-跳板机" class="headerlink" title="登录堡垒机&#x2F;跳板机"></a>登录堡垒机&#x2F;跳板机</h3><p>登录口令是这个<br>ssh -p XX username@ip</p><p>所以下图的<br>remote host ：你的堡垒机ip<br>specify username: 此处会出现上一步你填的name，勾选，登录的时候会自动替换成你上面写的username。<br>port：需要注意的是这个端口号记得改，我发现我的堡垒机登录的端口号是80，之前没改，所以一直没成功。（linux端口正常是22）</p><p><img src="/imgs/image-20240416092633347.png" alt="image-20240416092633347"></p><p>直接点击ok<br>一部分小伙伴会直接弹出窗口，让你输入二次验证password（密码），那么直接将堡垒机的二次密码输入即可；</p><h4 id="选择服务器"><a href="#选择服务器" class="headerlink" title="选择服务器"></a>选择服务器</h4><p>​二次密码验证后，将会需要选择需要登陆的服务器。</p><p>二次验证：</p><p><img src="/imgs/image-20240416095323455.png" alt="image-20240416095323455"></p><p>服务器选择，然后输入服务器的账号密码，即可正常使用，复制粘贴正常。（只会显示linux机器）</p><p><img src="/imgs/image-20240416095439359.png" alt="image-20240416095439359"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>复制了堡垒机的密码，你看看ctrl v能不能用，不能用的话，直接鼠标右键一下，密码就可以粘贴上来了，因为密码不显示，所以这块不知道自己粘贴上了没有，大家多试几次即可</p><h2 id="登录堡垒机-跳板机Windows服务器"><a href="#登录堡垒机-跳板机Windows服务器" class="headerlink" title="登录堡垒机&#x2F;跳板机Windows服务器"></a>登录堡垒机&#x2F;跳板机Windows服务器</h2><p>​</p><p>session–&gt;SSH，新增《创建或者管理凭据》<img src="/imgs/image-20240416092314200.png" alt="image-20240416092314200"></p><p><img src="/imgs/image-20240416094738825.png" alt="image-20240416094738825"></p><p>新建凭据</p><p>点击新建new，创建凭据；<br>name：随意填<br>username：就是你的用户名（你在公司的账户，一般是姓名拼音，大公司是拼音后还有个序号）<br>password：就是你用户名对应的密码；</p><p><img src="/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70-1713230507195-10.png" alt="在这里插入图片描述"></p><p><img src="/imgs/image-20240416092428250.png" alt="image-20240416092428250"></p><p>点击最下方的确认按钮，保存</p><h3 id="登录堡垒机-跳板机-1"><a href="#登录堡垒机-跳板机-1" class="headerlink" title="登录堡垒机&#x2F;跳板机"></a>登录堡垒机&#x2F;跳板机</h3><p>remote host ：你的堡垒机ip<br>specify username: 此处会出现上一步你填的name，勾选，登录的时候会自动替换成你上面写的username。<br>port：需要注意的是这个端口号记得改,使用Windows的远程端口，我发现我的堡垒机登录的端口号是63333，之前没改，所以一直没成功。（Windows端口正常是63333或者默认的3389）</p><p><img src="/imgs/image-20240416094827124.png" alt="image-20240416094827124"></p><p>直接点击ok<br>一部分小伙伴会直接弹出窗口，让你输入二次验证password（密码），那么直接将堡垒机的二次密码输入即可；</p><h4 id="选择服务器-1"><a href="#选择服务器-1" class="headerlink" title="选择服务器"></a>选择服务器</h4><p>​二次密码验证后，将会需要选择需要登陆的服务器。</p><p>二次验证：</p><p><img src="/imgs/image-20240416095102158.png" alt="image-20240416095102158"></p><p>服务器选择，然后输入服务器的账号密码，即可正常使用，复制粘贴正常。（只会显示Windows机器）</p><p><img src="/imgs/image-20240416095210062.png" alt="image-20240416095210062"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;xshell很好用，但是没找到正式版本，公司不允许使用，看了网上的一些资料，发现MobaXterm是比较好的替代产品,，使用MobaXterm登录堡垒机&amp;#x2F;跳板机直接使用Linux服务器。&lt;/p&gt;
&lt;h2 id=&quot;安装mobaxterm&quot;&gt;&lt;a href=&quot;#安装mobaxterm&quot; class=&quot;headerlink&quot; title=&quot;安装mobaxterm&quot;&gt;&lt;/a&gt;安装mobaxterm&lt;/h2&gt;&lt;h3 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h3&gt;&lt;p&gt;v21.0&lt;/p&gt;
&lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;官网的免费版本：&lt;br&gt;&lt;a href=&quot;https://mobaxterm.mobatek.net/download-home-edition.html&quot;&gt;https://mobaxterm.mobatek.net/download-home-edition.html&lt;/a&gt;&lt;br&gt;直接portable edition就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0l2X3p6eQ==,size_16,color_FFFFFF,t_70.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    <category term="shell" scheme="https://github.com/jiangjiawei520/categories/linux/shell/"/>
    
    
    <category term="MobaXterm" scheme="https://github.com/jiangjiawei520/tags/MobaXterm/"/>
    
    <category term="shell" scheme="https://github.com/jiangjiawei520/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用qshell一键部署静态博客到七牛云</title>
    <link href="https://github.com/jiangjiawei520/post/1a485dfe.html"/>
    <id>https://github.com/jiangjiawei520/post/1a485dfe.html</id>
    <published>2024-04-15T18:27:06.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载qshell下载"><a href="#下载qshell下载" class="headerlink" title="下载qshell下载"></a>下载qshell下载</h3><p><a href="https://github.com/qiniu/qshell/releases/download/v2.13.0/qshell-v2.13.0-windows-386.zip">https://github.com/qiniu/qshell/releases/download/v2.13.0/qshell-v2.13.0-windows-386.zip</a></p><h3 id="配置qshell环境变量"><a href="#配置qshell环境变量" class="headerlink" title="配置qshell环境变量"></a>配置qshell环境变量</h3><h3 id="添加account"><a href="#添加account" class="headerlink" title="添加account"></a>添加account</h3><p>执行qshell account <Your AccessKey> <Your SecretKey> <Your Name> </p><h3 id="Hexo项目的根目录下创建upload-conf文件"><a href="#Hexo项目的根目录下创建upload-conf文件" class="headerlink" title="Hexo项目的根目录下创建upload.conf文件"></a>Hexo项目的根目录下创建upload.conf文件</h3><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// 这个地址是根目录地址，不可使用相对路径</span><br><span class="line">&quot;src_dir&quot;: &quot;E:\\xx\\github\\person_blog_new\\public&quot;,</span><br><span class="line">// 储存空间名称</span><br><span class="line">&quot;bucket&quot;: &quot;person-blog-new-hw&quot;,</span><br><span class="line">// 是否覆盖</span><br><span class="line">&quot;overwrite&quot; : true,</span><br><span class="line">// 检查新增文件</span><br><span class="line">&quot;rescan_local&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传 qshell qupload upload.conf</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>打开Hexo下的package.json，npm run publish 就可实现一键打包部署到七牛云</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">&quot;publish&quot;: &quot;hexo generate &amp;&amp; qshell qupload upload.conf&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.cn/post/6844903983857811469">https://juejin.cn/post/6844903983857811469</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;下载qshell下载&quot;&gt;&lt;a href=&quot;#下载qshell下载&quot; class=&quot;headerlink&quot; title=&quot;下载qshell下载&quot;&gt;&lt;/a&gt;下载qshell下载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/qiniu/qshe</summary>
      
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
    <category term="七牛云" scheme="https://github.com/jiangjiawei520/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>七牛云搭建hexo博客</title>
    <link href="https://github.com/jiangjiawei520/post/11aec52a.html"/>
    <id>https://github.com/jiangjiawei520/post/11aec52a.html</id>
    <published>2024-04-15T16:39:23.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="http://javajun.net/2021/03/20/da-jian-ni-de-ge-ren-bo-ke/">Hexo + GitHub Pages 搭建你的个人博客</a>，但这种方案有两个缺点：</p><ol><li>域名是github.io的二级域名</li><li>github在国内网速较慢</li></ol><p>所以我最终还是选择了购买自己的域名，并借用七牛云搭建起了免费的博客站。</p><p>七牛云每个月有<strong>10G</strong>的免费流量，对于大多数博客站点来说足够使用了。</p><p>​<strong>备注：域名阿里云购买，空间使用七牛云每个月10G的免费流量。</strong></p><h2 id="购买域名与云服务器"><a href="#购买域名与云服务器" class="headerlink" title="购买域名与云服务器"></a>购买域名与云服务器</h2><p>但想要使用自己的域名搭建博客，并非完全免费，前期还是要付出一点点的资金，主要付出的费用如下：</p><table><thead><tr><th align="left">购买项目</th><th align="left">说明</th><th align="left">花费</th></tr></thead><tbody><tr><td align="left">域名</td><td align="left">域名什么价位的都要，便宜的也有几块钱一年的，根据自己的需要买一个</td><td align="left">10元以上</td></tr><tr><td align="left">阿里云服务器</td><td align="left">使用阿里云备案服务进行域名备案要求你必须购买三个月以上云服务器，我选了最便宜的服务器，学生的话可以享受9.9一个月的学生机</td><td align="left">30元（学生）或160元左右</td></tr></tbody></table><p>购买域名地址：<a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com/</a></p><p>云服务器购买地址：<a href="https://www.aliyun.com/product/ecs">https://www.aliyun.com/product/ecs</a></p><p><img src="/imgs/image-20210323101054344.png" alt="img"></p><p>其他云厂商什么价位我不了解，我只试过阿里云的。</p><span id="more"></span><h2 id="申请域名备案"><a href="#申请域名备案" class="headerlink" title="申请域名备案"></a>申请域名备案</h2><p>在国内，申请备案是必须的。备案的流程很简单，登录阿里云控制台，右上角点击备案，然后按流程填表传资料即可。阿里云会进行初审，通过之后会将你的资料发给工信部进行审核。整个流程都很简单，也会有提示，一步步走就可以了</p><p>也可以手机下载阿里云app操作</p><p><img src="/imgs/image-20210323101639846.png" alt="img"></p><p>​<strong>备注：如果不备案，七牛云新建空间时，需要选择海外的，不能使用国内。</strong></p><h2 id="申请七牛云"><a href="#申请七牛云" class="headerlink" title="申请七牛云"></a>申请七牛云</h2><p>七牛云：<a href="https://portal.qiniu.com/home">https://portal.qiniu.com/home</a></p><p>cloudflare：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><p>七牛云账号可以免费申请，登录之后添加对象存储服务，并创建两个空间，一个用于存放图片，一个用于存放博客站点静态文件。只创建一个空间其实也可以，但我个人比较建议分开管理，到时候可以给两个空间分别设置一个二级域名</p><p><img src="/imgs/image-20210323101856790.png" alt="img"></p><p>创建好空间之后，七牛云会给你临时CDN域名用于测试</p><p><img src="/imgs/image-20210323102123961.png" alt="img"></p><h2 id="部署hexo到七牛云"><a href="#部署hexo到七牛云" class="headerlink" title="部署hexo到七牛云"></a>部署hexo到七牛云</h2><h3 id="qshell上传工具"><a href="#qshell上传工具" class="headerlink" title="qshell上传工具"></a>qshell上传工具</h3><p>这里借助了七牛云的命令行工具qshell，下载地址：<a href="https://developer.qiniu.com/kodo/1302/qshell">命令行工具(qshell)_实用工具_对象存储 - 七牛开发者中心 (qiniu.com)</a></p><p>下载下来就是qshell二进制文件（mac和linux），执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> qshell /usr/local/bin</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/qshell</span><br></pre></td></tr></table></figure><p>在你的博客根目录创建upload.conf，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;src_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/xxx/blog/public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;overwrite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rescan_local&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">src_dir</td><td align="left">要上传的目录，要指定到博客的public目录</td></tr><tr><td align="left">bucket</td><td align="left">博客存放的bucket</td></tr><tr><td align="left">overwrite</td><td align="left">覆盖重复文件</td></tr><tr><td align="left">rescan_local</td><td align="left">本地新增的文件不会被同步，需要手动设置为true才会去检测新增文件</td></tr></tbody></table><p>更多参数参考：<a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md">qshell&#x2F;qupload.md at master · qiniu&#x2F;qshell (github.com)</a></p><h4 id="账号设置"><a href="#账号设置" class="headerlink" title="账号设置"></a>账号设置</h4><p>注意：要使用qshell上传文件到七牛云，需要先配置秘钥，参考：<a href="https://developer.qiniu.com/kodo/1302/qshell#4">https://developer.qiniu.com/kodo/1302/qshell#4</a></p><p><img src="/imgs/image-20240415165049261.png" alt="image-20240415165049261"></p><p><img src="/imgs/image-20240415165024310.png" alt="image-20240415165024310"></p><p><img src="/imgs/image-20240415164908998.png" alt="image-20240415164908998"></p><h4 id="新建同步任务"><a href="#新建同步任务" class="headerlink" title="新建同步任务"></a>新建同步任务</h4><p>选择新建同步任务</p><p><img src="/imgs/image-20240415165111703.png" alt="image-20240415165111703"></p><p>本地目录：选择生成的public</p><p>存储类型：检查空间是否有同名文件，覆盖上传</p><p><img src="/imgs/image-20240415165152509.png" alt="image-20240415165152509"></p><p>​如使用命令上传，参考《部署上传》章节</p><h3 id="部署上传（可选）"><a href="#部署上传（可选）" class="headerlink" title="部署上传（可选）"></a>部署上传（可选）</h3><p>全量上传：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell qupload upload.conf</span><br></pre></td></tr></table></figure><p>上传成功后，在upload.conf增加<code>skip_path_prefixes</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;src_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/xxx/blog/public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skip_path_prefixes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;medias,css,js,libs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;overwrite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rescan_local&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>作用是忽略<code>medias,css,js,libs</code>目录不进行上传，因为这些静态文件大多数情况是不需要每次都上传的，有修改的时候再把这行去掉就好了。</p><p>最后，修改博客根目录下的package.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate &amp;&amp; qshell qupload upload.conf&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以后部署hexo到七牛云只需执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn deploy</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm deploy</span><br></pre></td></tr></table></figure><h2 id="设置自定义域名"><a href="#设置自定义域名" class="headerlink" title="设置自定义域名"></a>设置自定义域名</h2><p>域名备案申请通过之后，在七牛云后台为你的空间设置自定义域名：</p><p>配置想要设置的域名，如qbk.jiangjiawei.xyz</p><p><img src="/imgs/image-20210323110306124.png" alt="img"></p><p><img src="/imgs/image-20240415164548166.png" alt="image-20240415164548166"></p><p>解析认证域名归属</p><p><img src="/imgs/image-20240415164732231.png" alt="image-20240415164732231"></p><p>域名解析商处配置CANME</p><p><img src="/imgs/image-20240415164620001.png" alt="image-20240415164620001"></p><p><img src="/imgs/image-20240415164718466.png" alt="image-20240415164718466"></p><h2 id="自动上传图片"><a href="#自动上传图片" class="headerlink" title="自动上传图片"></a>自动上传图片</h2><h3 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h3><p>我使用typora来编写博客，typora支持使用图床工具自动上传图片到七牛云或其他云存储服务</p><p>打开typora设置，选择图像，进行如下设置：</p><p><img src="/imgs/image-20210323102431430.png" alt="img"></p><h3 id="图床工具设置"><a href="#图床工具设置" class="headerlink" title="图床工具设置"></a>图床工具设置</h3><p>下载并安装upic，这是完全免费的图床工具：<a href="https://gitee.com/gee1k/uPic">uPic: 简洁的 Mac 图床客户端 uPic (gitee.com)</a></p><p>打开upic设置，点击左下角+号，增加七牛云KODO，然后进行如下图设置：</p><p><img src="/imgs/image-20210323102724578.png" alt="img"></p><p>图中的access key，secret key从七牛云后台获取：</p><p><img src="/imgs/image-20210323102857841.png" alt="img"></p><p>记得将七牛云设置为默认图床</p><p><img src="/imgs/image-20210323102959476.png" alt="img"></p><p>进行以上设置之后，在typora直接黏贴图片就能自动上传到七牛云了</p><blockquote><p><strong>注意：域名通过之后，记得将图床设置以及博文中的七牛云临时域名替换成你的域名</strong></p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="记得开启默认首页"><a href="#记得开启默认首页" class="headerlink" title="记得开启默认首页"></a>记得开启默认首页</h3><p><img src="/imgs/image-20210329151040426.png" alt="img"></p><h3 id="勾选覆盖上传"><a href="#勾选覆盖上传" class="headerlink" title="勾选覆盖上传"></a>勾选覆盖上传</h3><p>​勾选覆盖上传，否则文件有更新时，上传无法更新。</p><p><img src="/imgs/image-20240415174125800.png" alt="image-20240415174125800"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; &lt;a href=&quot;http://javajun.net/2021/03/20/da-jian-ni-de-ge-ren-bo-ke/&quot;&gt;Hexo + GitHub Pages 搭建你的个人博客&lt;/a&gt;，但这种方案有两个缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;域名是github.io的二级域名&lt;/li&gt;
&lt;li&gt;github在国内网速较慢&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我最终还是选择了购买自己的域名，并借用七牛云搭建起了免费的博客站。&lt;/p&gt;
&lt;p&gt;七牛云每个月有&lt;strong&gt;10G&lt;/strong&gt;的免费流量，对于大多数博客站点来说足够使用了。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;备注：域名阿里云购买，空间使用七牛云每个月10G的免费流量。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;购买域名与云服务器&quot;&gt;&lt;a href=&quot;#购买域名与云服务器&quot; class=&quot;headerlink&quot; title=&quot;购买域名与云服务器&quot;&gt;&lt;/a&gt;购买域名与云服务器&lt;/h2&gt;&lt;p&gt;但想要使用自己的域名搭建博客，并非完全免费，前期还是要付出一点点的资金，主要付出的费用如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;购买项目&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;花费&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;域名&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;域名什么价位的都要，便宜的也有几块钱一年的，根据自己的需要买一个&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;10元以上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;阿里云服务器&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;使用阿里云备案服务进行域名备案要求你必须购买三个月以上云服务器，我选了最便宜的服务器，学生的话可以享受9.9一个月的学生机&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;30元（学生）或160元左右&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;购买域名地址：&lt;a href=&quot;https://wanwang.aliyun.com/&quot;&gt;https://wanwang.aliyun.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;云服务器购买地址：&lt;a href=&quot;https://www.aliyun.com/product/ecs&quot;&gt;https://www.aliyun.com/product/ecs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/image-20210323101054344.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;其他云厂商什么价位我不了解，我只试过阿里云的。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>配置oracle定时备份</title>
    <link href="https://github.com/jiangjiawei520/post/8ab9b48c.html"/>
    <id>https://github.com/jiangjiawei520/post/8ab9b48c.html</id>
    <published>2024-04-11T15:56:08.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="准备内容"><a href="#准备内容" class="headerlink" title="准备内容"></a>准备内容</h3><ul><li>2345好压程序（用于压缩备份）</li><li>oracle客户端程序（用于提供exp命令）</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装好压"><a href="#安装好压" class="headerlink" title="安装好压"></a>安装好压</h4><h5 id="配置好压到环境变量"><a href="#配置好压到环境变量" class="headerlink" title="配置好压到环境变量"></a>配置好压到环境变量</h5><h5 id="测试好压压缩命令"><a href="#测试好压压缩命令" class="headerlink" title="测试好压压缩命令"></a>测试好压压缩命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HaoZipC a -tzip 压缩文件名称.zip 需要压缩的目录</span><br></pre></td></tr></table></figure><h4 id="编写exp脚本"><a href="#编写exp脚本" class="headerlink" title="编写exp脚本"></a>编写exp脚本</h4><ul><li>配置目录H:\数据库备份\228数据库备份、H:\数据库备份\159数据库备份</li></ul><span id="more"></span><p>数据备份HaoZip_rb.bat：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">title 172.16.2.159和172.16.8.228实例备份</span><br><span class="line">set dtm=%Date:~0,4%-%Date:~5,2%-%Date:~8,2%</span><br><span class="line">REM 设置日志文件路径</span><br><span class="line">set LOG_FILE_159=H:\数据库备份\batrun_log-159-%dtm%.txt</span><br><span class="line">set LOG_FILE_228=H:\数据库备份\batrun_log-228-%dtm%.txt</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始备份159=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===在《H:\数据库备份\159数据库备份\》中新建以当前日期为名的文件夹%dtm%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">H: &gt;&gt; %LOG_FILE_159%</span><br><span class="line">cd H:\数据库备份\159数据库备份 &gt;&gt; %LOG_FILE_159%</span><br><span class="line">md H:\数据库备份\159数据库备份\%dtm% &gt;&gt; %LOG_FILE_159%</span><br><span class="line"></span><br><span class="line">:: 全库备份</span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始备份 159(GHZJ_ORCL)=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">exp GHZJ_TEST/xxx@172.16.2.159/ORCL  full=y  file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_ORCL-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始压缩 GHZJ_ORCL-%dtm%.dmp和 GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">HaoZipC a -tzip  GHZJ_ORCL-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_ORCL-%dtm%.dmp GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始备份 159(GHZJ_GHXGTEST)=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">exp GHZJ_GHXGTEST/xxx@172.16.2.159/ghxgtest  full=y  file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===开始压缩 GHZJ_GHXGTEST-%dtm%.dmp和 GHZJ_GHXGTEST-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">HaoZipC a -tzip  GHZJ_GHXGTEST-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log &gt;&gt; %LOG_FILE_159% </span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_GHXGTEST-%dtm%.dmp GHZJ_GHXGTEST-%dtm%.log=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp &gt;&gt; %LOG_FILE_159%</span><br><span class="line">del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log &gt;&gt; %LOG_FILE_159%</span><br><span class="line"></span><br><span class="line">:: 单独备份实例</span><br><span class="line">:: echo ===开始备份159(GHZJ_TEST)===</span><br><span class="line">:: exp GHZJ_TEST/xxx@172.16.2.159/ORCL compress=n buffer=65536 owner=GHZJ_TEST file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_TEST-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_TEST-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_TEST-%dtm%.dmp和 GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_TEST-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_TEST-%dtm%.dmp GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_TEST-%dtm%.log</span><br><span class="line">:: </span><br><span class="line">:: echo ===开始备份159(GHZJ_GHXGTEST)===</span><br><span class="line">:: exp GHZJ_GHXGTEST/xxx@172.16.2.159/ghxgtest compress=n buffer=65536 owner=GHZJ_GHXGTEST file=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.dmp log=H:/数据库备份/159数据库备份/%dtm%/GHZJ_GHXGTEST-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_GHXGTEST-%dtm%.dmp和 GHZJ_GHXGTEST-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_GHXGTEST-%dtm%.zip H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp  H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_GHXGTEST-%dtm%.dmp GHZJ_GHXGTEST-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\159数据库备份\%dtm%\GHZJ_GHXGTEST-%dtm%.log</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始备份228=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===在《H:\数据库备份\228数据库备份\》中新建以当前日期为名的文件夹%dtm%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">H:</span><br><span class="line">cd H:\数据库备份\228数据库备份 &gt;&gt; %LOG_FILE_228%</span><br><span class="line">md H:\数据库备份\228数据库备份\%dtm% &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">REM tables = (tbl1, tbl2) 导出指定的表</span><br><span class="line">REM owner = (user1, user2) 导出指定的用户，owner和full参数只能存在一个</span><br><span class="line">REM full = y 全库导出</span><br><span class="line"></span><br><span class="line">:: 全库备份</span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始备份228(GHZJ_GHXG)=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">exp system/xxx@172.16.8.228/ghxg  full=y  file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始压缩 GHZJ_GHXG-%dtm%.dmp和 GHZJ_GHXG-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">HaoZipC a -tzip  GHZJ_GHXG-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_GHXG-%dtm%.dmp GHZJ_GHXG-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">echo ===%TIME%=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始备份228(GHZJ_ORCL)=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">exp system/xxx@172.16.8.228/ORCL  full=y  file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_ORCL-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line">echo ===开始压缩 GHZJ_ORCL-%dtm%.dmp和 GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">HaoZipC a -tzip  GHZJ_ORCL-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_228% </span><br><span class="line">echo ===压缩完成,删除备份的文件 GHZJ_ORCL-%dtm%.dmp GHZJ_ORCL-%dtm%.log=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.dmp &gt;&gt; %LOG_FILE_228%</span><br><span class="line">del H:\数据库备份\228数据库备份\%dtm%\GHZJ_ORCL-%dtm%.log &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">:: 单独备份实例</span><br><span class="line">:: echo ===开始备份228(GHZJ_GHXG)===</span><br><span class="line">:: exp GHZJ_GHXG/xxx@172.16.8.228/ghxg  owner=GHZJ_GHXG  file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_GHXG-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_GHXG-%dtm%.dmp和 GHZJ_GHXG-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_GHXG-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_GHXG-%dtm%.dmp GHZJ_GHXG-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_GHXG-%dtm%.log</span><br><span class="line">:: </span><br><span class="line">:: </span><br><span class="line">:: echo ===开始备份228(GHZJ_TEST)===</span><br><span class="line">:: exp GHZJ_TEST/xxx@172.16.8.228/ORCL  owner=GHZJ_TEST file=H:/数据库备份/228数据库备份/%dtm%/GHZJ_TEST-%dtm%.dmp log=H:/数据库备份/228数据库备份/%dtm%/GHZJ_TEST-%dtm%.log</span><br><span class="line">:: echo ===开始压缩 GHZJ_TEST-%dtm%.dmp和 GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: HaoZipC a -tzip  GHZJ_TEST-%dtm%.zip H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp  H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.log </span><br><span class="line">:: echo ===压缩完成,删除备份的文件 GHZJ_TEST-%dtm%.dmp GHZJ_TEST-%dtm%.log===</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.dmp</span><br><span class="line">:: del H:\数据库备份\228数据库备份\%dtm%\GHZJ_TEST-%dtm%.log</span><br><span class="line"></span><br><span class="line">echo ===压缩完成,删除日期空目录《H:\数据库备份\159数据库备份\%dtm%》=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">rd /s H:\数据库备份\159数据库备份\%dtm% &gt;&gt; %LOG_FILE_159%</span><br><span class="line">echo ===压缩完成,删除日期空目录《H:\数据库备份\228数据库备份\%dtm%》=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">rd /s H:\数据库备份\228数据库备份\%dtm% &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo ===使用forfiles删除159 30天之前的备份压缩文件,/D参数是天数，/m是文件类型=== &gt;&gt; %LOG_FILE_159%</span><br><span class="line">forfiles /p H:\数据库备份\159数据库备份\ /m  *.zip /d -30 -c &quot;cmd /c if @isdir==FALSE  DEL /S /Q @path&quot; &gt;&gt; %LOG_FILE_159%</span><br><span class="line">forfiles /p H:\数据库备份\159数据库备份 /m *.zip /d -30 /c &quot;cmd /c IF @isdir==TRUE RD /S /Q @path&quot; </span><br><span class="line">echo ===使用forfiles删除228 30天之前的备份压缩文件,/D参数是天数，/m是文件类型=== &gt;&gt; %LOG_FILE_228%</span><br><span class="line">forfiles /p H:\数据库备份\228数据库备份\ /m  *.zip /d -30 -c &quot;cmd /c if @isdir==FALSE  DEL /S /Q @path&quot;  &gt;&gt; %LOG_FILE_228%</span><br><span class="line"></span><br><span class="line">REM echo 备份SXKPN库</span><br><span class="line">REM expdp SXKPN/xxx@PNBDC Directory=PNSJB dumpfile=SXKPN-%dtm%.dump logfile=SXKPN-%dtm%.log </span><br><span class="line">REM HaoZipC a -tzip  SXKPN-%dtm%.zip E:\PNBDCBACKUP\SXKPN-%dtm%.dump  E:\PNBDCBACKUP\SXKPN-%dtm%.log </span><br><span class="line">REM del E:\PNBDCBACKUP\SXKPN-%dtm%.dump </span><br><span class="line">REM del E:\PNBDCBACKUP\SXKPN-%dtm%.log </span><br><span class="line"></span><br><span class="line">REM echo 移动当天所有数据库备份压缩文件到新建日期文件夹中</span><br><span class="line">REM move E:\PNBDCBACKUP\*%dtm%.zip E:\PNBDCBACKUP\%dtm%</span><br><span class="line"></span><br><span class="line">REM echo 使用forfiles删除30天之前的备份压缩文件,/D参数是天数，/m是文件类型</span><br><span class="line">REM forfiles /p E:\PNBDCpump /m *.zip /d -30 /c &quot;cmd /c IF @isdir==TRUE RD /S /Q @path&quot;</span><br></pre></td></tr></table></figure><p>​<strong>注：exp、expdp导出全库必备前提：①导出用户权限是EXP_FULL_DATABAS或者dba；②需要设置参数full&#x3D;y，owner和full参数只能存在一个</strong></p><h4 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h4><p>​通过任务计划程序配置</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>centos 定时任务每月1号全备</p><p>要在CentOS上设置一个定时任务以在每月的第一天执行全备，你可以使用<code>cron</code>来实现。以下是一个示例，它创建了一个cron任务，该任务每月的第一天运行一个全备脚本。</p><h3 id="创建一个备份脚本"><a href="#创建一个备份脚本" class="headerlink" title="创建一个备份脚本"></a>创建一个备份脚本</h3><p>首先，你需要创建一个备份脚本，例如<code>backup.sh</code>，并确保它可以正常工作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># backup.sh</span><br><span class="line"># 这里添加你的备份命令，例如使用tar或rsync</span><br><span class="line">if [ -f ~/.bash_profile ];</span><br><span class="line">then</span><br><span class="line">  . ~/.bash_profile</span><br><span class="line">fi</span><br><span class="line">export ORACLE_HOME=/data/oracle/product/11.2.0/db_1</span><br><span class="line">export ORACLE_SID=JCKDCS</span><br><span class="line">export PATH=$PATH:$HOME/bin:$ORACLE_HOME/bin</span><br><span class="line">export DATA_DIR=JCKDCS_BAK</span><br><span class="line">export nowFileName=`date +%Y%m%d%H`</span><br><span class="line">echo &quot;start......&quot;</span><br><span class="line">expdp JCKDCS/xxx@JCKDCS schemas=JCKDCS dumpfile=JCKDCS.JCKDCS_$nowFileName.dmp directory=JCKDCS_BAK logfile=JCKDCS.JCKDCS_$nowFileName.log</span><br><span class="line">expdp JCKDCSCS/xxx@JCKDCS schemas=JCKDCSCS dumpfile=JCKDCS.JCKDCSCS__$nowFileName.dmp directory=JCKDCS_BAK logfile=JCKDCS.JCKDCSCS_$nowFileName.log</span><br><span class="line">echo &quot;finished.....&quot;</span><br></pre></td></tr></table></figure><p>确保脚本可执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x backup.sh</span><br></pre></td></tr></table></figure><h3 id="编辑crontab文件"><a href="#编辑crontab文件" class="headerlink" title="编辑crontab文件"></a>编辑crontab文件</h3><p>打开当前用户的crontab文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在crontab文件中添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /path/to/backup.sh</span><br></pre></td></tr></table></figure><p>这个cron任务的意思是在每月的第一天午夜（00:00）运行<code>backup.sh</code>。</p><p>保存并退出编辑器，cron将自动安装新的定时任务。</p><h3 id="检查cron服务"><a href="#检查cron服务" class="headerlink" title="检查cron服务"></a>检查cron服务</h3><p>确保cron服务正在运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable crond</span><br><span class="line">systemctl start crond</span><br><span class="line">systemctl status crond</span><br></pre></td></tr></table></figure><p>现在，每当月份的第一天到来时，<code>backup.sh</code>脚本将会被自动执行。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;h3 id=&quot;准备内容&quot;&gt;&lt;a href=&quot;#准备内容&quot; class=&quot;headerlink&quot; title=&quot;准备内容&quot;&gt;&lt;/a&gt;准备内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;2345好压程序（用于压缩备份）&lt;/li&gt;
&lt;li&gt;oracle客户端程序（用于提供exp命令）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;h4 id=&quot;安装好压&quot;&gt;&lt;a href=&quot;#安装好压&quot; class=&quot;headerlink&quot; title=&quot;安装好压&quot;&gt;&lt;/a&gt;安装好压&lt;/h4&gt;&lt;h5 id=&quot;配置好压到环境变量&quot;&gt;&lt;a href=&quot;#配置好压到环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置好压到环境变量&quot;&gt;&lt;/a&gt;配置好压到环境变量&lt;/h5&gt;&lt;h5 id=&quot;测试好压压缩命令&quot;&gt;&lt;a href=&quot;#测试好压压缩命令&quot; class=&quot;headerlink&quot; title=&quot;测试好压压缩命令&quot;&gt;&lt;/a&gt;测试好压压缩命令&lt;/h5&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HaoZipC a -tzip 压缩文件名称.zip 需要压缩的目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;编写exp脚本&quot;&gt;&lt;a href=&quot;#编写exp脚本&quot; class=&quot;headerlink&quot; title=&quot;编写exp脚本&quot;&gt;&lt;/a&gt;编写exp脚本&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;配置目录H:&#92;数据库备份&#92;228数据库备份、H:&#92;数据库备份&#92;159数据库备份&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/categories/oracle/"/>
    
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oracle11g数据库使用expdp每周进行数据备份并上传到备份服务器</title>
    <link href="https://github.com/jiangjiawei520/post/fc083848.html"/>
    <id>https://github.com/jiangjiawei520/post/fc083848.html</id>
    <published>2024-04-10T10:47:01.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-看看数据库情况"><a href="#1-看看数据库情况" class="headerlink" title="1.看看数据库情况"></a>1.看看数据库情况</h2><h3 id="1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到"><a href="#1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到" class="headerlink" title="1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到"></a>1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到</h3><p>​查看所有表空间及使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">　　B.FILE_NAME 物理文件名,</span><br><span class="line">　　B.TABLESPACE_NAME 表空间名称,</span><br><span class="line">　　B.BYTES/1024/1024 大小M,</span><br><span class="line">　　(B.BYTES-SUM(NVL(A.BYTES,0)))/1024/1024 已使用M,</span><br><span class="line">　　SUBSTR((B.BYTES-SUM(NVL(A.BYTES,0)))/(B.BYTES)*100,1,5) 使用率</span><br><span class="line">FROM DBA_FREE_SPACE A,DBA_DATA_FILES B</span><br><span class="line">WHERE A.FILE_ID=B.FILE_ID</span><br><span class="line">GROUP BY B.TABLESPACE_NAME,B.FILE_NAME,B.BYTES</span><br><span class="line">ORDER BY B.TABLESPACE_NAME;</span><br></pre></td></tr></table></figure><p><img src="/imgs/2022062810410290.jpg"></p><h2 id="2-数据库备份"><a href="#2-数据库备份" class="headerlink" title="2.数据库备份"></a>2.数据库备份</h2><h3 id="2-1登陆数据库"><a href="#2-1登陆数据库" class="headerlink" title="2.1登陆数据库"></a>2.1登陆数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@]$ sqlplus / as sysdba</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2-2创建逻辑目录"><a href="#2-2创建逻辑目录" class="headerlink" title="2.2创建逻辑目录"></a>2.2创建逻辑目录</h3><p>执行这个操作并不会在Linux中创建&#x2F;opt&#x2F;data_backup这个文件，最后需要手动去创建该文件才能进行备份。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; create directory back_dir as &#x27;/opt/backup&#x27;</span><br><span class="line">SQL&gt; select * from dba_directories; #查看所有逻辑目录,看是否创建成功</span><br></pre></td></tr></table></figure><h3 id="2-3给数据库用户文件操作权限-dbuser为数据库用户名，更具实际情况更改"><a href="#2-3给数据库用户文件操作权限-dbuser为数据库用户名，更具实际情况更改" class="headerlink" title="2.3给数据库用户文件操作权限#dbuser为数据库用户名，更具实际情况更改"></a>2.3给数据库用户文件操作权限#dbuser为数据库用户名，更具实际情况更改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grant read,write on directory back_dir to dbuser;</span><br></pre></td></tr></table></figure><h3 id="2-3创建物理目录"><a href="#2-3创建物理目录" class="headerlink" title="2.3创建物理目录"></a>2.3创建物理目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@]$ mkdir -p /opt/backup #-p 确保目录名称存在，不存在的就建一个，可使用参数创建多级目录</span><br></pre></td></tr></table></figure><h3 id="2-4备份数据库"><a href="#2-4备份数据库" class="headerlink" title="2.4备份数据库"></a>2.4备份数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@]$ expdp dbuser/passwd@192.168.110.9:1521/orcl dumpfile=dbback.dmp log=log.log directory=back_dir schemas=cbyxy</span><br></pre></td></tr></table></figure><p>exedp有很多参数，这里是用到的一些解释<br>dbuser&#x2F;<a href="mailto:&#x70;&#97;&#115;&#x73;&#x77;&#100;&#64;&#x31;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#49;&#x31;&#x30;&#46;&#x39;">&#x70;&#97;&#115;&#x73;&#x77;&#100;&#64;&#x31;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#49;&#x31;&#x30;&#46;&#x39;</a>:1521&#x2F;orcl #导出用户名&#x2F;密码@数据库IP&#x2F;数据库SID<br>dumpfile&#x3D;导出的文件名.dmp<br>log&#x3D;导出过程的日志名.log<br>directory&#x3D;备份放的路径名,用的之前的逻辑目录名<br>schemas&#x3D;要备份的数据库用户名字<br>FULL&#x3D;y #加上意思为导出整个数据库就不需要schemas参数了<br>也可以按表空间导出TABLESPACES&#x3D;<br>表名导出TABLES&#x3D;<br>等等还有很多参数自行了解</p><h2 id="3-shell脚本实现自动备份"><a href="#3-shell脚本实现自动备份" class="headerlink" title="3.shell脚本实现自动备份"></a>3.shell脚本实现自动备份</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#导入环境变量，根据具自己实际情况填写</span><br><span class="line">export ORACLE_BASE=/home/oracle/app</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/oracle/product/11.2.0/dbhome_1</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br><span class="line">export LOCAL_IP=192.168.110.183:1521</span><br><span class="line">export BACKUP_USER_IP_DIR=root@192.168.110.187:/opt/   #备份服务器的用户，ip，保存地址</span><br><span class="line">export ORACLE_USER_NAME=system #数据库的用户密码根据实际情况填写，备份整个库最好使用system或sys管理员用户</span><br><span class="line">export ORACLE_USER_PASSWD=Abc123556..</span><br><span class="line">export ORACLE_SID=orcl #不知道可以使用Oracle用户执行echo $ORACLE_SID，或者SQL&gt; SELECT instance_name FROM v$instance</span><br><span class="line">export DATA_DIR=/opt/backup   #与数据库中的逻辑地址相同,用来储存备份文件</span><br><span class="line">export DELTIME=`date -d &quot;7 days ago&quot; +%Y%m%d` # -d &quot;7 days ago&quot; 为获取七天前的日期,以日期命名方便任务自动删&gt;除</span><br><span class="line">export BAKUPTIME=`date +%Y%m%d` #备份日期年月日</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK #定义语言地域和字符集属性的环境变量，根据自己数据库情况修改</span><br><span class="line">mkdir -p $DATA_DIR</span><br><span class="line">echo &quot;Starting bakup...&quot;</span><br><span class="line">echo &quot;Backup file path $DATA_DIR/$BAKUPTIME.dmp&quot;</span><br><span class="line">expdp $ORACLE_USER_NAME/$ORACLE_USER_PASSWD@$LOCAL_IP/$ORACLE_SID dumpfile=$BAKUPTIME.dmp log=$BAKUPTIME.log directory=expdp full=y</span><br><span class="line">echo &quot;backup file success...&quot;</span><br><span class="line">tar -zcvPf $DATA_DIR/$BAKUPTIME.tar.gz $DATA_DIR/$BAKUPTIME.dmp --remove-files ##-P：指定绝对路径 --remove-files :打包后删除原文件</span><br><span class="line">echo &quot;tar the file backup successfully&quot;</span><br><span class="line">echo &quot;scp to&quot;:$BACKUP_IP</span><br><span class="line">scp $DATA_DIR/$BAKUPTIME.tar.gz $BACKUP_USER_IP_DIR #远程服务器防火墙有限制scp端口需要加：-P 端口号</span><br><span class="line">rm -f $DATA_DIR/$DELTIME.log #删除之前的备份</span><br><span class="line">echo &quot;Bakup completed.&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/2022062810410391.png"></p><h2 id="4-添加定时任务"><a href="#4-添加定时任务" class="headerlink" title="4.添加定时任务"></a>4.添加定时任务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ ]$ crontab -e</span><br></pre></td></tr></table></figure><p>添加行：</p><p>* 1 * * 6 &#x2F;opt&#x2F;back.sh #每个星期的星期六早上执行备份任务</p><p>0 0 1 * * &#x2F;opt&#x2F;back.sh #每个月的1号凌晨12点执行备份任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure><h2 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5.参考文章"></a>5.参考文章</h2><p><a href="https://www.cnblogs.com/xwdreamer/p/3511047.html">https://www.cnblogs.com/xwdreamer/p/3511047.html</a><br><a href="https://www.cnblogs.com/farmer-y/p/5888432.html">https://www.cnblogs.com/farmer-y/p/5888432.html</a><br><a href="https://blog.csdn.net/weixin_41607523/article/details/110817646">https://blog.csdn.net/weixin_41607523&#x2F;article&#x2F;details&#x2F;110817646</a><br><a href="https://blog.csdn.net/XUEYUTIANQI/article/details/113976558">https://blog.csdn.net/XUEYUTIANQI/article/details/113976558</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-看看数据库情况&quot;&gt;&lt;a href=&quot;#1-看看数据库情况&quot; class=&quot;headerlink&quot; title=&quot;1.看看数据库情况&quot;&gt;&lt;/a&gt;1.看看数据库情况&lt;/h2&gt;&lt;h3 id=&quot;1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&quot;&gt;&lt;a href=&quot;#1-1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&quot; class=&quot;headerlink&quot; title=&quot;1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&quot;&gt;&lt;/a&gt;1.1先看了下表空间情况，生产环境表空间大概90G，用了才一半不到&lt;/h3&gt;&lt;p&gt;​	查看所有表空间及使用情况&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　B.FILE_NAME 物理文件名,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　B.TABLESPACE_NAME 表空间名称,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　B.BYTES/1024/1024 大小M,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　(B.BYTES-SUM(NVL(A.BYTES,0)))/1024/1024 已使用M,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　SUBSTR((B.BYTES-SUM(NVL(A.BYTES,0)))/(B.BYTES)*100,1,5) 使用率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM DBA_FREE_SPACE A,DBA_DATA_FILES B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WHERE A.FILE_ID=B.FILE_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GROUP BY B.TABLESPACE_NAME,B.FILE_NAME,B.BYTES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ORDER BY B.TABLESPACE_NAME;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/2022062810410290.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-数据库备份&quot;&gt;&lt;a href=&quot;#2-数据库备份&quot; class=&quot;headerlink&quot; title=&quot;2.数据库备份&quot;&gt;&lt;/a&gt;2.数据库备份&lt;/h2&gt;&lt;h3 id=&quot;2-1登陆数据库&quot;&gt;&lt;a href=&quot;#2-1登陆数据库&quot; class=&quot;headerlink&quot; title=&quot;2.1登陆数据库&quot;&gt;&lt;/a&gt;2.1登陆数据库&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@]$ sqlplus / as sysdba&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/categories/linux/oracle/"/>
    
    
    <category term="oracle" scheme="https://github.com/jiangjiawei520/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>vscode常用配置</title>
    <link href="https://github.com/jiangjiawei520/post/3ce06b7a.html"/>
    <id>https://github.com/jiangjiawei520/post/3ce06b7a.html</id>
    <published>2024-04-08T15:57:15.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    
    
    
    <category term="vscode" scheme="https://github.com/jiangjiawei520/categories/vscode/"/>
    
    
    <category term="vscode" scheme="https://github.com/jiangjiawei520/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>vscode常用配置</title>
    <link href="https://github.com/jiangjiawei520/post/3ce06b7a.html"/>
    <id>https://github.com/jiangjiawei520/post/3ce06b7a.html</id>
    <published>2024-04-08T15:57:15.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode中如何将cmd设置为默认终端"><a href="#vscode中如何将cmd设置为默认终端" class="headerlink" title="vscode中如何将cmd设置为默认终端"></a>vscode中如何将cmd设置为默认终端</h2><p>vscode中如何将cmd设置为默认终端？下面本篇文章给大家介绍一下vscode中设置默认终端为cmdPowerShelWSL等的方法，希望对需要的朋友有所协助！</p><p>一、快捷键（Ctrl+Shift+P打开命令面板，输入select选择“Select Default Profile”</p><p>二、然后选择目标“Git Bash”</p><p>三、快捷键（ctrl+&#96;）调出终端，如图所示已经默认cmd</p><span id="more"></span><h2 id="查看文件的本地保存历史"><a href="#查看文件的本地保存历史" class="headerlink" title="查看文件的本地保存历史"></a>查看文件的本地保存历史</h2><p><strong>扩展中安装Local History插件</strong><br><img src="/imgs/729f0ab852694e9f834f68d12be3b124.png" alt="在这里插入图片描述"></p><p>2.<strong>打开资源管理器</strong>，可以看到一个LOCAL HISTORY<a href="https://so.csdn.net/so/search?q=%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8&spm=1001.2101.3001.7020">下拉列表</a>，直接点击某个文件，下面就可以显示你每次对该文件进行修改后保存的时间线，点击某个时间线就可以查看修改的内容，会与未修改的进行比较。<br><img src="/imgs/ffaa484cb3754189a1dafdb5aa9d3502.png" alt="在这里插入图片描述"><img src="/imgs/4ed65ff256b1463d84e64dc7411835aa.png" alt="img"></p><h2 id="VSCode-工作区"><a href="#VSCode-工作区" class="headerlink" title="VSCode 工作区"></a>VSCode 工作区</h2><h3 id="VSCode-创建工作区的的好处有以下几点"><a href="#VSCode-创建工作区的的好处有以下几点" class="headerlink" title="VSCode 创建工作区的的好处有以下几点"></a>VSCode 创建工作区的的好处有以下几点</h3><p>项目结构清晰：每个工作区都有自己的文件夹结构，可以更好地组织和管理项目文件。<br>版本控制：VSCode 支持多种版本控制系统，如Git，可以在工作区内进行代码的版本管理。<br>插件扩展：VSCode 提供了丰富的插件市场，可以根据项目需求安装不同的插件，提高工作效率。<br>多语言支持：VSCode 支持多种编程语言，可以为不同语言的项目创建不同的工作区。<br>跨平台：VSCode 支持Windows、macOS和Linux等操作系统，可以在不同平台上使用相同的工作区设置。</p><h3 id="如何建立工作区"><a href="#如何建立工作区" class="headerlink" title="如何建立工作区"></a>如何建立工作区</h3><p>1.点击文件 - 将文件夹添加到工作区，选择你需要打开的文件夹，也就是项目根目录，添加。<br>2.此时，在资源管理器中你能看到文件夹在一个无标题的工作区下面，接下来重复第1步的操作，依次将你其他项目文件夹添加到工作区<br>3.添加完需要放入工作区的项目文件夹之后，点击文件-将工作区另存为…<br>4.选择你想要保存工作区的文件夹，并且给工作区命名，比如我是命名‘project’，这个文件的后缀名是 “*.code-workspace”<br>5.点击保存之后，VS Code 就会在 workarea这个文件夹下创建一个 project.code-workspace 文件<br>6.至此，工作区建立完成，可以看到工作区的名字已经变成刚才的命名。如果想切换终端，可以使用快捷键ctrl+shift+&#96; 来切换</p><h3 id="编辑工作区设置"><a href="#编辑工作区设置" class="headerlink" title="编辑工作区设置"></a>编辑工作区设置</h3><p>在打开工作区之后，你会看到左侧的资源管理器中列出了工作区中包含的所有文件和文件夹。右键点击工作区中的任意文件或文件夹，然后选择“在资源管理器中显示（Reveal in Explorer）”。</p><p>在资源管理器中显示文件或文件夹后，你会看到右侧打开了一个名为 “xxx.code-workspace” 的文件，其中 “xxx” 是工作区的名称。双击打开这个文件。</p><h3 id="修改工作区名称"><a href="#修改工作区名称" class="headerlink" title="修改工作区名称"></a>修改工作区名称</h3><p>在编辑器中打开的 “xxx.code-workspace” 文件中，你可以看到一个 JSON 格式的文本内容。找到并修改以下部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;folders&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;: &quot;.&quot;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;settings&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 “Old Workspace Name” 修改为你想要的新名称。例如，将其修改为 “New Workspace Name”。</p><p>然后保存 “xxx.code-workspace” 文件。</p><h2 id="设置过滤某类型的文件"><a href="#设置过滤某类型的文件" class="headerlink" title="设置过滤某类型的文件"></a>设置过滤某类型的文件</h2><p>配置搜索功能，以指定忽略某些文件夹：</p><p>​如在 <code>.vscode</code> 文件夹中的 <code>settings.json</code> 文件中设置特定的过滤规则来排除 <code>.md</code> 文件，可以针对某些特定功能（如搜索）设置排除模式。例如，对于搜索功能，你可以在 <code>settings.json</code> 中设置 <code>search.exclude</code> 选项来排除 <code>.md</code> 文件。这会影响 VSCode 的文件搜索功能，但不会影响其他功能（如文件浏览器或 Git 更改视图）。</p><h3 id="打开Visual-Studio-Code"><a href="#打开Visual-Studio-Code" class="headerlink" title="打开Visual Studio Code"></a>打开Visual Studio Code</h3><p>首先，确保您已经打开了Visual Studio Code并加载了您的项目。</p><h3 id="创建-vscode文件夹"><a href="#创建-vscode文件夹" class="headerlink" title="创建.vscode文件夹"></a>创建.vscode文件夹</h3><p>要配置搜索设置，您需要在项目根目录中创建一个名为.vscode的文件夹（如果尚未存在）。可以使用以下命令在终端中创建它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .vscode</span><br></pre></td></tr></table></figure><h3 id="创建settings-json文件"><a href="#创建settings-json文件" class="headerlink" title="创建settings.json文件"></a>创建settings.json文件</h3><p>在.vscode文件夹中，您需要创建一个名为settings.json的文件，这是用于配置Visual Studio Code的设置的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .vscode/settings.json</span><br></pre></td></tr></table></figure><h3 id="配置搜索排除规则"><a href="#配置搜索排除规则" class="headerlink" title="配置搜索排除规则"></a>配置搜索排除规则</h3><p>现在，编辑settings.json文件以配置搜索排除规则。您可以使用以下JSON格式的示例进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;search.exclude&quot;: &#123;</span><br><span class="line">    &quot;**/node_modules&quot;: true,</span><br><span class="line">    &quot;**/build&quot;: true,</span><br><span class="line">    &quot;**/dist&quot;: true,</span><br><span class="line">    &quot;**/.git&quot;: true,</span><br><span class="line">    &quot;**/.vscode&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例中，我们配置了五个排除规则：</p><p>“**&#x2F;node_modules”: true - 这将排除项目中的node_modules文件夹，通常包含依赖库。</p><p>“**&#x2F;build”: true - 这将排除build文件夹，如果您的项目使用构建工具生成构建文件，可以排除它。</p><p>“**&#x2F;dist”: true - 这将排除dist文件夹，如果您的项目包含编译后的分发文件，可以排除它。</p><p>“**&#x2F;.git”: true - 这将排除.git文件夹，以防止搜索Git版本控制文件。</p><p>“**&#x2F;.vscode”: true - 这将排除.vscode文件夹，以防止搜索Visual Studio Code配置文件。<br>根据您的项目结构，您可以添加或修改这些规则以满足自己的需求。这些规则使用Glob模式匹配文件夹，true表示要排除它们。</p><h3 id="保存设置"><a href="#保存设置" class="headerlink" title="保存设置"></a>保存设置</h3><p>一旦您完成了搜索排除规则的配置，保存settings.json文件。</p><h3 id="使用搜索功能"><a href="#使用搜索功能" class="headerlink" title="使用搜索功能"></a>使用搜索功能</h3><p>现在，您可以在Visual Studio Code中使用搜索功能，而不会搜索被排除的文件夹中的内容。只有未在排除规则中指定的文件夹中的内容才会包含在搜索结果中。示例：</p><p>假设您有一个Node.js项目，项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">my-project/</span><br><span class="line">  ├── src/</span><br><span class="line">  │    ├── app.js</span><br><span class="line">  │    └── utils.js</span><br><span class="line">  ├── node_modules/</span><br><span class="line">  │    ├── module1/</span><br><span class="line">  │    └── module2/</span><br><span class="line">  ├── build/</span><br><span class="line">  │    └── bundle.js</span><br><span class="line">  ├── dist/</span><br><span class="line">  │    └── main.js</span><br><span class="line">  ├── .git/</span><br><span class="line">  ├── .vscode/</span><br><span class="line">  └── package.json</span><br></pre></td></tr></table></figure><p>​备注：项目需要设置过滤.vscode文件</p><h2 id="vscode中如何将cmd设置为默认终端-1"><a href="#vscode中如何将cmd设置为默认终端-1" class="headerlink" title="vscode中如何将cmd设置为默认终端"></a>vscode中如何将cmd设置为默认终端</h2><p>vscode中如何将cmd设置为默认终端？下面本篇文章给大家介绍一下vscode中设置默认终端为cmdPowerShelWSL等的方法，希望对需要的朋友有所协助！</p><p>一、快捷键（Ctrl+Shift+P打开命令面板，输入select选择“Select Default Profile”</p><p>二、然后选择目标“Git Bash”</p><p>三、快捷键（ctrl+&#96;）调出终端，如图所示已经默认cmd</p><h2 id="查看文件的本地保存历史-1"><a href="#查看文件的本地保存历史-1" class="headerlink" title="查看文件的本地保存历史"></a>查看文件的本地保存历史</h2><p><strong>扩展中安装Local History插件</strong><br><img src="/imgs/729f0ab852694e9f834f68d12be3b124.png" alt="在这里插入图片描述"></p><p>2.<strong>打开资源管理器</strong>，可以看到一个LOCAL HISTORY<a href="https://so.csdn.net/so/search?q=%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8&spm=1001.2101.3001.7020">下拉列表</a>，直接点击某个文件，下面就可以显示你每次对该文件进行修改后保存的时间线，点击某个时间线就可以查看修改的内容，会与未修改的进行比较。<br><img src="/imgs/ffaa484cb3754189a1dafdb5aa9d3502.png" alt="在这里插入图片描述"><img src="/imgs/4ed65ff256b1463d84e64dc7411835aa.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vscode中如何将cmd设置为默认终端&quot;&gt;&lt;a href=&quot;#vscode中如何将cmd设置为默认终端&quot; class=&quot;headerlink&quot; title=&quot;vscode中如何将cmd设置为默认终端&quot;&gt;&lt;/a&gt;vscode中如何将cmd设置为默认终端&lt;/h2&gt;&lt;p&gt;vscode中如何将cmd设置为默认终端？下面本篇文章给大家介绍一下vscode中设置默认终端为cmdPowerShelWSL等的方法，希望对需要的朋友有所协助！&lt;/p&gt;
&lt;p&gt;一、快捷键（Ctrl+Shift+P打开命令面板，输入select选择“Select Default Profile”&lt;/p&gt;
&lt;p&gt;二、然后选择目标“Git Bash”&lt;/p&gt;
&lt;p&gt;三、快捷键（ctrl+&amp;#96;）调出终端，如图所示已经默认cmd&lt;/p&gt;</summary>
    
    
    
    <category term="vscode" scheme="https://github.com/jiangjiawei520/categories/vscode/"/>
    
    
    <category term="vscode" scheme="https://github.com/jiangjiawei520/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>linux中unzip解压文件中文乱码问题的解决方案</title>
    <link href="https://github.com/jiangjiawei520/post/67e26b88.html"/>
    <id>https://github.com/jiangjiawei520/post/67e26b88.html</id>
    <published>2024-04-08T15:54:33.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在windows上压缩的文件，是以系统默认编码中文来压缩文件。由于zip文件中没有声明其编码，所以linux上的unzip一般以默认编码解压，中文文件名会出现乱码。<br>虽然2005年就有人把这报告为bug, 但是info-zip的官方网站没有把自动识别编码列入计划，可能他们不认为这是个问题。Sun对java中存在N年的zip编码问题，采用了同样的处理方式。</p><h3 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h3><p>第一种：通过unzip行命令解压，指定字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -O GBK xxx.zip (用GBK, GB18030也可以)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;在windows上压缩的文件，是以系统默认编码中文来压缩文件。由于zip文件中没有声明其编码，所以linux上的unzip一般以默认编码解压</summary>
      
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo教程</title>
    <link href="https://github.com/jiangjiawei520/post/d3f2095d.html"/>
    <id>https://github.com/jiangjiawei520/post/d3f2095d.html</id>
    <published>2024-04-08T13:40:04.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="读者先看这里"><a href="#读者先看这里" class="headerlink" title="读者先看这里"></a>读者先看这里</h2><p><strong>这篇文章是给Windows用户的，macOS也可以看哦，我就是三种系统都用滴，基本都没有问题</strong></p><hr><h2 id="Bayi使用的软件版本："><a href="#Bayi使用的软件版本：" class="headerlink" title="Bayi使用的软件版本："></a>Bayi使用的软件版本：</h2><p>OS：Windows11 22H2</p><p>Node.js：18.13.0 64-bit for windows</p><p>Git：2.39.1 for Windows x64</p><p>hexo-cli: 4.3.0</p><p>Visual Studio Code：1.74.3 for Windows8,10,11 x64（VS Code的官网： <a href="https://code.visualstudio.com/%EF%BC%89">https://code.visualstudio.com/）</a></p><hr><h2 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么"></a>Hexo是什么</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" title="Markdown">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p><p>——<a href="https://hexo.io/zh-cn/" title="Hexo官网">Hexo官网</a></p></blockquote><p>Hexo可以简单快速的搭建你的个人Blog并部署到你的域名或折到<a href="https://pages.github.com/" title="Github Pages">Github Pages</a>当然，也可以是<a href="https://about.gitlab.com/stages-devops-lifecycle/pages/" title="Gitlab Pages">Gitlab Pages</a></p><p>具体可以参照<a href="https://hexo.io/zh-cn/" title="Hexo官网">Hexo官网</a></p><hr><p><a href="https://about.gitlab.com/stages-devops-lifecycle/pages/" title="Gitlab Pages">Gitlab Pages</a></p><span id="more"></span><h2 id="在此之前"><a href="#在此之前" class="headerlink" title="在此之前"></a>在此之前</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Hexo是基于Node.js构建的，所以我们需要下载TA</p><p>中文官网：<a href="https://nodejs.org/zh-cn/" title="去下载">去下载</a></p><p><strong>P.S.：这里建议大家下载长期维护版，相比于最新尝鲜版，长期维护版会更加稳定</strong></p><p><strong>在整个项目中，Bayi的Node.js版本使用的是18.13.0，如果你的Node.js版本比Bayi的版本低或高，也许但未必会****出现不兼容，报错的情况</strong></p><p>在你的Windows<strong>没有</strong>Node.js的情况下打开后缀名为.msi的Windows Installer程序包，你会看到下图的界面</p><p><img src="/imgs/c012c46336df46c59c32381c45f77dcd.png"></p><p>2-1-1</p><h4 id="许可协议"><a href="#许可协议" class="headerlink" title="许可协议"></a>许可协议</h4><p>点击Next,将看到2-1-2图的界面</p><p><img src="/imgs/d097ac0365374f16a47e5c2e26136a45.png"></p><p>2-1-2</p><h4 id="选择安装地址"><a href="#选择安装地址" class="headerlink" title="选择安装地址"></a>选择安装地址</h4><p>按照2-1-2图的提示操作后，点击Next，选择安装地址，默认在“ C:\Program Files\nodejs\ ”建议改到其他盘符，如Bayi的D盘专门用来装软件，所以Bayi的安装地址为“ D:\nodejs\ ”，见2-1-3图</p><p><img src="/imgs/7a9afa93e1a34d4f9fdc1fb80602d25a.png"></p><p>2-1-3</p><h4 id="选择安装组件"><a href="#选择安装组件" class="headerlink" title="选择安装组件"></a>选择安装组件</h4><p>点击Next，见2-1-4图</p><p><img src="/imgs/cd73e4c7360d43b8847cc768aedbdfb5.png"></p><p>2-1-4</p><p> 全部选择后点击Next，见2-1-5图</p><p><img src="/imgs/a03a8ae4e1d74ae1bd046472e8027838.png"></p><p>2-1-5</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>点击Next后，见2-1-6图</p><p><img src="/imgs/0a89733183404c17aa3ce700c9535a47.png"></p><p>2-1-6</p><p> 等待安装完成后点击“ Finish ”，见2-1-7图和2-1-8图</p><p><img src="/imgs/5193c50005964ac4a43deda57c0d911a.png"></p><p>2-1-7</p><p><img src="/imgs/6f0cf71f0abe44b7bdab803a1357329a.png"></p><p>2-1-8</p><h4 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h4><p>安装完成后打开Powershell，见2-1-9图和2-1-10图</p><p>P.S.:Win+R打开运行</p><p><img src="/imgs/40f708c10d474f78b3ab31b8e76e88be.png"></p><p>2-1-9</p><p><img src="/imgs/6f62cf752ded4f1b8c90a8e87e1a9006.png"></p><p>2-1-10</p><h4 id="更改全局模块所在路径和缓存路径地址"><a href="#更改全局模块所在路径和缓存路径地址" class="headerlink" title="更改全局模块所在路径和缓存路径地址"></a>更改全局模块所在路径和缓存路径地址</h4><p>如果你的运行效果和Bayi一样，请继续往下看</p><p>下面，我们把<strong>全局模块所在路径</strong>和<strong>缓存路径</strong>放在自己的Node.js安装的文件夹中</p><p>在安装目录下新建【node_global】【node_cache】文件夹，见2-1-11图</p><p><img src="/imgs/a2baf3cc2aad4e4e850daffbf8ba6587.png"></p><p>2-1-11</p><p> 在刚才的Powershell中输入这两个命令，具体见2-1-12图</p><p><img src="/imgs/b4f895a7f6fd44119855673d9af51e7b.png"></p><p>2-1-12</p><p>搜索系统环境变量并打开“ 编辑系统环境变量 ”，选择“ 环境变量 ”即可见到2-1-13图的窗口</p><p><img src="/imgs/db00db49bdc443b08a63857630a7fa7d.png"></p><p>2-1-13</p><p> 新建用户环境变量，变量名命名为“ NODE_PATH ”，变量值为你的Node.js的安装路径，见2-1-14</p><p><img src="/imgs/f0b8827d9b7c4ae08a0f8378376059b2.png"></p><p>2-1-14</p><p>之后点击确定，在系统变量中找到“ Path ”，添加Nodejs全局文件夹，也就是刚才新建的 “ node_global ”文件夹的绝对路径，见2-1-15图</p><p><img src="/imgs/a003e7658b9e4563b23bbbcd7ba48958.png"></p><p>2-1-15</p><p> 之后依次点击确定即可</p><hr><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>如果你要将你的项目推送到Github Pages或者Gitlab Pages,你会需要它，本文将以GitHub Pages作为示例，当然，如果你要使用自己的域名，也可能需要Git</p><p>Git下载：<a href="https://git-scm.com/" title="去下载">去下载</a></p><p>这里Bayi用的是2.39.1 64-bit for Windows版本，且之后都会使用这个版本的Git,与Node.js一样，<strong>如果你的Git版本比Bayi的版本低或高，也许但未必会****出现不兼容，报错的情况</strong></p><h4 id="下载并打开Git安装包"><a href="#下载并打开Git安装包" class="headerlink" title="下载并打开Git安装包"></a>下载并打开Git安装包</h4><p>之后点击Next，见2-2-1图</p><p><img src="/imgs/8efee4aeac7b4acbbf7c7b7aafed7492.png"></p><p>2-2-1</p><h4 id="选择安装路径"><a href="#选择安装路径" class="headerlink" title="选择安装路径"></a>选择安装路径</h4><p>点击Next后，请按2-2-2图操作</p><p><img src="/imgs/1d55555271484f17b7550e808bc960af.png"></p><p>2-2-2</p><h4 id="选择安装组件-1"><a href="#选择安装组件-1" class="headerlink" title="选择安装组件"></a>选择安装组件</h4><p>下一步的界面Bayi给大家翻译出来了，见2-2-3图</p><p><img src="/imgs/7ad97c5bd4474b5291383f88dbf3dcc0.png"></p><p>2-2-3</p><p> 下面是Bayi的选择，可供参考,见2-2-4图</p><p><img src="/imgs/2218f448229c4dd39f58c3ab19ab5a03.png"></p><p>2-2-4</p><p> P.S.：最后一个选项打勾的话，需要下载 Windows Terminal 配合 Git Bash使用，Windows11 22H2自带Windows Terminal，效果如2-2-20图</p><p><img src="/imgs/fccc2ad8a4df4a509a68269fc12ac9fc.png"></p><p>2-2-21</p><p>P.S.：这张原本应该是2-2-5，Bayi当时没注意，按最后图号顺延，这张图号应是2-2-21</p><h4 id="选择开始菜单文件夹名称"><a href="#选择开始菜单文件夹名称" class="headerlink" title="选择开始菜单文件夹名称"></a>选择开始菜单文件夹名称</h4><p>点击Next后进入开始菜单文件夹选择，见2-2-5图</p><p><img src="/imgs/f5e11bb6714f4ae0b7004b282cd7f387.png"></p><p>2-2-5</p><h4 id="选择-Git-默认编辑器"><a href="#选择-Git-默认编辑器" class="headerlink" title="选择 Git 默认编辑器"></a>选择 Git 默认编辑器</h4><p>点击Next后，Git 安装程序里面内置了 10 种编辑器供你挑选，比如 Atom、Notepad、Notepad++、Sublime Text、Visual Studio Code、Vim 等等，默认的是 Vim ，选择 Vim 后可以直接进行到下一步，但是 Vim 是纯命令行，操作有点难度，需要学习。如果选其他编辑器，则还需要去其官网安装后才能进行下一步，这里Bayi使用了默认Vim,见2-2-6图</p><p><img src="/imgs/adb5742b88de44deb07097cec489a403.png"></p><p>2-2-6</p><p> 点击Next</p><h4 id="决定初始化新项目-仓库-的主干名字"><a href="#决定初始化新项目-仓库-的主干名字" class="headerlink" title="决定初始化新项目(仓库)的主干名字"></a>决定初始化新项目(仓库)的主干名字</h4><p>注： 第二个选项下面有个 NEW！ ，说很多团队已经重命名他们的默认主干名为 main . 这是因为2020 年非裔男子乔治·弗洛伊德因白人警察暴力执法惨死而掀起的 Black Lives Matter(黑人的命也是命)运动，很多人认为 master 不尊重黑人，呼吁改为 main</p><p>这里，Bayi选择的是main，见2-2-7图</p><p><img src="/imgs/bce61f7fbe584491b227587c3a03db5c.png"></p><p>2-2-7</p><p>点击Next</p><h4 id="Path调整"><a href="#Path调整" class="headerlink" title="Path调整"></a>Path调整</h4><p>见2-2-8图</p><p><img src="/imgs/3154339dc9c34539b0213c8e08d2c7ec.png"></p><p>2-2-8</p><p>2-2-8图翻译为：</p><blockquote><p>仅从 Git Bash 使用 Git<br>这是最谨慎的选择，因为您的 PATH 根本不会被修改。您将只能使用 Git Bash 中的 Git 命令行工具。</p></blockquote><blockquote><p>从命令行以及第三方软件进行 Git<br>（推荐）此选项仅将一些最小的 Git 包装器添加到PATH中，以避免使用可选的 Unix 工具使环境混乱。<br>您将能够使用 Git Bash 中的 Git，命令提示符和 Windov PowerShell 以及在 PATH 中寻找 Git 的任何第三方软件。</p></blockquote><blockquote><p>使用命令提示符中的 Git 和可选的 Unix 工具<br>Git 和可选的 Unix 工具都将添加到您的 PATH 中。<br>警告：这将覆盖 Windows 工具，例如 “find” and “sort”. 仅在了解其含义后使用此选项。</p></blockquote><p>在这里，默认即可</p><p>选择 SSH 执行文件，见2-2-9图</p><p><img src="/imgs/387052d029b2402ba3b3a3498bdb8a3a.png"></p><p>2-2-9</p><p>2-2-9图翻译如下</p><blockquote><p>Use bundled OpenSSH<br>This uses ssh. exe that comes with Git.<br>使用捆绑的 OpenSSH<br>这使用的 ssh.exe 是 Git 自带的 </p></blockquote><blockquote><p>使用外部 OpenSSH<br>新！这使用外部 ssh.exe 文件。<br>Git 不会安装自己的 OpenSSH（和相关）二进制文件，而是使用在环境变量 PATH 中找到的它们。</p></blockquote><p>这里默认即可</p><p>点击Next</p><h4 id="选择HTTPS传输"><a href="#选择HTTPS传输" class="headerlink" title="选择HTTPS传输"></a>选择HTTPS传输</h4><p>见2-2-10图</p><p><img src="/imgs/f04e3e96e15647299bca416bb3c4d632.png"></p><p>2-2-10</p><p>翻译如下：</p><blockquote><p>使用 OpenSSL 库<br>服务器证书将使用 ca-bundle.crt 文件进行验证。</p></blockquote><blockquote><p>使用本机 Windows 安全通道库<br>服务器证书将使用 Windows 证书存储进行验证。<br>此选项还允许您使用公司内部分发的内部根 CA 证书，例如通过 Active Directory 域服务。</p></blockquote><p>这两种选项有什么区别呢？</p><blockquote><p>如果在具有企业管理证书的组织中使用 Git，则将需要使用安全通道。如果你仅使用 Git 来访问公共存储库（例如 GitHub ），或者你的组织不管理自己的证书，那么使用 SSL 后端（它们只是同一协议的不同实现）就可以了。</p><p>——Stack Overflow</p></blockquote><p>也就是说，作为普通用户，只是用 Git 来访问 Github、GitLab 等网站，选择前者即可，点击Next，进入下一步</p><h4 id="配置行尾符号转换"><a href="#配置行尾符号转换" class="headerlink" title="配置行尾符号转换"></a>配置行尾符号转换</h4><p>见2-2-11图</p><p><img src="/imgs/e6a5d6178fee4fc9b7fa4af9512930c9.png"></p><p>2-2-11</p><p>2-2-11图翻译如下</p><blockquote><p>签出 Windows 样式，提交 Unix 样式的行结尾<br>Git 签出文本文件时，会将 LF 转换为 CRLF。<br>提交文本文件时，CRLF 将转换为 LF。<br>对于跨平台项目，这是 Windows 上的建议设置（”core.autocrif” 设置为 “true”）。</p></blockquote><blockquote><p>按原样签出，提交 Unix 样式的行结尾<br>Git 在签出文本文件时不会执行任何转换。提交文本文件时，CRLF 将转换为 LF。<br>对于跨平台项目，这是在 Unix 上的建议设置（”core.autocrif” 设置为 “input”）。</p></blockquote><blockquote><p>按原样签出，按原样提交<br>Git 在签出或提交文本文件时不会执行任何转换。<br>不建议跨平台项目选择此选项（”core.autocrif” 设置为 “false”）。</p></blockquote><p>他们之间的区别我们引用一下阮一峰老师的Blog，原文：<a href="http://www.ruanyifeng.com/blog/2006/04/post_213.html" title="回车和换行 - 阮一峰的网络日志 (ruanyifeng.com)">回车和换行 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><blockquote><p>Unix系统里，每行结尾只有”&lt;换行&gt;”，即”\n”；Windows系统里面，每行结尾是”&lt;回车&gt;&lt;换行&gt;”，即”\r\n”；Mac系统里，每行结尾是”&lt;回车&gt;”。一个直接后果是，Unix&#x2F;Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix&#x2F;Mac下打开的话，在每行的结尾可能会多出一个^M符号。 </p></blockquote><p>而Bayi这里的项目是要提交的Github Pages上的，下面是引用 <a href="https://book.douban.com/subject/26462816/" title="《GitHub入门与实践》">《GitHub入门与实践》</a> 第 50 页内容：</p><blockquote><p>GitHub 中公开的代码大部分都是以 Mac 或 Linux 中的 LF（Line Feed）换行。然而，由于 Windows 中是以 CRLF（Carriage Return+ Line Feed）换行的，所以在非对应的编辑器中将不能正常显示。</p><p>Git 可以通过设置自动转换这些换行符。使用 Windows 环境的各位，请选择推荐的 “Checkout Windows-style，commit Unix-style line endings” 选项。换行符在签出时会自动转换为 CRLF，在提交时则会自动转换为 LF .</p></blockquote><p>所以这里我们选择第一项，点击Next</p><h4 id="配置终端模拟器以与-Git-Bash-一起使用"><a href="#配置终端模拟器以与-Git-Bash-一起使用" class="headerlink" title="配置终端模拟器以与 Git Bash 一起使用"></a>配置终端模拟器以与 Git Bash 一起使用</h4><p>见2-2-12图</p><p><img src="/imgs/daa3c8ac68ef42d38738be7be6caf880.png"></p><p>2-2-12</p><p> 2-2-12图翻译如下</p><blockquote><p>使用 MinTTY（MSYS2的默认终端）<br>Git Bash 将使用 MinTTY 作为终端仿真器，该仿真器具有可调整大小的窗口非矩形选择和 Unicode 字体。<br>Windows 控制台程序（例如交互式 Python）必须通过 “winpty” 启动才能在 MinTTY 中运行。</p></blockquote><blockquote><p>使用 Windows 的默认控制台窗口<br>Git 将使用 Windows 的默认控制台窗口（”cmd.exe”），该窗口可与 Win32 控制台程序（例如交互式Python 或<br>node.js）一起使用，但默认回滚非常有限，需要将其配置为使用 Unicode 字体才能正确显示非 ASCII 字符，并且在<br>Windows 10 之前，其窗口不可随意调整大小，并且仅允许选择矩形文本。</p></blockquote><p>建议选择第一种，MinTTY 3功能比 cmd 多，cmd 只不过 比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（cmd）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。<br>相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash 。</p><p>选择之后点击Next</p><h4 id="选择默认的-“git-pull”-行为"><a href="#选择默认的-“git-pull”-行为" class="headerlink" title="选择默认的 “git pull” 行为"></a>选择默认的 “git pull” 行为</h4><p><img src="/imgs/eb36151f9fee4fb8ac67be122fe0b476.png"></p><p>2-2-13</p><p>2-2-13翻译如下</p><blockquote><p>默认（快进或合并）<br>这是 “git pull” 的标准行为：在可能的情况下将 当前分支 快进到 获取的分支，否则创建合并提交。</p></blockquote><blockquote><p>变基将当前分支变基到获取的分支上。如果没有本地提交要变基，则等同于快进。</p></blockquote><blockquote><p>只能快进快进到获取的分支。如果不可能，则失败。</p></blockquote><p>Git安装程序给了三个 “git pull” 的行为：<br>第一个是 merge<br>第二个是 rebase<br>第三个是 直接获取</p><p>第一种 git pull &#x3D; git fetch + git merge<br>第二种 git pull &#x3D; git fetch + git rebase<br>第三种 git pull &#x3D; git fetch</p><p>一般默认选择第一项，” git rebase “绝大部分程序员都用不好或者不懂，而且风险很大，但是很多会用的人也很推崇，Bayi认为“ git rebase ”挺好用，但是用不好就是灾难。</p><p>git pull 只是拉取远程分支并与本地分支合并，而 git fetch 只是拉取远程分支，怎么合并，选择 merge 还是 rebase ，可以再做选择。</p><p>在这里给大家一张图，见2-2-14图</p><p><img src="/imgs/b455bf43fb706b5d58fd7ac0e6a7f2b3.jpeg"></p><p>2-2-14</p><h4 id="选择一个凭证帮助程序"><a href="#选择一个凭证帮助程序" class="headerlink" title="选择一个凭证帮助程序"></a>选择一个凭证帮助程序</h4><p><img src="/imgs/5460a6e8b9f24ebcabe5844e69ed92a5.png"></p><p>2-2-15</p><p>图2-2-15翻译如下</p><blockquote><p>Git 凭证管理<br>使用跨平台的 Git  凭证管理。<br>在此处查看有关 Git 凭证管理未来的更多信息。</p></blockquote><blockquote><p>不使用凭证助手。</p></blockquote><p>一共两个选项：</p><ul><li>Git凭证管理</li><li>不适用使用凭证助手</li></ul><p>第一个选项是提供登陆凭证帮助的，Git 有时需要用户的凭据才能执行操作；例如，可能需要输入用户名和密码才能通过 HTTP 访问远程存储库（GitHub，GItLab 等等）</p><p>点击Next</p><h4 id="配置额外的选项"><a href="#配置额外的选项" class="headerlink" title="配置额外的选项"></a>配置额外的选项</h4><p>见图2-2-16</p><p><img src="/imgs/e3806cb51e2548b785232ab7728fc63e.png"></p><p>2-2-16</p><p> 2-2-16图翻译如下</p><blockquote><p>启用文件系统缓存<br>将批量读取文件系统数据并将其缓存在内存中以进行某些操作（”core.fscache” 设置为 “true”）。<br>这可以显着提高性能。</p></blockquote><blockquote><p>启用符号链接<br>启用符号链接（需要SeCreateSymbolicLink权限）。<br>请注意，现有存储库不受此设置的影响。</p></blockquote><p>启用文件系统缓存就是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。<br>启用符号链接 ，符号链接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用，类似于 Windows 的快捷方式，不完全等同 类Unix（如 Linux） 下的 符号链接。因为该功能的支持需要一些条件，所以默认不开启。</p><p>点击Next</p><h4 id="配置实验性选项"><a href="#配置实验性选项" class="headerlink" title="配置实验性选项"></a>配置实验性选项</h4><p>见2-2-17图</p><p><img src="/imgs/8cb4b6c6c995496ab389b1619390e3a5.png"></p><p>2-2-17</p><blockquote><p>启用对伪控制台的实验性支持。<br>(新功能!) 这允许在不使用 winpty 的情况下在 Git Bash 窗口中运行诸如 Node 或 Python 之类的本机控制台程序，<br>但是它仍然存在已知的 bug。</p></blockquote><blockquote><p>启用实验性内置文件系统监视器<br>（新！）自动运行内置文件系统监视器，以加快包含许多文件的工作树中的常见操作，例如 ‘git status’、’git add’、’git commit’ 等.</p></blockquote><p>这都是Git的实验性功能，为了稳定性，没必要开启</p><p>点击Install开始安装，见2-2-18图</p><p><img src="/imgs/f692c51070c34a978f2aa16fecd64aff.png"></p><p>2-2-18</p><p> 安装完成，见2-2-19图</p><p><img src="/imgs/87fb141793724cecab94057758ec8774.png"></p><p>2-2-19</p><p>打开终端，配置你的名称和邮箱，见2-2-20图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的git用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的git登录邮箱&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/f129b413f10e4cedb3e774b2cc6dd199.png"></p><p>2-2-20</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>Github相信大家并不陌生，如果大家没听说过也没注册过，可以见这两篇文章</p><p> Github的注册：<a href="https://www.cnblogs.com/moshuying/p/15367181.html" title="❤️github注册教程最新版(✨图文并茂最新版保姆级教程:建议收藏💘) - 墨抒颖 - 博客园 (cnblogs.com)">❤️github注册教程最新版(✨图文并茂最新版保姆级教程:建议收藏💘) - 墨抒颖 - 博客园 (cnblogs.com)</a></p><p>Github的简介：<a href="https://baike.baidu.com/item/github/10145341" title="Github_百度百科 (baidu.com)">Github_百度百科 (baidu.com)</a> </p><p>生成和添加SSH，见2-3-1图</p><p><img src="/imgs/b5e3ef40acb64c0289ca532407aea56e.png"></p><p>2-3-1</p><p>将你的公钥添加到GitHub中，见2-3-2，2-3-3，2-3-4，2-3-5，2-3-6图</p><p><img src="/imgs/c3f3afa45915498c870bb8d09cf32e4c.png"></p><p>2-3-2</p><p>2-3-2和下面几张图不知为啥违规了，文字解释一下（感谢<a href="https://blog.csdn.net/HMM_6?type=blog" title="HMM_6">HMM_6</a>大佬的指出）：点击头像</p><p><img src="/imgs/bc697adf7687489bb4ae8e9988ecdda4.png"></p><p>2-3-3</p><p>选择Settings </p><p><img src="/imgs/141b60f75fec4776a56c920690f97bfc.png"></p><p>2-3-4</p><p> 选择SSH and GPG keys</p><p><img src="/imgs/281192363f1e4492b715589a5326e03a.png"></p><p>2-3-5</p><p><img src="/imgs/cdea9420f59f411c8c74285056db36a1.png"></p><p>2-3-6</p><p>至此，所有的准备工作已经完成了！！！</p><hr><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>前面絮絮叨叨给大家写了五千六百字的准备工作，从这里开始，我们开始讲<strong>重点</strong>了！</p><p>还是原来那个Powershell，输入下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果你是严格按照上面的教程做的，你会看到3-2-1图的输出</p><p><img src="/imgs/cb04efd6b02142bca9b831ce1b775836.png"></p><p>3-2-1</p><p>验证安装，执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>可以看到3-2-2图输出：</p><p><img src="/imgs/06aa20c312d54137adb812cb9db6c2cc.png"></p><p>3-2-2</p><hr><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>cd到你要创建项目文件夹的目录，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>P.S.:“ blog ”是文件夹名，可以更改为你想要的，hexo会在里面创建项目</p><p>当然也可以cd到你先创建项目的文件夹，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>见4-1-1图 </p><p><img src="/imgs/c1ce6a57a92446e7aa4d60b7883a7708.png"></p><p>4-1-1</p><p>上面的命令就新建了文件夹【blog】见4-1-2图</p><p><img src="/imgs/3a4166d1eeb843ce922d94bc6574634f.png"></p><p>4-1-2</p><p>里面有项目文件，见4-1-3图</p><p><img src="/imgs/f9a3815f6880482da38e8507892d4040.png"></p><p>4-1-3</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>上面执行完后cd到刚才新建的目录安装依赖，命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>如果无误，即可得到4-1-4图的输出</p><p><img src="/imgs/7750d1cc20fb4a3b9369709f8193de15.png"></p><p>4-1-4</p><h3 id="更改-gitignore文件"><a href="#更改-gitignore文件" class="headerlink" title="更改.gitignore文件"></a>更改.gitignore文件</h3><p> P.S.:在这篇Blog中，Bayi用的是文本编译器是Visual Studio Code，已下简称VSCode,记得一定要用管理员权限，不然npm用不了</p><p>打开VSCode（管理员）,保存工作区，Bayi习惯在项目根目录下保存，记得在.gitignore里加入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.code-workspace</span><br></pre></td></tr></table></figure><p> 如果你和Bayi一样，安装了Local History插件，在保存工作区的时候应该多了.history文件夹，记得要在.gitignore文件添加下面一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">history</span></span><br></pre></td></tr></table></figure><p>这是我的.gitignore文件，见4-1-5图</p><p><img src="/imgs/5912f10e9f99432fbce8adca05ffa65b.png"></p><p>4-1-5</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_multiconfig.yml</span><br><span class="line">*.code-workspace</span><br><span class="line">.<span class="built_in">history</span></span><br></pre></td></tr></table></figure><h3 id="创建静态文件"><a href="#创建静态文件" class="headerlink" title="创建静态文件"></a>创建静态文件</h3><p>在VSCode打开终端，创建静态文件，见4-1-6图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="/imgs/dc0dd6645cfa4a3a96c3918d68d2811f.png"></p><p>4-1-6</p><p>启动服务器</p><p>然后启动服务器，见 4-1-7图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>上面两个都可以</p><p><img src="/imgs/0a27a15ad08c4fb5aa8636a56945be2f.png"></p><p>4-1-7</p><p> 然后打开浏览器，访问<a href="http://localhost:4000/" title="localhost:4000">localhost:4000</a>，你会看到4-1-8图的界面</p><p><img src="/imgs/a0769774d595413cb5d94b749bc383c2.png"></p><p>4-1-8</p><p> CTRL+C停止服务器，让我们给我们的Blog个性化一些</p><hr><h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><h3 id="更改根目录的-config-yml文件"><a href="#更改根目录的-config-yml文件" class="headerlink" title="更改根目录的_config.yml文件"></a>更改根目录的_config.yml文件</h3><p>翻译见5-1-1图</p><p><img src="/imgs/d385e5478b9a4f3f8ff3ac9a9e04650b.png"></p><p>5-1-1</p><p> 我的更改如下，见5-1-2图</p><p><img src="/imgs/32aee229ca31421fbd8160e1a2ebadc4.png"></p><p>5-1-2</p><p> 然后执行如下命令（记得关闭服务器）：</p><p>清理静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>重新生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>P.S.:以上简称重启Hexo</p><p>见5-1-3图</p><p><img src="/imgs/1c378305a4e2484aa1d3cbaf6def93c2.png"></p><p>5-1-3</p><h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>可这个主题（你见到的用户界面）未免一点丑，在官网上有很多主题，<a href="https://hexo.io/themes/" title="去看看">去看看</a></p><p>这里，我们以Fluild主题为例</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid" title="GitHub仓库">GitHub仓库</a>        <a href="https://hexo.fluid-dev.com/docs/guide/" title="配置指南">配置指南</a></p><p><a href="https://hexo.fluid-dev.com/" title="官网">官网</a>        <a href="https://hexo.fluid-dev.com/docs/icon/" title="图标">图标</a>        <a href="https://hexo.fluid-dev.com/docs/" title="文档">文档</a></p><p>在项目根文件夹中的themes打开刚才安装好的Git，克隆主题，见5-1-4图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:fluid-dev/hexo-theme-fluid.git</span><br></pre></td></tr></table></figure><p><img src="/imgs/edea1e52065c4921b6f8d380a54e3ff7.png"></p><p>5-1-4</p><p> 见5-1-5图，5-1-6图</p><p><img src="/imgs/2e6f4134eb624cf1bce045d7b4831f81.png"></p><p>5-1-5</p><p><img src="/imgs/0c5d0a08636b47b6b13561a3b6e58561.png"></p><p>5-1-6</p><p> 克隆后将文件夹重命名为fluid并在根目录_config.yml文件更改主题名，见5-1-7图</p><p><img src="/imgs/e8556e9b674a48e6b59f6dd53900bf18.png"></p><p>5-1-7</p><p> 重启Hexo，见5-1-8图</p><p><img src="/imgs/6957151645cc41a49d14ebd84371e92e.png"></p><p>5-1-8</p><p> 主题的配置文件（在&#x2F;thems&#x2F;fluid&#x2F;_config.yml)的注释已经写的很清楚了，Bayi在这里简单唠叨一下</p><h4 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h4><p>这里以valine为例</p><p>注册<a href="https://leancloud.app/" title="LeanCloud国际版">LeanCloud国际版</a>账号，中国版也可以，不过要实名，进入<a href="https://leancloud.app/" title="官网">官网</a>，见5-2-1图</p><p><img src="/imgs/54722ea5fe1a4901a7470d2da9ae795b.png"></p><p>5-2-1</p><p>点击页面上方Console，进入登陆页面，见5-2-2和5-2-3图</p><p><img src="/imgs/dcf51867218e4e3e8ee5127c597955d1.png"></p><p>5-2-2</p><p><img src="/imgs/c1289d5de3114ec3bb0edd1315a34750.png"></p><p>5-2-3</p><p> 注册完成后记得验证邮箱，见5-2-4，5-2-5，5-2-6图</p><p><img src="/imgs/2e62a494b095418e82ef815b9b10ca53.png"></p><p>5-2-4</p><p><img src="/imgs/b63a7f3c0d814e688beb34065e18d123.png"></p><p>5-2-5</p><p><img src="/imgs/b69b774b79af4ee5bbec624eea3992bf.png"></p><p>5-2-6</p><p> 验证后创建应用，见5-2-7，5-2-8图</p><p><img src="/imgs/f719cf1eec0e446b8442571c219777f4.png"></p><p>5-2-7</p><p><img src="/imgs/5c720e12dd8f4a37a9ad2da2c2134df5.png"></p><p>5-2-8</p><p> 点击创建后，进入应用，见5-6-7，5-6-8，5-6-9图</p><p><img src="/imgs/610dbb70c2934173bfba33448ffa1d17.png"></p><p>5-2-7</p><p><img src="/imgs/a9b53f9b816b485982b0d34204d3507e.png"></p><p>5-2-8</p><p><img src="/imgs/1e19898af033456bba6462af68a62e72.png"></p><p>5-2-9</p><p> 重启Hexo即可，见5-6-10图</p><p><img src="/imgs/d8d72b78b3ca48b5b41dfdf3d7ec50a2.png"></p><p>5-2-10</p><p> 搞定！</p><h4 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h4><p>创建关于页，见5-3-1和5-3-2图</p><p><img src="/imgs/865f0b5107fb4997b5fe15ed8a68a1cb.png"></p><p>5-3-1</p><p><img src="/imgs/2f8cdfbb917e428aa2e4ff3e48c0e09f.png"></p><p>5-3-2</p><p>更改about页面的信息</p><p><img src="/imgs/f89bd144ab1f4036a4fd3d7295be3574.png"></p><p>5-3-3</p><p>编辑关于页的Front-matter</p><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量,见5-3-3图</p><p><img src="/imgs/7948e19fc14f4564b635d6f2f3321455.png"></p><p>5-3-4</p><p> 重启Hexo，看看效果，见5-3-5图</p><p><img src="/imgs/849e0c9803574a9397858da12d491637.png"></p><p>5-3-5</p><hr><h2 id="关于Valine你要知道的事"><a href="#关于Valine你要知道的事" class="headerlink" title="关于Valine你要知道的事"></a>关于Valine你要知道的事</h2><p>如果你和Bayi一样，使用valine做评论系统，那么你需要认真阅读下面的文段</p><h3 id="发送请求中响应内容明文暴露"><a href="#发送请求中响应内容明文暴露" class="headerlink" title="发送请求中响应内容明文暴露"></a>发送请求中响应内容明文暴露</h3><blockquote><p>请求的返回内容包括评论者IP、邮箱等隐私数据，一览无余。</p><p>——Github Issues </p></blockquote><p><a href="https://github.com/xCss/Valine/issues/336" title="链接">链接</a></p><p>鉴于这个，还有LeanCloud国际版需要翻墙发评论，Bayi正在考虑引进Twikoo评论系统，之后如果Bayi研究明白了会更新的</p><h3 id="LeanCloud国际版评论"><a href="#LeanCloud国际版评论" class="headerlink" title="LeanCloud国际版评论"></a>LeanCloud国际版评论</h3><p><a href="https://github.com/xCss/Valine/issues/421" title="见Bayi自己提的Issues">见Bayi自己提的Issues</a>，我在GitHub详细写出了我遇到的问题（那次是Bayi第一次用Hexo搭Blog）</p><p>在这里，再次感谢大佬ads38，Bayi的Issues就是这位大佬解答的</p><hr><h2 id="Admin界面"><a href="#Admin界面" class="headerlink" title="Admin界面"></a>Admin界面</h2><p>为了让我们管理我们的Hexo更方便，让我们为我们的Hexo添加一个管理员界面</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装插件hexo-admin，见图7-1-1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><p><img src="/imgs/2cbcc16339a04ed092e7cdcbf56c1b7d.png"></p><p>7-1-1</p><h3 id="进入Admin页面"><a href="#进入Admin页面" class="headerlink" title="进入Admin页面"></a>进入Admin页面</h3><p>重启Hexo，打开<a href="http://localhost:4000/admin" title="localhost:4000/admin">localhost:4000&#x2F;admin</a>，见7-1-2图</p><p><img src="/imgs/3ec085053c1945e88c4cef69b191d797.png"></p><p>7-1-2</p><h3 id="设置Admin账户信息"><a href="#设置Admin账户信息" class="headerlink" title="设置Admin账户信息"></a>设置Admin账户信息</h3><p> 打开Settings，设置Admin账户信息，见7-1-3，7-1-4，7-1-5图</p><p><img src="/imgs/1521757e392648e68d86dc8b3879954a.png"></p><p>7-1-3</p><p><img src="/imgs/7239a6718c144677a3ffcb771a618960.png"></p><p>7-1-4</p><p><img src="/imgs/97bf1ced76fb4d38aeffa71ca05c2948.png"></p><p>7-1-5</p><p>重启Hexo，然后访问改才的管理员界面，就可以看到身份验证了，见7-1-6图</p><p><img src="/imgs/d6e32e03a23f4db59b8376cd3bb5f116.png"></p><p>7-1-6</p><p>之后这个管理员界面就可以让你自由管理你的Blog而不被其他人插手了</p><h2 id="文章-Post-，页面-Page-和草稿-Draft"><a href="#文章-Post-，页面-Page-和草稿-Draft" class="headerlink" title="文章(Post)，页面(Page)和草稿(Draft)"></a>文章(Post)，页面(Page)和草稿(Draft)</h2><h3 id="文章-Post"><a href="#文章-Post" class="headerlink" title="文章(Post)"></a>文章(Post)</h3><h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post</span><br></pre></td></tr></table></figure><p>post是文章名，可以自由更改，新建后会在&#x2F;source&#x2F;_post创建一个【文章名.md】的文件，见8-1-1图</p><p><img src="/imgs/7397af4e22a1457cbef64a3b53df13b0.png"></p><p>8-1-1</p><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p>Front-matter是保存文章信息的地方，我们在上面“ About界面 ”中提到过它，这里给大家详细讲解</p><p>8-1-2图中标记的范围就是Front-matter</p><p><img src="/imgs/2772cf9f5d3e49dfa8be4c72333cd81e.png"></p><p>8-1-2</p><p> 里面写明了文章创建的时间，标签，名字，也可以加入，分类，更改日期，评论系统是否开启等，具体见Hexo官方文档和Fluid官方配置指南全文都有</p><p><a href="https://hexo.io/zh-cn/docs/front-matter" title="Front-matter | Hexo">Front-matter | Hexo</a>        <a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/" title="配置指南 | Hexo Fluid 用户手册 (fluid-dev.github.io)">配置指南 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p><h4 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h4><p>MarkDown是一种轻量标记语言，受到很多开发者的青睐，这里Bayi简单讲讲MarkDown的使用</p><p>MarkDown中可以插入HTML，有前端基础的童鞋应该学过HTML，下面是来自<a href="https://markdown.cn/" title="markdown.cn">markdown.cn</a>的描述</p><blockquote><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <div>、<table>、<pre>、<p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <p> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。</p><p>HTML 的区段（行内）标签如 <span>、<cite>、<del> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <a> 或 <img> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p></blockquote><p>标题可以这样写：</p><blockquote><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p><p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p>任何数量的 = 和 - 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure><p>当然，你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></table></figure></blockquote><p>引用这么写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用引用引用引用引用引用引用引用引用引用引用</span><br><span class="line">&gt; 引用引用引用引用引用引用引用引用引用引用引用</span><br><span class="line">&gt; 引用引用引用引用引用引用引用引用引用引用引用</span><br></pre></td></tr></table></figure><p> 也可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用引用引用引用引用引用引用引用引用</span><br><span class="line">引用引用引用引用引用引用引用引用引用引引用</span><br><span class="line">引用引用引用引用引用引用引用引用引用引用</span><br></pre></td></tr></table></figure><p>更多具体的内容见<a href="https://markdown.cn/" title="教程-MarkDown">教程-MarkDown</a></p><h3 id="页面-Page"><a href="#页面-Page" class="headerlink" title="页面(Page)"></a>页面(Page)</h3><h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page aaa</span><br></pre></td></tr></table></figure><p>这里，【aaa】就是页面（page）的名称</p><p>页面新建在这里，见8-2-1图</p><p><img src="/imgs/7409f87c3bb74d188794861ffa3f41e2.png"></p><p>8-2-1</p><p>重启Hexo，就可以在<a href="http://loucalhost:4000/aaa%C2%A0" title="loucalhost:4000/aaa ">loucalhost:4000/aaa</a> 访问到这个页面，见8-2-2图</p><p><img src="/imgs/cc20a7184078480db83a171647bb221f.png"></p><p>8-2-2</p><h4 id="Front-matter-1"><a href="#Front-matter-1" class="headerlink" title="Front-matter"></a>Front-matter</h4><p> 一样，页面也有Front-matter，写法和文章的Front-matter差不太多，这里就不过多赘述</p><h3 id="草稿-Draft"><a href="#草稿-Draft" class="headerlink" title="草稿(Draft)"></a>草稿(Draft)</h3><p>草稿也是Bayi写这篇Blog才注意到的东西,引用一下<a href="https://programmerauthor.github.io/2020/01/13/hexo-draft/" title="普通程序员">普通程序员</a>：</p><blockquote><p><code>draft</code> 顾名思义就是草稿的意思，使用 <code>draft</code> 布局建立的文章，其博客文章 <code>md</code> 源码位于 <code>source/_drafts</code> 路径下， <code>hexo generate</code> 不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署发布到博客网站上。</p><p>当我们写完整篇博客文章时，可以将草稿发布为正式文章，<code>hexo</code> 会将发布为正式文章的草稿文章源码从 <code>source/_drafts</code> 路径下，移到 <code>source/_posts</code> 下，这样就转成了正式文章，简单明了效果好。</p></blockquote><h4 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft aaa</span><br></pre></td></tr></table></figure><p>其中【aaa】就是草稿名，虽然Hexo不会编译/source/_drafts下的文件，但是Hexo提供了一个预览的方法，就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --draft</span><br></pre></td></tr></table></figure><h4 id="正式发布博文"><a href="#正式发布博文" class="headerlink" title="正式发布博文"></a>正式发布博文</h4><p>使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo p aaa</span><br></pre></td></tr></table></figure><p>其中aaa是文章名，不包含.md后缀，该命令的原理也不过是将文章从/source/_drafts移动到/source/_posts而已，若日后想将正式文章转为为草稿，只需手动将文章从/source/_posts目录移动到/source/_drafts目录即可</p><h3 id="布局-LayOut"><a href="#布局-LayOut" class="headerlink" title="布局(LayOut)"></a>布局(LayOut)</h3><p>见8-4-1图</p><p><img src="/imgs/f89ab4bb72534ded8c7a9f3e957c1657.png"></p><p>8-4-1</p><hr><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>到这里，Hexo的所有配置就全部完成了，让我们把它推送到GitHub Pages上，让它可以在输入一段域名后呈现在我们面前</p><h3 id="创建GitHub-Pages存储库"><a href="#创建GitHub-Pages存储库" class="headerlink" title="创建GitHub Pages存储库"></a>创建GitHub Pages存储库</h3><p>打开你的个人页面，创建一个存储库，见9-1-1，9-1-2，9-1-3图</p><p><img src="/imgs/e6df125f2a9f4228b70723dc4a0cda1e.png"></p><p>9-1-1</p><p><img src="/imgs/3f15a9be78544dfb9bbd2ccfe542a287.png"></p><p>9-1-2</p><p>9-1-2不知为啥违规了，文字解释一下（感谢<a href="https://blog.csdn.net/HMM_6?type=blog" title="HMM_6">HMM_6</a>大佬的指出）：点击右上角绿色“New”按钮</p><p><img src="/imgs/89462ad846734fa19deb66fc72757523.png"></p><p>9-1-3</p><h3 id="安装deploy插件"><a href="#安装deploy插件" class="headerlink" title="安装deploy插件"></a>安装deploy插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>见9-1-4图</p><p><img src="/imgs/b164b6182dfc4cf7b131ea9ddfef2cb4.png"></p><p>9-2-1</p><h3 id="推送项目"><a href="#推送项目" class="headerlink" title="推送项目"></a>推送项目</h3><p>更改项目根目录的配置文件，见9-3-1,9-3-2图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: （你的项目HTTPS地址）     </span><br><span class="line">  branch: main（你的默认分支）</span><br></pre></td></tr></table></figure><p><img src="/imgs/38d55a7d8d6843d6bc7a6c60ea9cc722.png"></p><p>9-3-1</p><p><img src="/imgs/ef1005d599b64787b74e66a19b007e43.png"></p><p>9-3-2</p><p> 推送它到GitHub存储库，见9-3-3图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><img src="/imgs/677cbe10ec9a42e982d46ac4c5bb033b.png"></p><p>9-3-3</p><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>打开网站（<你的GitHub ID>.github.io），比如我的是Bayi-Cat.github.io，你应该就可以看到你的Blog了见9-4-1图，如果没有，看看有没有这个项目有没有被纳入GitHub Pages，见9-4-2图，如果符合，请等待5分钟后重试</p><p><img src="/imgs/fb5816d55d4b40f7b1072ca6ed06ec29.png"></p><p>9-4-1</p><p><img src="/imgs/61da013b1e2d40b18f26854c440748d8.png"></p><p>9-4-2</p><p> 搞定！</p><p>之后对你的Hexo有更改就重新生成静态文件如何提交即可</p><hr><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p>来自大佬<a href="https://blog.csdn.net/qq_67518190?type=blog" title="md_606">md_606</a>的提醒</p><blockquote><p>有个小bug，执行 npm install -g hexo-cli 时，需要管理员powershell，不然会报ERROR</p></blockquote><p>来自大佬<a href="https://blog.csdn.net/HMM_6?type=blog" title="HMM_6">HMM_6</a>的问题</p><blockquote><p>作者你好，Node和Git必须和你设置一样的吗？</p></blockquote><p>我的回答</p><blockquote><p>如果是安装的话，可以自己设置，但需要明白每个选项的意思，如果想省事一些，可以和我一样；</p><p>如果指的是版本，建议一样，也可以更高或低版本，但需要了解到我们用到的功能并对比你用到的版本</p></blockquote><p>来自大佬<a href="https://blog.csdn.net/m0_63156401?type=blog" title="羊村的小羊">羊村的小羊</a>的问题</p><blockquote><p>大佬，安装admin插件后，打开localhost：4000/admin出现错误，怎么办</p><p>报错信息：Cannot GET/admin</p></blockquote><p>我的回答</p><blockquote><p>首先确认 admin 插件是否已经正确地安装到你的 Hexo 项目中。可以通过执行 npm ls --depth 0 命令查看已安装的插件列表中是否包含了 hexo-admin</p><p>重新安装插件：如果 admin 插件未正确安装，可以尝试重新安装。执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-admin</span><br><span class="line">npm install hexo-admin</span><br></pre></td></tr></table></figure><p>清除缓存：在重新安装插件后，执行 Hexo 的清除缓存命令，以确保清除之前生成的缓存文件。执行以下命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>启动 Hexo 服务器：重新启动 Hexo 的本地服务器，以确保加载最新的插件设置和配置文件。执行以下命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></blockquote><p>来自大佬<a href="https://blog.csdn.net/m0_56608748?type=blog" title="一分耕耘一分收获.">一分耕耘一分收获.</a>的问题</p><blockquote><p>大佬你好，我装了nvm，node_cache这几个文件是放在nvm目录下，还是放在对应版本目录下呢？</p></blockquote><p>我的回答</p><blockquote><p>放在 Nodejs 的安装目录下</p></blockquote><p>来自大佬<a href="https://blog.csdn.net/weixin_47341387?type=blog" title="Zonless">Zonless</a>的问题</p><blockquote><p>作者你好，为什么本地部署的时候Fluid的主题存在，部署到GitHub上就回到landscape主题了</p></blockquote><p>我的回答</p><blockquote><p>在提交之前可以先试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>再</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果这样也不行的话检查一下本地编译出来的.html文件是不是Fluid的主题</p></blockquote><h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><p><a href="https://blog.csdn.net/cat_bayi/article/details/131857200" title="我的创作纪念日_Cat_Bayi的博客-CSDN博客">我的创作纪念日_Cat_Bayi的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/cat_bayi/article/details/131855079" title="Apple WWDC23开发者大会——Apple的野心_Cat_Bayi的博客-CSDN博客">Apple WWDC23开发者大会——Apple的野心_Cat_Bayi的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/cat_bayi/article/details/131868949" title="如何在CSDN写高质量博客-How to系列_Cat_Bayi的博客-CSDN博客">如何在CSDN写高质量博客-How to系列_Cat_Bayi的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/cat_bayi/article/details/130470166" title="裁剪一个简单的Linux_Cat_Bayi的博客-CSDN博客">裁剪一个简单的Linux_Cat_Bayi的博客-CSDN博客</a></p><h2 id="参考，引用文献，书籍"><a href="#参考，引用文献，书籍" class="headerlink" title="参考，引用文献，书籍"></a>参考，引用文献，书籍</h2><h3 id="参考，引用文献"><a href="#参考，引用文献" class="headerlink" title="参考，引用文献"></a>参考，引用文献</h3><p><a href="https://hexo.io/themes/" title="Themes | Hexo">Themes | Hexo</a></p><p><a href="https://hexo.io/plugins/" title="Plugins | Hexo">Plugins | Hexo</a></p><p><a href="https://hexo.io/zh-cn/docs/github-pages" title="在 GitHub Pages 上部署 Hexo | Hexo">在 GitHub Pages 上部署 Hexo | Hexo</a></p><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/" title="配置指南 | Hexo Fluid 用户手册 (fluid-dev.github.io)">配置指南 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p><p><a href="https://hexo.io/zh-cn/docs/front-matter" title="Front-matter | Hexo">Front-matter | Hexo</a></p><p><a href="https://baike.baidu.com/item/github/10145341" title="Github_百度百科 (baidu.com)">Github_百度百科 (baidu.com)</a></p><p><a href="https://www.cnblogs.com/moshuying/p/15367181.html" title="❤️github注册教程最新版(✨图文并茂最新版保姆级教程:建议收藏💘) - 墨抒颖 - 博客园 (cnblogs.com)">❤️github注册教程最新版(✨图文并茂最新版保姆级教程:建议收藏💘) - 墨抒颖 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/ef07bdcde72e" title="hexo安装、生成blog并deploy到github - 简书 (jianshu.com)">hexo安装、生成blog并deploy到github - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/m0_66964652/article/details/122882957#:~:text=1.%E4%BB%A5%E7%AE%A1%E7%90%86%E5%91%98%E8%BA%AB%E4%BB%BD%E6%89%93%E5%BC%80cmd%EF%BC%8C%E6%89%A7%E8%A1%8Chexo%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E6%8C%87%E4%BB%A4%20npm%20install,hexo-cli%20-g%201%202.%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E6%8C%87%E4%BB%A4%E6%A3%80%E6%B5%8Bhexo%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F" title="2022最新hexo最新搭建教程_hexo搭建教程_故人随笔的博客-CSDN博客">2022最新hexo最新搭建教程_hexo搭建教程_故人随笔的博客-CSDN博客</a></p><p> <a href="https://blog.csdn.net/qq2539879928/article/details/106619835" title=" hexo d 无反应解决方案_Vista、的博客-CSDN博客_hexo d">hexo d 无反应解决方案_Vista、的博客-CSDN博客_hexo d</a></p><p><a href="https://blog.csdn.net/qq_35495339/article/details/92847819" title="Github 生成SSH秘钥（详细教程）_孙文旭的博客-CSDN博客">Github 生成SSH秘钥（详细教程）_孙文旭的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Dontla/article/details/120902725" title="SSH公钥原理（密钥，秘钥，私钥）（看了还是懵逼啊！）_Dontla的博客-CSDN博客_ssh公钥和私钥">SSH公钥原理（密钥，秘钥，私钥）（看了还是懵逼啊！）_Dontla的博客-CSDN博客_ssh公钥和私钥</a> <a href="https://programmerauthor.github.io/2020/01/13/hexo-draft/" title="Hexo草稿布局(draft)的使用 | 普通程序员 (programmerauthor.github.io)">Hexo草稿布局(draft)的使用 | 普通程序员 (programmerauthor.github.io)</a></p><p><a href="https://www.jianshu.com/p/5a1e6d8c83af" title="初步了解Hexo站点的布局 - 简书 (jianshu.com)">初步了解Hexo站点的布局 - 简书 (jianshu.com)</a></p><p><a href="https://direct5dom.github.io/2021/09/04/%E5%85%B3%E4%BA%8Ehexo%E7%9A%84%E8%8D%89%E7%A8%BF%E5%8A%9F%E8%83%BD/" title="关于hexo的草稿功能 | 薛定谔的第四旋臂 (direct5dom.github.io)">关于hexo的草稿功能 | 薛定谔的第四旋臂 (direct5dom.github.io)</a></p><p><a href="https://blog.csdn.net/mukes/article/details/115693833" title="Git 详细安装教程（详解 Git 安装过程的每一个步骤）_mukes的博客-CSDN博客_git安装">Git 详细安装教程（详解 Git 安装过程的每一个步骤）_mukes的博客-CSDN博客_git安装</a></p><p> <a href="https://blog.csdn.net/chanyeolchichi/article/details/121348541" title="Node.js详细安装教程（2021）_cheerileeyoki的博客-CSDN博客_node.js 安装">Node.js详细安装教程（2021）_cheerileeyoki的博客-CSDN博客_node.js 安装</a></p><p><a href="https://markdown.cn/" title="教程-MarkDown">教程-MarkDown</a></p><p><a href="https://programmerauthor.github.io/2020/01/13/hexo-draft/" title="Hexo草稿布局(draft)的使用 | 普通程序员 (programmerauthor.github.io)">Hexo草稿布局(draft)的使用 | 普通程序员 (programmerauthor.github.io)</a></p><p><a href="https://stackoverflow.org.cn/" title="Stack Overflow中文网">Stack Overflow中文网</a></p><p><a href="https://www.ruanyifeng.com/blog/2006/04/post_213.html" title="回车和换行 - 阮一峰的网络日志 (ruanyifeng.com)">回车和换行 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><h3 id="参考，引用书籍"><a href="#参考，引用书籍" class="headerlink" title="参考，引用书籍"></a>参考，引用书籍</h3><p><a href="https://book.douban.com/subject/26462816/" title="GitHub入门与实践 (豆瓣) (douban.com)">GitHub入门与实践 (豆瓣) (douban.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;读者先看这里&quot;&gt;&lt;a href=&quot;#读者先看这里&quot; class=&quot;headerlink&quot; title=&quot;读者先看这里&quot;&gt;&lt;/a&gt;读者先看这里&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这篇文章是给Windows用户的，macOS也可以看哦，我就是三种系统都用滴，基本都没有问题&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Bayi使用的软件版本：&quot;&gt;&lt;a href=&quot;#Bayi使用的软件版本：&quot; class=&quot;headerlink&quot; title=&quot;Bayi使用的软件版本：&quot;&gt;&lt;/a&gt;Bayi使用的软件版本：&lt;/h2&gt;&lt;p&gt;OS：Windows11 22H2&lt;/p&gt;
&lt;p&gt;Node.js：18.13.0 64-bit for windows&lt;/p&gt;
&lt;p&gt;Git：2.39.1 for Windows x64&lt;/p&gt;
&lt;p&gt;hexo-cli: 4.3.0&lt;/p&gt;
&lt;p&gt;Visual Studio Code：1.74.3 for Windows8,10,11 x64（VS Code的官网： &lt;a href=&quot;https://code.visualstudio.com/%EF%BC%89&quot;&gt;https://code.visualstudio.com/）&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Hexo是什么&quot;&gt;&lt;a href=&quot;#Hexo是什么&quot; class=&quot;headerlink&quot; title=&quot;Hexo是什么&quot;&gt;&lt;/a&gt;Hexo是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; title=&quot;Markdown&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页&lt;/p&gt;
&lt;p&gt;——&lt;a href=&quot;https://hexo.io/zh-cn/&quot; title=&quot;Hexo官网&quot;&gt;Hexo官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hexo可以简单快速的搭建你的个人Blog并部署到你的域名或折到&lt;a href=&quot;https://pages.github.com/&quot; title=&quot;Github Pages&quot;&gt;Github Pages&lt;/a&gt;当然，也可以是&lt;a href=&quot;https://about.gitlab.com/stages-devops-lifecycle/pages/&quot; title=&quot;Gitlab Pages&quot;&gt;Gitlab Pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体可以参照&lt;a href=&quot;https://hexo.io/zh-cn/&quot; title=&quot;Hexo官网&quot;&gt;Hexo官网&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://about.gitlab.com/stages-devops-lifecycle/pages/&quot; title=&quot;Gitlab Pages&quot;&gt;Gitlab Pages&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>iptables和firewalld防火墙使用整理</title>
    <link href="https://github.com/jiangjiawei520/post/da8e3e0.html"/>
    <id>https://github.com/jiangjiawei520/post/da8e3e0.html</id>
    <published>2024-04-08T09:30:11.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、iptables"><a href="#一、iptables" class="headerlink" title="一、iptables"></a>一、iptables</h1><h2 id="0、基础知识"><a href="#0、基础知识" class="headerlink" title="0、基础知识"></a>0、基础知识</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">添加规则时需要配置ip或者ip端，需要了解相关知识</span><br><span class="line">1、需要配置掩码的位数，</span><br><span class="line">173.16.33.171--&gt;173.16.33.171</span><br><span class="line">173.16.33.0--&gt;173.16.33.0/24</span><br><span class="line">173.16.0.0--&gt;173.16.0.0/16</span><br><span class="line">173.0.0.0--&gt;173.0.0.0/8</span><br><span class="line">0.0.0.0--&gt;0.0.0.0/0</span><br></pre></td></tr></table></figure><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>iptables 可以检测、修改、转发、重定向和丢弃 IPv4 数据包</strong>。<br>过滤 IPv4 数据包的代码已经内置于内核中，并且按照不同的目的被组织成 <strong>表</strong> 的集合。<strong>表</strong> 由一组预先定义的 <strong>链</strong> 组成，<strong>链</strong>包含遍历顺序规则。每一条规则包含一个谓词的潜在匹配和相应的动作（称为 <strong>目标</strong>），如果谓词为真，该动作会被执行。也就是说条件匹配</p><h2 id="2、安装Iptables"><a href="#2、安装Iptables" class="headerlink" title="2、安装Iptables"></a>2、安装Iptables</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">（1）禁用 firewalld</span><br><span class="line">CentOS 7 上默认安装了 firewalld 作为防火墙，使用 iptables 建议关闭并禁用 firewalld。</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">（2）安装 iptables</span><br><span class="line">yum install iptables-services</span><br><span class="line"></span><br><span class="line">（3）服务管理</span><br><span class="line">systemctl enable iptables</span><br><span class="line">systemctl start iptables</span><br><span class="line">systemctl status iptables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看服务状态：systemctl status iptables</span><br><span class="line">自启用服务：systemctl enable iptables</span><br><span class="line">禁用服务：systemctl disable iptables</span><br><span class="line">启动服务：systemctl start iptables</span><br><span class="line">重启服务：systemctl restart iptables</span><br><span class="line">关闭服务: systemctl stop iptables</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="3、命令"><a href="#3、命令" class="headerlink" title="3、命令"></a>3、命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</span><br><span class="line"></span><br><span class="line">-t, --table table：对指定的表 table 进行操作， table 必须是 raw， nat，filter，mangle 中的一个。如果不指定此选项，默认的是 filter 表。</span><br><span class="line"> </span><br><span class="line"># 通用匹配：源地址目标地址的匹配</span><br><span class="line">-p：指定要匹配的数据包协议类型；</span><br><span class="line">-s, --source [!] address[/mask] ：把指定的一个／一组地址作为源地址，按此规则进行过滤。当后面没有 mask 时，address 是一个地址，比如：192.168.1.1；当 mask 指定时，可以表示一组范围内的地址，比如：192.168.1.0/255.255.255.0。</span><br><span class="line">-d, --destination [!] address[/mask] ：地址格式同上，但这里是指定地址为目的地址，按此进行过滤。</span><br><span class="line">-i, --in-interface [!] &lt;网络接口name&gt; ：指定数据包的来自来自网络接口，比如最常见的 eth0 。注意：它只对 INPUT，FORWARD，PREROUTING 这三个链起作用。如果没有指定此选项， 说明可以来自任何一个网络接口。同前面类似，&quot;!&quot; 表示取反。</span><br><span class="line">-o, --out-interface [!] &lt;网络接口name&gt; ：指定数据包出去的网络接口。只对 OUTPUT，FORWARD，POSTROUTING 三个链起作用。</span><br><span class="line"> </span><br><span class="line"># 查看管理命令</span><br><span class="line">-L, --list [chain] 列出链 chain 上面的所有规则，如果没有指定链，列出表上所有链的所有规则。</span><br><span class="line"> </span><br><span class="line"># 规则管理命令</span><br><span class="line">-A, --append chain rule-specification 在指定链 chain 的末尾插入指定的规则，也就是说，这条规则会被放到最后，最后才会被执行。规则是由后面的匹配来指定。</span><br><span class="line">-I, --insert chain [rulenum] rule-specification 在链 chain 中的指定位置插入一条或多条规则。如果指定的规则号是1，则在链的头部插入。这也是默认的情况，如果没有指定规则号。</span><br><span class="line">-D, --delete chain rule-specification -D, --delete chain rulenum 在指定的链 chain 中删除一个或多个指定规则。</span><br><span class="line">-R num：Replays替换/修改第几条规则</span><br><span class="line"> </span><br><span class="line"># 链管理命令(这都是立即生效的)</span><br><span class="line">-P, --policy chain target ：为指定的链 chain 设置策略 target。注意，只有内置的链才允许有策略，用户自定义的是不允许的。</span><br><span class="line">-F, --flush [chain] 清空指定链 chain 上面的所有规则。如果没有指定链，清空该表上所有链的所有规则。</span><br><span class="line">-N, --new-chain chain 用指定的名字创建一个新的链。</span><br><span class="line">-X, --delete-chain [chain] ：删除指定的链，这个链必须没有被其它任何规则引用，而且这条上必须没有任何规则。如果没有指定链名，则会删除该表中所有非内置的链。</span><br><span class="line">-E, --rename-chain old-chain new-chain ：用指定的新名字去重命名指定的链。这并不会对链内部造成任何影响。</span><br><span class="line">-Z, --zero [chain] ：把指定链，或者表中的所有链上的所有计数器清零。</span><br><span class="line"> </span><br><span class="line">-j, --jump target &lt;指定目标&gt; ：即满足某条件时该执行什么样的动作。target 可以是内置的目标，比如 ACCEPT，也可以是用户自定义的链。</span><br><span class="line">-h：显示帮助信息；</span><br></pre></td></tr></table></figure><h2 id="4、查看规则"><a href="#4、查看规则" class="headerlink" title="4、查看规则"></a>4、查看规则</h2><blockquote><p>iptables -nL</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 yum.repos.d]# iptables -nL</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br></pre></td></tr></table></figure><h2 id="5、检查、备份、情况规则"><a href="#5、检查、备份、情况规则" class="headerlink" title="5、检查、备份、情况规则"></a>5、检查、备份、情况规则</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#1、对比检查规则是否已经被保持到配置文件，没有得话重启后会被清空</span><br><span class="line">iptables -nL</span><br><span class="line">cat /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">#2、备份规则</span><br><span class="line">cp /etc/sysconfig/iptables /etc/sysconfig/iptables.bak # 任何改动之前先备份，请保持这一优秀的习惯</span><br><span class="line"></span><br><span class="line">#3、重置规则</span><br><span class="line">iptables -F  # 清空所有的防火墙规则</span><br><span class="line">iptables -X  # 删除用户自定义的空链</span><br><span class="line">iptables -Z  # 清空计数</span><br><span class="line"></span><br><span class="line">#4、保存新规则</span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">#5、查看规则信息</span><br><span class="line">cat /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">cp /etc/sysconfig/iptables /etc/sysconfig/iptables.bak</span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line">cat /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><h2 id="6、清空所有规则-慎用"><a href="#6、清空所有规则-慎用" class="headerlink" title="6、清空所有规则(慎用)"></a>6、清空所有规则(慎用)</h2><blockquote><p>[root@tp ~]# iptables -F      清除预设表filter中的所有规则链的规则<br>[root@tp ~]# iptables -X      清除预设表filter中使用者自定链中的规则</p></blockquote><h2 id="7、添加"><a href="#7、添加" class="headerlink" title="7、添加"></a>7、添加</h2><p>添加规则有两个参数：-A和-I。其中-A是添加到规则的末尾；-I可以插入到指定位置，没有指定位置的话默认插入到规则的首部。  </p><h3 id="添加一条规则到尾部"><a href="#添加一条规则到尾部" class="headerlink" title="添加一条规则到尾部"></a>添加一条规则到尾部</h3><blockquote><p>iptables -A INPUT -s 192.168.1.5 -j DROP<br>iptables -A INPUT -s 192.168.1.0&#x2F;24 -j DROP</p></blockquote><h3 id="插入一条规则到第三行，将行数直接写到规则链的后面"><a href="#插入一条规则到第三行，将行数直接写到规则链的后面" class="headerlink" title="插入一条规则到第三行，将行数直接写到规则链的后面"></a>插入一条规则到第三行，将行数直接写到规则链的后面</h3><blockquote><p>iptables -I INPUT 3 -s 192.168.1.3 -j DROP<br>iptables -I INPUT 3 -s 192.168.1.0&#x2F;24 -j DROP<br>#新增173.16.33.0网段规则<br>iptables -I INPUT -s 173.16.33.171 -p tcp –dport 9302 -j ACCEPT<br>iptables -I INPUT -s 173.16.33.0&#x2F;24 -p tcp –dport 9302 -j ACCEPT<br>#新增173.16.122.74规则<br>iptables -I INPUT -s 173.16.122.74 -p tcp –dport 9876 -j ACCEPT<br>iptables -I INPUT -s 173.16.122.0&#x2F;24 -p tcp –dport 9876 -j ACCEPT<br>#新增禁止规则<br>iptables -I INPUT -p tcp -s 0.0.0.0&#x2F;0 –dport 8302 -j DROP<br>iptables -I INPUT -p tcp -s 173.16.0.0&#x2F;16 –dport 8302 -j DROP</p></blockquote><h2 id="8、删除"><a href="#8、删除" class="headerlink" title="8、删除"></a>8、删除</h2><blockquote><p>删除INPUT第二行规则，命令iptables +选项-D+操作类型（INPUT、FORWARD、OUTPUT）+行数<br>iptables -D INPUT 1</p></blockquote><h2 id="9、修改"><a href="#9、修改" class="headerlink" title="9、修改"></a>9、修改</h2><blockquote><p>修改用-R参数</p><p>iptables -R INPUT 3 -j ACCEPT</p></blockquote><h2 id="10、常用命令记录"><a href="#10、常用命令记录" class="headerlink" title="10、常用命令记录"></a>10、常用命令记录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#1、查询已有规则</span><br><span class="line">iptables -nL</span><br><span class="line">cat /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">#2、备份规则</span><br><span class="line">cp /etc/sysconfig/iptables /etc/sysconfig/iptables.bak # 任何改动之前先备份，请保持这一优秀的习惯</span><br><span class="line"></span><br><span class="line">#3、重置规则（刚安装防火墙时使用）</span><br><span class="line">iptables -F  # 清空所有的防火墙规则</span><br><span class="line">iptables -X  # 删除用户自定义的空链</span><br><span class="line">iptables -Z  # 清空计数</span><br><span class="line"></span><br><span class="line">#4、修改规则</span><br><span class="line"># 修改INPUT</span><br><span class="line">iptables -I INPUT -p tcp -s 0.0.0.0/0 --dport 7090 -j DROP  # 屏蔽所有网段访问7090端口</span><br><span class="line">iptables -I INPUT -s 173.16.122.0/24 -p tcp --dport 7090 -j ACCEPT # 开放173.16.122.xx网段访问7090端口</span><br><span class="line">iptables -I INPUT -s 173.16.33.0/24 -p tcp --dport 7090 -j ACCEPT  # 开放173.16.33.xx网段访问7090端口</span><br><span class="line"></span><br><span class="line">#修改容器(DOCKER-USER或者DOCKER)</span><br><span class="line">iptables -I DOCKER-USER -p tcp -s 0.0.0.0/0 --dport 9010 -j DROP</span><br><span class="line">iptables -I DOCKER-USER -s 172.16.10.157 -p tcp --dport 9010 -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#5、保存新规则</span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">#6、删除容器第一条规则</span><br><span class="line">iptables -D DOCKER-USER 1</span><br></pre></td></tr></table></figure><h2 id="11、iptables-示例"><a href="#11、iptables-示例" class="headerlink" title="11、iptables 示例"></a>11、iptables 示例</h2><h3 id="清空当前的所有规则和计数"><a href="#清空当前的所有规则和计数" class="headerlink" title="清空当前的所有规则和计数"></a>清空当前的所有规则和计数</h3><blockquote><p>iptables -F  # 清空所有的防火墙规则<br>iptables -X  # 删除用户自定义的空链<br>iptables -Z  # 清空计数 </p></blockquote><h3 id="配置允许-ssh-端口连接"><a href="#配置允许-ssh-端口连接" class="headerlink" title="配置允许 ssh 端口连接"></a>配置允许 ssh 端口连接</h3><blockquote><p>iptables -A INPUT -s 192.168.1.0&#x2F;24 -p tcp –dport 22 -j ACCEPT # 22为你的ssh端口， -s 192.168.1.0&#x2F;24表示允许这个网段的机器来连接，其它网段的ip地址是登陆不了你的机器的。 -j ACCEPT表示接受这样的请求 </p></blockquote><h3 id="允许本地回环地址可以正常使用"><a href="#允许本地回环地址可以正常使用" class="headerlink" title="允许本地回环地址可以正常使用"></a>允许本地回环地址可以正常使用</h3><blockquote><p>iptables -A INPUT -i lo -j ACCEPT #本地圆环地址就是那个127.0.0.1，是本机上使用的,它进与出都设置为允许 iptables -A OUTPUT -o lo -j ACCEPT </p></blockquote><h3 id="设置默认的规则"><a href="#设置默认的规则" class="headerlink" title="设置默认的规则"></a>设置默认的规则</h3><blockquote><p>iptables -P INPUT DROP # 配置默认的不让进 iptables -P FORWARD DROP # 默认的不允许转发<br>iptables -P OUTPUT ACCEPT # 默认的可以出去 </p></blockquote><h3 id="配置白名单"><a href="#配置白名单" class="headerlink" title="配置白名单"></a>配置白名单</h3><blockquote><p>iptables -A INPUT -p all -s 192.168.1.0&#x2F;24 -j ACCEPT  # 允许机房内网机器可以访问<br>iptables -A INPUT -p all -s 192.168.140.0&#x2F;24 -j ACCEPT  # 允许机房内网机器可以访问<br>iptables -A INPUT -p tcp -s 183.121.3.7 –dport 3380 -j ACCEPT # 允许183.121.3.7访问本机的3380端口 </p></blockquote><h3 id="开启相应的服务端口"><a href="#开启相应的服务端口" class="headerlink" title="开启相应的服务端口"></a>开启相应的服务端口</h3><blockquote><p>iptables -A INPUT -p tcp –dport 80 -j ACCEPT # 开启80端口，因为web对外都是这个端口<br>iptables -A INPUT -p icmp –icmp-type 8 -j ACCEPT # 允许被ping<br>iptables -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT # 已经建立的连接得让它进来 </p></blockquote><h3 id="保存规则到配置文件中"><a href="#保存规则到配置文件中" class="headerlink" title="保存规则到配置文件中"></a>保存规则到配置文件中</h3><blockquote><p>cp &#x2F;etc&#x2F;sysconfig&#x2F;iptables &#x2F;etc&#x2F;sysconfig&#x2F;iptables.bak # 任何改动之前先备份，请保持这一优秀的习惯 iptables-save &gt; &#x2F;etc&#x2F;sysconfig&#x2F;iptables cat &#x2F;etc&#x2F;sysconfig&#x2F;iptables </p></blockquote><h3 id="列出已设置的规则"><a href="#列出已设置的规则" class="headerlink" title="列出已设置的规则"></a>列出已设置的规则</h3><p>iptables -L [-t 表名][链名]</p><ul><li>四个表名 raw，nat，filter，mangle</li><li>五个规则链名 INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING</li><li>filter 表包含INPUT、OUTPUT、FORWARD三个规则链</li></ul><blockquote><p>ptables -L -t nat                  </p><p>列出 nat 上面的所有规则 </p><p>^ -t 参数指定，必须是 raw， nat，filter，mangle 中的一个 </p><p>iptables -L -t nat  –line-numbers  # 规则带编号<br>iptables -L INPUT iptables -L -nv  # 查看，这个列表看起来更详细 </p></blockquote><h3 id="清除已有规则"><a href="#清除已有规则" class="headerlink" title="清除已有规则"></a>清除已有规则</h3><blockquote><p>iptables -F INPUT  # 清空指定链 INPUT 上面的所有规则<br>iptables -X INPUT  # 删除指定的链，这个链必须没有被其它任何规则引用，而且这条上必须没有任何规则。                                 # 如果没有指定链名，则会删除该表中所有非内置的链。<br>iptables -Z INPUT  # 把指定链，或者表中的所有链上的所有计数器清零。 </p></blockquote><h3 id="删除已添加的规则"><a href="#删除已添加的规则" class="headerlink" title="删除已添加的规则"></a>删除已添加的规则</h3><blockquote><p>添加一条规则 iptables -A INPUT -s 192.168.1.5 -j DROP </p></blockquote><p>将所有 iptables 以序号标记显示，执行：</p><blockquote><p>iptables -L -n –line-numbers </p></blockquote><p>比如要删除 INPUT 里序号为 8 的规则，执行：</p><blockquote><p>iptables -D INPUT 8 </p></blockquote><h3 id="开放指定的端口"><a href="#开放指定的端口" class="headerlink" title="开放指定的端口"></a>开放指定的端口</h3><blockquote><p>iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT               #允许本地回环接口(即运行本机访问本机)<br>iptables -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT    #允许已建立的或相关连的通行<br>iptables -A OUTPUT -j ACCEPT         #允许所有本机向外的访问<br>iptables -A INPUT -p tcp –dport 22 -j ACCEPT    #允许访问22端口<br>iptables -A INPUT -p tcp –dport 80 -j ACCEPT    #允许访问80端口<br>iptables -A INPUT -p tcp –dport 21 -j ACCEPT    #允许ftp服务的21端口<br>iptables -A INPUT -p tcp –dport 20 -j ACCEPT    #允许FTP服务的20端口<br>iptables -A INPUT -j reject       #禁止其他未允许的规则访问<br>iptables -A FORWARD -j REJECT     #禁止其他未允许的规则访问</p></blockquote><h3 id="屏蔽-IP"><a href="#屏蔽-IP" class="headerlink" title="屏蔽 IP"></a>屏蔽 IP</h3><blockquote><p>iptables -A INPUT -p tcp -m tcp -s 192.168.0.8 -j DROP  # 屏蔽恶意主机（比如，192.168.0.8<br>iptables -I INPUT -s 123.45.6.7 -j DROP       #屏蔽单个IP的命令<br>iptables -I INPUT -s 123.0.0.0&#x2F;8 -j DROP      #封整个段即从123.0.0.1到123.255.255.254的命令<br>iptables -I INPUT -s 124.45.0.0&#x2F;16 -j DROP    #封IP段即从123.45.0.1到123.45.255.254的命令<br>iptables -I INPUT -s 123.45.6.0&#x2F;24 -j DROP    #封IP段即从123.45.6.1到123.45.6.254的命令是</p></blockquote><h3 id="指定数据包出去的网络接口"><a href="#指定数据包出去的网络接口" class="headerlink" title="指定数据包出去的网络接口"></a>指定数据包出去的网络接口</h3><p>只对 OUTPUT，FORWARD，POSTROUTING 三个链起作用。</p><blockquote><p>iptables -A FORWARD -o eth0 </p></blockquote><h3 id="查看已添加的规则"><a href="#查看已添加的规则" class="headerlink" title="查看已添加的规则"></a>查看已添加的规则</h3><blockquote><p>iptables -L -n -v<br>Chain INPUT (policy DROP 48106 packets, 2690K bytes)<br>pkts bytes target     prot opt in     out     source               destination<br>5075  589K ACCEPT     all  –  lo     *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0<br>191K   90M ACCEPT     tcp  –  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           tcp dpt:22<br>1499K  133M ACCEPT     tcp  –  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           tcp dpt:80<br>4364K 6351M ACCEPT     all  –  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           state RELATED,ESTABLISHED<br>6256  327K ACCEPT     icmp –  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0</p><p>Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)<br>pkts bytes target     prot opt in     out     source               destination</p><p>Chain OUTPUT (policy ACCEPT 3382K packets, 1819M bytes)<br>pkts bytes target     prot opt in     out     source               destination<br>5075  589K ACCEPT     all  –  *      lo      0.0.0.0&#x2F;0            0.0.0.0&#x2F;0</p></blockquote><h3 id="启动网络转发规则"><a href="#启动网络转发规则" class="headerlink" title="启动网络转发规则"></a>启动网络转发规则</h3><p>公网210.14.67.7让内网192.168.188.0&#x2F;24上网</p><blockquote><p>iptables -t nat -A POSTROUTING -s 192.168.188.0&#x2F;24 -j SNAT –to-source 210.14.67.127 </p></blockquote><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>本机的 2222 端口映射到内网 虚拟机的 22 端口</p><blockquote><p>ptables -t nat -A PREROUTING -d 210.14.67.127 -p tcp –dport 2222  -j DNAT –to-dest 192.168.188.115:22 </p></blockquote><h3 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h3><p>比如，我们要过滤所有 TCP 连接中的字符串test，一旦出现它我们就终止这个连接，我们可以这么做：</p><blockquote><p>iptables -A INPUT -p tcp -m string –algo kmp –string “test” -j REJECT –reject-with tcp-reset<br>iptables -L</p><p>Chain INPUT (policy ACCEPT)</p><p>target     prot opt source               destination</p><p>REJECT     tcp  –  anywhere             anywhere            STRING match “test” ALGO name kmp TO 65535 reject-with tcp-reset</p><p>Chain FORWARD (policy ACCEPT)</p><p>target     prot opt source               destination</p><p>Chain OUTPUT (policy ACCEPT)</p><p>target     prot opt source               destination</p></blockquote><h3 id="阻止-Windows-蠕虫的攻击"><a href="#阻止-Windows-蠕虫的攻击" class="headerlink" title="阻止 Windows 蠕虫的攻击"></a>阻止 Windows 蠕虫的攻击</h3><blockquote><p>ptables -I INPUT -j DROP -p tcp -s 0.0.0.0&#x2F;0 -m string –algo kmp –string “cmd.exe” </p></blockquote><h3 id="防止-SYN-洪水攻击"><a href="#防止-SYN-洪水攻击" class="headerlink" title="防止 SYN 洪水攻击"></a>防止 SYN 洪水攻击</h3><blockquote><p>ptables -A INPUT -p tcp –syn -m limit –limit 5&#x2F;second -j ACCEPT </p></blockquote><h2 id="12、参考资料"><a href="#12、参考资料" class="headerlink" title="12、参考资料"></a>12、参考资料</h2><ul><li><a href="https://wiki.archlinux.org/index.php/iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></li><li><a href="https://wangchujiang.com/linux-command/c/iptables.html">https://wangchujiang.com/linux-command/c/iptables.html</a></li></ul><h1 id="二、firewalld"><a href="#二、firewalld" class="headerlink" title="二、firewalld"></a>二、firewalld</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1、firewalld的基本使用</span><br><span class="line">启动： systemctl start firewalld</span><br><span class="line">关闭： systemctl stop firewalld</span><br><span class="line">查看状态： systemctl status firewalld </span><br><span class="line">开机禁用  ： systemctl disable firewalld</span><br><span class="line">开机启用  ： systemctl enable firewalld</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</span><br><span class="line">启动一个服务：systemctl start firewalld.service</span><br><span class="line">关闭一个服务：systemctl stop firewalld.service</span><br><span class="line">重启一个服务：systemctl restart firewalld.service</span><br><span class="line">显示一个服务的状态：systemctl status firewalld.service</span><br><span class="line">在开机时启用一个服务：systemctl enable firewalld.service</span><br><span class="line">在开机时禁用一个服务：systemctl disable firewalld.service</span><br><span class="line">查看服务是否开机启动：systemctl is-enabled firewalld.service</span><br><span class="line">查看已启动的服务列表：systemctl list-unit-files|grep enabled</span><br><span class="line">查看启动失败的服务列表：systemctl --failed</span><br><span class="line"></span><br><span class="line">3.配置firewalld-cmd</span><br><span class="line"></span><br><span class="line">查看版本： firewall-cmd --version</span><br><span class="line">查看帮助： firewall-cmd --help</span><br><span class="line">显示状态： firewall-cmd --state</span><br><span class="line">查看所有打开的端口： firewall-cmd --zone=public --list-ports</span><br><span class="line">更新防火墙规则： firewall-cmd --reload</span><br><span class="line">查看区域信息:  firewall-cmd --get-active-zones</span><br><span class="line">查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0</span><br><span class="line">拒绝所有包：firewall-cmd --panic-on</span><br><span class="line">取消拒绝状态： firewall-cmd --panic-off</span><br><span class="line">查看是否拒绝： firewall-cmd --query-panic</span><br><span class="line"> </span><br><span class="line">那怎么开启一个端口呢</span><br><span class="line">添加</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br><span class="line">重新载入</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">查看</span><br><span class="line">firewall-cmd --zone= public --query-port=80/tcp</span><br><span class="line">删除</span><br><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、iptables&quot;&gt;&lt;a href=&quot;#一、iptables&quot; class=&quot;headerlink&quot; title=&quot;一、iptables&quot;&gt;&lt;/a&gt;一、iptables&lt;/h1&gt;&lt;h2 id=&quot;0、基础知识&quot;&gt;&lt;a href=&quot;#0、基础知识&quot; class=&quot;headerlink&quot; title=&quot;0、基础知识&quot;&gt;&lt;/a&gt;0、基础知识&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;添加规则时需要配置ip或者ip端，需要了解相关知识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1、需要配置掩码的位数，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173.16.33.171--&amp;gt;173.16.33.171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173.16.33.0--&amp;gt;173.16.33.0/24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173.16.0.0--&amp;gt;173.16.0.0/16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173.0.0.0--&amp;gt;173.0.0.0/8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.0.0.0--&amp;gt;0.0.0.0/0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;&gt;&lt;/a&gt;1、简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;iptables 可以检测、修改、转发、重定向和丢弃 IPv4 数据包&lt;/strong&gt;。&lt;br&gt;过滤 IPv4 数据包的代码已经内置于内核中，并且按照不同的目的被组织成 &lt;strong&gt;表&lt;/strong&gt; 的集合。&lt;strong&gt;表&lt;/strong&gt; 由一组预先定义的 &lt;strong&gt;链&lt;/strong&gt; 组成，&lt;strong&gt;链&lt;/strong&gt;包含遍历顺序规则。每一条规则包含一个谓词的潜在匹配和相应的动作（称为 &lt;strong&gt;目标&lt;/strong&gt;），如果谓词为真，该动作会被执行。也就是说条件匹配&lt;/p&gt;
&lt;h2 id=&quot;2、安装Iptables&quot;&gt;&lt;a href=&quot;#2、安装Iptables&quot; class=&quot;headerlink&quot; title=&quot;2、安装Iptables&quot;&gt;&lt;/a&gt;2、安装Iptables&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;（1）禁用 firewalld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CentOS 7 上默认安装了 firewalld 作为防火墙，使用 iptables 建议关闭并禁用 firewalld。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop firewalld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl disable firewalld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）安装 iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install iptables-services&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（3）服务管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl status iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看服务状态：systemctl status iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;自启用服务：systemctl enable iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;禁用服务：systemctl disable iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;启动服务：systemctl start iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重启服务：systemctl restart iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;关闭服务: systemctl stop iptables&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/categories/linux/"/>
    
    <category term="firewalld" scheme="https://github.com/jiangjiawei520/categories/linux/firewalld/"/>
    
    <category term="iptables" scheme="https://github.com/jiangjiawei520/categories/linux/iptables/"/>
    
    
    <category term="firewalld" scheme="https://github.com/jiangjiawei520/tags/firewalld/"/>
    
    <category term="linux" scheme="https://github.com/jiangjiawei520/tags/linux/"/>
    
    <category term="iptables" scheme="https://github.com/jiangjiawei520/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>等保测评漏洞修复2</title>
    <link href="https://github.com/jiangjiawei520/post/b7b6dca9.html"/>
    <id>https://github.com/jiangjiawei520/post/b7b6dca9.html</id>
    <published>2024-04-07T10:14:53.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="检查是否设置密码有效期，密码复杂度"><a href="#检查是否设置密码有效期，密码复杂度" class="headerlink" title="检查是否设置密码有效期，密码复杂度"></a>检查是否设置密码有效期，密码复杂度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 执行备份</span><br><span class="line">cp -p /etc/login.defs /etc/login.defs.$(date +%F).bak</span><br><span class="line">查看文件/etc/login.defs，检查如下参数值是否满足要求：</span><br><span class="line">PASS_MAX_DAYS 90         #密码最长过期天数</span><br><span class="line">PASS_MIN_DAYS 7            #密码最小过期天数</span><br><span class="line">PASS_MIN_LEN 8            #密码最小长度</span><br><span class="line">PASS_WARN_AGE 7            #密码过期警告天数</span><br><span class="line"></span><br><span class="line"># 设置密码复杂度</span><br><span class="line"># 执行备份</span><br><span class="line">cp -p /etc/pam.d/system-auth /etc/pam.d/system-auth.$(date +%F).bak</span><br><span class="line">在/etc/pam.d/system-auth中的“password    requisite     pam_pwquality.so”行尾添加具体参数</span><br><span class="line">比如“minlen=16 ucredit=-1 lcredit=-1 ocredit=-1 dcredit=-1”，表示最小密码长度16位，数字，大小写字母，特殊字符均至少包含1位</span><br></pre></td></tr></table></figure><h3 id="检查账户认证失败次数限制"><a href="#检查账户认证失败次数限制" class="headerlink" title="检查账户认证失败次数限制"></a>检查账户认证失败次数限制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行备份    </span><br><span class="line">cp -p /etc/pam.d/system-auth /etc/pam.d/system-auth.$(date &#x27;+%F&#x27;).bak</span><br><span class="line">查看文件/etc/pam.d/system-auth，检查如下参数值是否满足要求：</span><br><span class="line">auth        required      pam_tally2.so  deny=5 onerr=fail no_magic_root unlock_time=180</span><br><span class="line">account     required      pam_tally2.so</span><br></pre></td></tr></table></figure><h3 id="检查历史命令设置"><a href="#检查历史命令设置" class="headerlink" title="检查历史命令设置"></a>检查历史命令设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;HISTFILESIZE=20&#x27; &gt;&gt; /etc/profile</span><br><span class="line">echo &#x27;HISTSIZE=20&#x27; &gt;&gt; /etc/profile</span><br><span class="line">source  /etc/profile</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="操作系统未限制默认账户（root）的登录模式，未配置SU-WHEEL-ONLY-yes"><a href="#操作系统未限制默认账户（root）的登录模式，未配置SU-WHEEL-ONLY-yes" class="headerlink" title="操作系统未限制默认账户（root）的登录模式，未配置SU_WHEEL_ONLY yes"></a>操作系统未限制默认账户（root）的登录模式，未配置SU_WHEEL_ONLY yes</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -p /etc/login.defs /etc/login.defs.$(date +%F).bak</span><br><span class="line"># 编辑文件/etc/login.defs</span><br><span class="line">echo &#x27;SU_WHEEL_ONLY yes&#x27; &gt;&gt; /etc/login.defs</span><br></pre></td></tr></table></figure><h3 id="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"><a href="#检查是否使用PAM认证模块禁止wheel组之外的用户su为root" class="headerlink" title="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"></a>检查是否使用PAM认证模块禁止wheel组之外的用户su为root</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 执行备份</span><br><span class="line">cp /etc/pam.d/su /etc/pam.d/su.$(date +%F).bak</span><br><span class="line"># 编辑文件/etc/pam.d/su</span><br><span class="line"># 在文件开头加入如下两行(有则修改,没有则添加):</span><br><span class="line">auth            sufficient      pam_rootok.so</span><br><span class="line">auth            required        pam_wheel.so use_uid</span><br><span class="line"># 注意auth与sufficient之间由两个tab建隔开，sufficient与动态库路径之间使用一个tab建隔开</span><br><span class="line"># 说明：(这表明只有wheel组中的用户可以使用su命令成为root用户。你可以把用户添加到wheel组，以使它可以使用su命令成为root用户。)</span><br><span class="line"># 添加方法:</span><br><span class="line">usermod -G wheel username  # *（一定要注意。执行后新开窗口验证普通用户是否能切换到root）*</span><br></pre></td></tr></table></figure><h3 id="操作系统未启用NTP服务"><a href="#操作系统未启用NTP服务" class="headerlink" title="操作系统未启用NTP服务"></a>操作系统未启用NTP服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 执行备份</span><br><span class="line">cp /etc/ntp.conf /etc/ntp.conf.$(date +%F).bak</span><br><span class="line"># 编辑ntp.conf文件</span><br><span class="line">vi /etc/ntp.conf</span><br><span class="line"># 在文件中添加如下一行：</span><br><span class="line">server 10.126.196.32</span><br><span class="line"># 重启ntpd服务</span><br><span class="line">systemctl restart ntpd</span><br><span class="line"># 确认配置生效</span><br><span class="line">ntpq -p</span><br><span class="line">ntpstat</span><br><span class="line">timedatectl</span><br></pre></td></tr></table></figure><h3 id="ICMP-timestamp请求响应漏洞"><a href="#ICMP-timestamp请求响应漏洞" class="headerlink" title="ICMP timestamp请求响应漏洞"></a>ICMP timestamp请求响应漏洞</h3><p>描述：<br>远程主机会回复ICMP_TIMESTAMP查询并返回它们系统的当前时间。 这可能允许者一些基于时间认证的协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修复：</span><br><span class="line">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-request -m comment --comment &quot;deny ICMP timestamp&quot; -j DROP</span><br><span class="line">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-reply -m comment --comment &quot;deny ICMP timestamp&quot; -j DROP</span><br></pre></td></tr></table></figure><h3 id="允许Traceroute探测漏洞"><a href="#允许Traceroute探测漏洞" class="headerlink" title="允许Traceroute探测漏洞"></a>允许Traceroute探测漏洞</h3><p>描述：<br>本插件使用Traceroute探测来获取扫描器与远程主机之间的路由信息。或者也可以利用这些信息来了解目标网络的网络拓扑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修复：</span><br><span class="line">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type 11 -m comment --comment &quot;deny traceroute&quot; -j DROP</span><br><span class="line"></span><br><span class="line">重新加载firewalld配置</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">查看添加的规则</span><br><span class="line">firewall-cmd --direct --get-all-rules</span><br></pre></td></tr></table></figure><h2 id="Windows系统加固："><a href="#Windows系统加固：" class="headerlink" title="Windows系统加固："></a>Windows系统加固：</h2><h3 id="windows系统密码复杂度策略："><a href="#windows系统密码复杂度策略：" class="headerlink" title="windows系统密码复杂度策略："></a>windows系统密码复杂度策略：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">win+R 输入gpedit.msc—计算机配置—windows设置—安全设置—账户策略—密码策略</span><br><span class="line">设置参数可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818165351932-2062210709.png"><img src="/imgs/2469298-20210818165351932-2062210709.png" alt="img"></a></p><h3 id="windows系统账户锁定策略设置"><a href="#windows系统账户锁定策略设置" class="headerlink" title="windows系统账户锁定策略设置"></a>windows系统账户锁定策略设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">win+R 输入gpedit.msc—计算机配置—windows设置—安全设置—账户策略—账户锁定策略</span><br><span class="line">设置参数可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818165454899-1365799257.png"><img src="/imgs/2469298-20210818165454899-1365799257.png" alt="img"></a></p><h3 id="开启服务器审计策略"><a href="#开启服务器审计策略" class="headerlink" title="开启服务器审计策略"></a>开启服务器审计策略</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A、win+R 输入gpedit.msc—计算机配置—windows设置—安全设置—本地策略—审核策略</span><br><span class="line">设置参数可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818165610953-375269553.png"><img src="/imgs/2469298-20210818165610953-375269553.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B、建议设置widows应用程序、安全、系统等日志的，日志存储最大大小，大于50M，并配置日志满时将其存储，不覆盖事件，配置如下图</span><br><span class="line">进入：事件查看器—windows日志—应用程序—右键—属性，安全、系统日志如上操作。</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818165644794-2002211460.png"><img src="/imgs/2469298-20210818165644794-2002211460.png" alt="img"></a><br><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818172716286-1043252003.png"><img src="/imgs/2469298-20210818172716286-1043252003.png" alt="img"></a><br><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818172745453-438220208.png"><img src="/imgs/2469298-20210818172745453-438220208.png" alt="img"></a></p><h3 id="登录连接超时及自动退出策略"><a href="#登录连接超时及自动退出策略" class="headerlink" title="登录连接超时及自动退出策略"></a>登录连接超时及自动退出策略</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A、win+R 输入gpedit.msc—计算机配置—windows设置—安全设置—本地策略—安全选项</span><br><span class="line">设置参数可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818172831416-236479039.png"><img src="/imgs/2469298-20210818172831416-236479039.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B、win+R 输入gpedit.msc—计算机配置—管理模板—windows组件—远程桌面服务—远程桌面会话主机—会话时间限制</span><br><span class="line">设置参数可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173032856-180468334.png"><img src="/imgs/2469298-20210818173032856-180468334.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C、个性化设置里面，开启屏幕保护程序</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173106531-180377542.png"><img src="/imgs/2469298-20210818173106531-180377542.png" alt="img"></a></p><h3 id="终端服务配置RDP安全层"><a href="#终端服务配置RDP安全层" class="headerlink" title="终端服务配置RDP安全层"></a>终端服务配置RDP安全层</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">win+R 输入gpedit.msc—计算机配置—管理模板—windows组件—远程桌面服务—远程桌面会话主机—安全</span><br><span class="line">设置参数可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173147239-1845358876.png"><img src="/imgs/2469298-20210818173147239-1845358876.png" alt="img"></a></p><h3 id="对特权用户进行权限分离"><a href="#对特权用户进行权限分离" class="headerlink" title="对特权用户进行权限分离"></a>对特权用户进行权限分离</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入：计算机管理—系统工具—本地用户和组—用户</span><br><span class="line">禁用：administrator等超级管理员用户</span><br><span class="line">新建：数据库管理员、系统管理员、审计管理员、安全管理员—注意各管理员的所在的组</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173231636-965463878.png"><img src="/imgs/2469298-20210818173231636-965463878.png" alt="img"></a></p><h3 id="禁用系统不必要的端口、服务"><a href="#禁用系统不必要的端口、服务" class="headerlink" title="禁用系统不必要的端口、服务"></a>禁用系统不必要的端口、服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A、禁用不必要的系统服务</span><br><span class="line">计算机管理—系统工具—服务和应用程序—服务</span><br><span class="line">建议禁用的服务如Alerter、Remote Registry Servicce Messsenger、Task Scheduler、print spooler等服务器</span><br><span class="line">配置可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173310897-734882813.png"><img src="/imgs/2469298-20210818173310897-734882813.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">B、禁用不必要的端口</span><br><span class="line">Win+R输入cmd，在命令行输入&quot;netstat -an”，查看列表中的监听端口</span><br><span class="line">建议禁用</span><br><span class="line">TCP 135、139 、45、 593、1025端口，</span><br><span class="line">UDP 135、137、 138、445端口，</span><br><span class="line">一些流行病毒的后门端口，如TCP 2745、3127、6129端口。</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173338494-882118741.png"><img src="/imgs/2469298-20210818173338494-882118741.png" alt="img"></a><br><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173349435-561717492.png"><img src="/imgs/2469298-20210818173349435-561717492.png" alt="img"></a></p><h3 id="安全选项“不显示上次的用户名”"><a href="#安全选项“不显示上次的用户名”" class="headerlink" title="安全选项“不显示上次的用户名”"></a>安全选项“不显示上次的用户名”</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作步骤：</span><br><span class="line">win+R 输入gpedit.msc—计算机配置—windows设置—安全设置—本地策略—安全选项</span><br><span class="line">设置参数可参考下图</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173435100-1400182918.png"><img src="/imgs/2469298-20210818173435100-1400182918.png" alt="img"></a><br><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173444835-1846676342.png"><img src="/imgs/2469298-20210818173444835-1846676342.png" alt="img"></a></p><h3 id="补丁版本"><a href="#补丁版本" class="headerlink" title="补丁版本"></a>补丁版本</h3><p>win补丁连接：<a href="https://www.catalog.update.microsoft.com/">https://www.catalog.update.microsoft.com/</a><br>补丁无法安装问题，可通过以下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; expand –F:* C:\update\Windows8.1-KB2999226-x64.msu C:\update\</span><br><span class="line">&gt; dism.exe /online /Add-Package /PackagePath:C:\update\Windows8.1-KB2999226-x64.cab</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173536469-918923538.png"><img src="/imgs/2469298-20210818173536469-918923538.png" alt="img"></a></p><h3 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h3><p><a href="https://img2020.cnblogs.com/blog/2469298/202108/2469298-20210818173606558-1296529077.png"><img src="/imgs/2469298-20210818173606558-1296529077.png" alt="img"></a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;h3 id=&quot;检查是否设置密码有效期，密码复杂度&quot;&gt;&lt;a href=&quot;#检查是否设置密码有效期，密码复杂度&quot; class=&quot;headerlink&quot; title=&quot;检查是否设置密码有效期，密码复杂度&quot;&gt;&lt;/a&gt;检查是否设置密码有效期，密码复杂度&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 执行备份&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp -p /etc/login.defs /etc/login.defs.$(date +%F).bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看文件/etc/login.defs，检查如下参数值是否满足要求：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS_MAX_DAYS 90         #密码最长过期天数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS_MIN_DAYS 7            #密码最小过期天数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS_MIN_LEN 8            #密码最小长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS_WARN_AGE 7            #密码过期警告天数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置密码复杂度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 执行备份&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp -p /etc/pam.d/system-auth /etc/pam.d/system-auth.$(date +%F).bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在/etc/pam.d/system-auth中的“password    requisite     pam_pwquality.so”行尾添加具体参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比如“minlen=16 ucredit=-1 lcredit=-1 ocredit=-1 dcredit=-1”，表示最小密码长度16位，数字，大小写字母，特殊字符均至少包含1位&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;检查账户认证失败次数限制&quot;&gt;&lt;a href=&quot;#检查账户认证失败次数限制&quot; class=&quot;headerlink&quot; title=&quot;检查账户认证失败次数限制&quot;&gt;&lt;/a&gt;检查账户认证失败次数限制&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;执行备份    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp -p /etc/pam.d/system-auth /etc/pam.d/system-auth.$(date &amp;#x27;+%F&amp;#x27;).bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看文件/etc/pam.d/system-auth，检查如下参数值是否满足要求：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auth        required      pam_tally2.so  deny=5 onerr=fail no_magic_root unlock_time=180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;account     required      pam_tally2.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;检查历史命令设置&quot;&gt;&lt;a href=&quot;#检查历史命令设置&quot; class=&quot;headerlink&quot; title=&quot;检查历史命令设置&quot;&gt;&lt;/a&gt;检查历史命令设置&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;#x27;HISTFILESIZE=20&amp;#x27; &amp;gt;&amp;gt; /etc/profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;#x27;HISTSIZE=20&amp;#x27; &amp;gt;&amp;gt; /etc/profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source  /etc/profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="漏洞修复" scheme="https://github.com/jiangjiawei520/categories/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/"/>
    
    
    <category term="漏洞修复" scheme="https://github.com/jiangjiawei520/tags/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用笔记</title>
    <link href="https://github.com/jiangjiawei520/post/f431f6d.html"/>
    <id>https://github.com/jiangjiawei520/post/f431f6d.html</id>
    <published>2024-04-02T10:45:50.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按照模版创建-md"><a href="#按照模版创建-md" class="headerlink" title="按照模版创建 md"></a>按照模版创建 md</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li>layout 是文章的布局，在 scaffolds 中，默认为 post，可以先不写，其他的有 page、draft 等</li><li>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code> 在创建者三种不同类型的文件时，它们将会被保存到不同的路径。</li></ul><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source&#x2F;_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source&#x2F;_drafts</td></tr></tbody></table><span id="more"></span><h2 id="Front-matter-参数（文章表头参数）"><a href="#Front-matter-参数（文章表头参数）" class="headerlink" title="Front-matter 参数（文章表头参数）"></a>Front-matter 参数（文章表头参数）</h2><p>Front-matter 是文章最上方以—分隔的区域，用于指定文章的变量设置</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>无</td></tr><tr><td>title</td><td>标题</td><td>无</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期（常用于文章排序）</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td>（不适合分页）</td></tr><tr><td>categories</td><td>分类</td><td>（不适合分页）</td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td>无</td></tr></tbody></table><h2 id="多层级分类"><a href="#多层级分类" class="headerlink" title="多层级分类"></a>多层级分类</h2><h3 id="单层分类"><a href="#单层分类" class="headerlink" title="单层分类"></a>单层分类</h3><p>如果你的一篇文章只分一类，可以像如下方式设置分类名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - 博客</span><br></pre></td></tr></table></figure><h3 id="文章处于父类中的子类中"><a href="#文章处于父类中的子类中" class="headerlink" title="文章处于父类中的子类中"></a>文章处于父类中的子类中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - 博客</span><br><span class="line">  - hexo</span><br></pre></td></tr></table></figure><h3 id="并列分类"><a href="#并列分类" class="headerlink" title="并列分类"></a>并列分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [博客,hexo]</span><br><span class="line">  - [博客,hexo1]</span><br></pre></td></tr></table></figure><h4 id="同一父类不同子类"><a href="#同一父类不同子类" class="headerlink" title="同一父类不同子类"></a>同一父类不同子类</h4><p>如果你想让一篇文章处于同一父类的不同类中，可以像如下方式设置分类名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - [博客,hexo]</span><br></pre></td></tr></table></figure><h2 id="默认排序规则"><a href="#默认排序规则" class="headerlink" title="默认排序规则"></a>默认排序规则</h2><p>​依据创建时间（date)，如无依据文件创建时间</p><p>​安装 hexo-generator-index-pin-top 插件后，排序规则 top–&gt; date–&gt; 文件创建时间</p><h2 id="Hexo-博客新建文章后自动打开编辑器"><a href="#Hexo-博客新建文章后自动打开编辑器" class="headerlink" title="Hexo 博客新建文章后自动打开编辑器"></a>Hexo 博客新建文章后自动打开编辑器</h2><p>  hexo new 命令创建新的文章后，需要重新在文件夹里打开才能编辑，较为麻烦，所以加一个 js 脚本，实现创建新文件之后自动打开。</p><ul><li><p>在 <code>Hexo</code> 博客的根目录下的 <code>scripts</code> 目录中创建一个 <code>JavaScript</code> 脚本文件（如 person_blog_new）。</p></li><li><p>如果没有这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scripts</span><br></pre></td></tr></table></figure><p>目录，则新建一个。</p><ul><li>新建目录</li></ul><p>mkdir scripts</p></li><li><p><code>scripts</code> 目录新建的 <code>js</code> 脚本文件可以任意取名, 建议 <code>auto_open.js</code>。</p></li><li><p><code>windows</code> 平台的 <code>Hexo</code> 用户操作如下：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span>;</span><br><span class="line">hexo.<span class="title function_">on</span>(<span class="string">&#x27;new&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="title function_">exec</span>(<span class="string">&#x27;start  &quot;C:\Program Files\Typora\bin\typora.exe&quot; &#x27;</span> + data.<span class="property">path</span>);</span><br><span class="line">  <span class="comment">//如果路径存在空格使用下面这个</span></span><br><span class="line"> <span class="comment">//exec(&#x27;start  &quot;D:\software_install\Typora\Typora.exe&quot; &#x27; + `&quot;$&#123;data.path&#125;&quot;`); </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后再创建文件输入命令之后就会自动打开 Typora 编辑器来编辑你新建的文章了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;auto open editor test&quot;</span></span><br></pre></td></tr></table></figure><h2 id="通过-GithubActions-实现自动化部署-Hexo"><a href="#通过-GithubActions-实现自动化部署-Hexo" class="headerlink" title="通过 GithubActions 实现自动化部署 Hexo"></a>通过 GithubActions 实现自动化部署 Hexo</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>在自己电脑上新建一个文件夹，打开 git bash here, 输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成秘钥</span></span><br><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>之后会生成两个文件，</p><p>一个私钥文件为：github-deploy-key；</p><p>另一个公钥文件为：github-deploy-key.pub </p><p>1、在 Hexo 工作目录 Github 源码仓库中指定私钥（多个仓库都使用 action 时，每个仓库配置的 key 取名需要不一样，配置的内容都是私钥）</p><p>步骤：依次打开自己存放博客源码的仓库，点击 Settings-&gt; 展开 Secrets and variables-&gt; 点击 Actions-&gt; 点击 New repository secret; 填写名称与粘贴私钥。</p><p>2、在 Hexo 站点目录 Github pages 主页仓库中指定公钥</p><p>步骤：依次打开自己存放博客 pages 主页的仓库，点击 Settings-&gt; Deploy keys-&gt; Add deploy key</p><p>Title 处设置个名称，key 处粘贴公钥。</p><p>注意事项：一定要勾选（Allow write access）允许写入后，再保存。【可能已经在整体设置里面设置了，提示已经存在，不需要再次设置公钥】</p><h3 id="创建部署配置"><a href="#创建部署配置" class="headerlink" title="创建部署配置"></a>创建部署配置</h3><p>1、在 <code>[自己博客根目录]</code> 新建 <code>.github</code> 文件夹, 注意开头是有个 <code>.</code> 的。然后在 <code>.github</code> 内新建 <code>workflows</code> 文件夹，再在 <code>workflows</code> 文件夹内新建 <code>autodeploy.yml</code>, 在 <code>[自己博客根目录]/.github/workflows/autodeploy.yml</code> 里面输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">name: 部署 Hexo 到 GithubPage</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ <span class="string">&quot;master&quot;</span> ] <span class="comment">#这里要更改为自己的源码仓库分支名称master或main</span></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  HexoDeploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [18.x] <span class="comment">#这里要更改为自己电脑安装的node.js版本，在终端用node -v查找</span></span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v3</span><br><span class="line">    - name: 使用 Node.js <span class="variable">$&#123;&#123; matrix.node-version &#125;</span>&#125; 环境</span><br><span class="line">      uses: actions/setup-node@v3</span><br><span class="line">      with:</span><br><span class="line">        node-version: <span class="variable">$&#123;&#123; matrix.node-version &#125;</span>&#125;</span><br><span class="line">    - name: 配置 SSH 环境和 Git 环境</span><br><span class="line">      <span class="built_in">env</span>:</span><br><span class="line">        ACTION_DEPLOY_KEY: <span class="variable">$&#123;&#123; secrets.名字 &#125;</span>&#125; <span class="comment">#这里要接合前面的内容更改为自己源码仓库填写私钥时，所取的名称</span></span><br><span class="line">      run: |</span><br><span class="line">        <span class="built_in">mkdir</span> -p ~/.ssh/</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ACTION_DEPLOY_KEY</span>&quot;</span> &gt; ~/.ssh/id_rsa</span><br><span class="line">        <span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line">        <span class="built_in">chmod</span> 600 ~/.ssh/id_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">        git config --global user.email <span class="string">&quot;这里要填写自己github注册时所用的邮箱&quot;</span></span><br><span class="line">        git config --global user.name <span class="string">&quot;这里要填写自己gitub的用户名&quot;</span></span><br><span class="line">    - name: 配置 Hexo 环境</span><br><span class="line">      run: |</span><br><span class="line">        <span class="built_in">export</span> TZ=<span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">    - name: 下载 Npm 依赖</span><br><span class="line">      run: |</span><br><span class="line">        npm install</span><br><span class="line">    - name: 部署博客</span><br><span class="line">      run: |</span><br><span class="line">        hexo d</span><br></pre></td></tr></table></figure><h2 id="bat-自动处理-hexo-命令"><a href="#bat-自动处理-hexo-命令" class="headerlink" title="bat 自动处理 hexo 命令"></a>bat 自动处理 hexo 命令</h2><p>每次写新文章都得 hexo new “xxx”，写完再 hexo g -d，挺麻烦的。 就不能写一个脚本来自动执行吗？</p><hr><h3 id="创建-hexo-文章"><a href="#创建-hexo-文章" class="headerlink" title="创建 hexo 文章"></a>创建 hexo 文章</h3><p>之前写文章都得打开 cmd, 输入 hexo new “XXX”。 然后再去目录下找生成的.md 文件打开编辑。 这样的机械动作不应该用程序就可以做到吗？</p><h4 id="create-post-bat"><a href="#create-post-bat" class="headerlink" title="create_post.bat"></a>create_post.bat</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set /p name=input pages <span class="attr">name</span>:</span><br><span class="line">echo <span class="attr">name</span>:%name%</span><br><span class="line">echo please wait</span><br><span class="line">hexo <span class="keyword">new</span> %name% &amp;&amp; start /min /w mshta <span class="attr">vbscript</span>:<span class="built_in">setTimeout</span>(<span class="string">&quot;window.close()&quot;</span>,<span class="number">2000</span>) &amp;&amp; call open_page.<span class="property">bat</span> %name%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h4 id="open-page-bat"><a href="#open-page-bat" class="headerlink" title="open_page.bat"></a>open_page.bat</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start /min /w mshta <span class="attr">vbscript</span>:<span class="built_in">setTimeout</span>(<span class="string">&quot;window.close()&quot;</span>,<span class="number">1000</span>)</span><br><span class="line">echo <span class="title class_">The</span> <span class="title class_">InputValue</span> is %<span class="number">1</span></span><br><span class="line">set name=%<span class="number">1</span></span><br><span class="line">echo %name%</span><br><span class="line">start /d <span class="string">&quot;D:\software_install\Typora&quot;</span>   <span class="title class_">Typora</span>.<span class="property">exe</span>  <span class="string">&quot;E:\OneDrive - shjd\github\person_blog_new\source\_posts\%name%.md&quot;</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><ul><li>start &#x2F;min &#x2F;w mshta vbscript: setTimeout(“window.close()”,1000) 等待 1000 毫秒</li><li>&#x2F;d “ D:\software_install\Typora 修改为自己打开 md 的程序位置</li><li>Typora.exe 修改为自己的程序 exe</li><li>E:\OneDrive - shjd\github\person_blog_new\source_posts&quot; 修改为博客创建 md 存放的路径</li></ul><p><img src="/imgs/image-20240409134153885.png" alt="image-20240409134153885"></p><p>每次点击“创建 hexo 文章.bat”输入文章名，Typora 就会自动打开编辑了。</p><h3 id="发布文章到-github"><a href="#发布文章到-github" class="headerlink" title="发布文章到 github"></a>发布文章到 github</h3><p>编辑完 markdown 文章后再发到 github 上，博客才会显示。 一般命令：</p><h4 id="clean-bat"><a href="#clean-bat" class="headerlink" title="clean.bat"></a>clean.bat</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo clean</span><br><span class="line">echo <span class="title class_">Please</span> wait</span><br><span class="line">hexo clean</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h4 id="generate-deploy-bat"><a href="#generate-deploy-bat" class="headerlink" title="generate_deploy.bat"></a>generate_deploy.bat</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h4 id="backup-bat"><a href="#backup-bat" class="headerlink" title="backup.bat"></a>backup.bat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo b</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><ul><li>clean.bat 一键清理</li><li>generate_deploy.bat 一键生成 html、发布</li><li>generate_deploy.bat 一键备份</li></ul><h2 id="hexo-使用草稿方式写作博客"><a href="#hexo-使用草稿方式写作博客" class="headerlink" title="hexo 使用草稿方式写作博客"></a>hexo 使用草稿方式写作博客</h2><p>在写作 Hexo 博客时，经常有几篇博文同时在构思，直接使用 “hexo new <article title>“ 创建的博文，在执行 “hexo d” 的时候会直接部署到博客正式发表。<br>但此时，可能同时进行写作的其他博文还没有完成，就会出现未完成博文也同时被正式部署的尴尬情况。</p><p>在这种情况下，我们可以使用 hexo 博客的草稿功能。所谓草稿，就是我们创建的博文作为草稿单独存放，等编辑完成后，再放置到正式发布用的文件夹。作为草稿的文章，不会在执行 “hexo d” 时被部署。</p><h4 id="创建草稿文章"><a href="#创建草稿文章" class="headerlink" title="创建草稿文章"></a>创建草稿文章</h4><p>草稿其实是 Hexo 的一种特殊布局: draft，它在建立时会被保存到 “ 博客根目录&#x2F;source&#x2F;_drafts “文件夹，而非 draft 布局的文章会被保存到” 博客根目录&#x2F;source&#x2F;_posts “ 文件夹。</p><p><strong>创建草稿</strong><br>打开终端 Terminal，切换（cd）到博客根目录，执行下面语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;0007.How to add a draft blog article&quot;</span></span><br></pre></td></tr></table></figure><p>命令执行后，可以在 “ 博客根目录&#x2F;source&#x2F;_drafts “ 找到该文章，但_posts&#x2F;文件夹下不存在该文章。</p><!--more--><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line">$ <span class="built_in">ls</span> _drafts/</span><br><span class="line">0007-How-to-add-a-draft-blog-article.md</span><br><span class="line">$ <span class="built_in">ls</span> _posts/0007-How-to-add-a-draft-blog-article.md</span><br><span class="line"><span class="built_in">ls</span>: _posts/0007-How-to-add-a-draft-blog-article.md: No such file or directory</span><br></pre></td></tr></table></figure><p>打开文章的 md 文件，可以看到文章已经自动生成了文件头：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 0007.How to add a draft blog article</span><br><span class="line"><span class="section">tags:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>此时，即使执行 “hexo g”，草稿文章也不会生成静态页面，因此执行 “hexo s” 也无法本地预览。</p><h4 id="publish-草稿"><a href="#publish-草稿" class="headerlink" title="publish 草稿"></a>publish 草稿</h4><p>编辑 md 文件完成博文写作后，可以将文章移动到_posts&#x2F;文件夹中，就可以作为部署对象了。执行下面命令，将文章从_drafts&#x2F;文件夹转移到_posts&#x2F;文件夹，后续该文章就可以正常生成静态页面、进行本地预览或线上部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo p <span class="string">&quot;0007.How to add a draft blog article&quot;</span></span><br><span class="line">$ <span class="built_in">ls</span> _posts/0007-How-to-add-a-draft-blog-article.md  <span class="comment"># _posts文件夹下已存在该文章</span></span><br><span class="line">_posts/0007-How-to-add-a-draft-blog-article.md</span><br></pre></td></tr></table></figure><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>  hexo p 移动到_post 中后，标题的 categories、tag 可能需要修改。</p><p>综上，hexo 的草稿功能可以让我们同时编辑多篇文章，而使它们在部署时互不影响。</p><h2 id="hexo-利用-cloudflare-CDN-实现-github-加速"><a href="#hexo-利用-cloudflare-CDN-实现-github-加速" class="headerlink" title="hexo 利用 cloudflare CDN 实现 github 加速"></a>hexo 利用 cloudflare CDN 实现 github 加速</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>由于 GitHub Pages 在国外，而且有时候因为图片过多等原因，静态博客页面在国内访问速度可能会非常慢，我们可以用 CDN 来加速，发现 CloudFlare 免费版没有流量限制，而且配置起来非常简单，所以在此选用 CloudFlare CDN 来加速页面访问。</p><p>参考博客（七夏浅笑）<a href="https://www.julydate.com/post/60859300/">https://www.julydate.com/post/60859300/</a></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>域名</li><li>CloudFlare 账号</li><li>github_username.github.io 静态博客</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="CloudFlare-账号注册登陆"><a href="#CloudFlare-账号注册登陆" class="headerlink" title="CloudFlare 账号注册登陆"></a>CloudFlare 账号注册登陆</h4><h4 id="将顶级域名添加到-Cloudflare"><a href="#将顶级域名添加到-Cloudflare" class="headerlink" title="将顶级域名添加到 Cloudflare"></a>将顶级域名添加到 Cloudflare</h4><p><img src="/imgs/image-20240408101310641.png" alt="image-20240408101310641"></p><h4 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h4><p><img src="/imgs/image-20240408101340005.png" alt="image-20240408101340005"></p><h4 id="修改域名的-DNS-到-Cloudflare"><a href="#修改域名的-DNS-到-Cloudflare" class="headerlink" title="修改域名的 DNS 到 Cloudflare"></a>修改域名的 DNS 到 Cloudflare</h4><p><img src="/imgs/image-20240408101519712.png" alt="image-20240408101519712"></p><p><img src="/imgs/image-20240408101534578.png" alt="image-20240408101534578"></p><h3 id="使用-CloudFlare-导致网站“重定向的次数过多”解决方案"><a href="#使用-CloudFlare-导致网站“重定向的次数过多”解决方案" class="headerlink" title="使用 CloudFlare 导致网站“重定向的次数过多”解决方案"></a>使用 CloudFlare 导致网站“重定向的次数过多”解决方案</h3><p>使用 CloudFlare 之后，用 Chrome 打开网站，会显示“重定向的次数过多”类似的错误信息。</p><p>解决办法：</p><p>进入 CloudFlare，找到域名下的 SSL&#x2F;TLS 设置，把加密模式设置为安全或者安全（严格）即可。</p><h2 id="hexo-博客如何添加分类、标签"><a href="#hexo-博客如何添加分类、标签" class="headerlink" title="hexo 博客如何添加分类、标签"></a>hexo 博客如何添加分类、标签</h2><p>Hexo 默认带有不少菜单，如关于（about）、分类（categories）、标签（tags）等，默认处于注释状态，将需要取消的菜单注释掉，然后生成相应的 page 即可。</p><p>1、打开 <code>~\themes\xxx\_config.yml</code> 文件，找到 <code>menu</code> 相关的设置，取消掉需要的菜单项的注释。</p><p>2、重新生成部署后，可以看到新增的菜单项，但是单击后会报如下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cannot GET /about/</span><br><span class="line">Cannot GET /tags/</span><br><span class="line">Cannot GET /categories/</span><br><span class="line">Cannot GET /archives/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、这是因为还需要运行如下命令新建相关 page</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;about&quot;</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;categories&quot;</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;archives&quot;</span></span><br></pre></td></tr></table></figure><!--more--><p>4、新建 page 后，会在 source 目录下新建 <code>about</code>、<code>tags</code>、<code>categories</code>、<code>archives</code> 文件夹，每个文件夹下还会创建一个 <code>index.md</code> 文件表示关于、标签页分类页面，编辑这三个 MarkDown 文件可以自定义这三个页面的内容.</p><p>5、最后一步，编辑各页面对应的 <code>index.md</code> 文件，增加 type 即可。注意冒号 : 后必须空一格，title 和 date 是默认生成的。重新部署后能够看到效果。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-03-13 15:21:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tages</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-03-13 15:21:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-03-13 15:21:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">archives</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>6、在新建博文的头部，直接输入该博文的分类、标签等即可。分类只能有一个，标签能有多个，多个标签不能一行，注意下面的格式。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span> <span class="comment"># 标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="string">/3/26</span> <span class="string">hh:mm:ss</span> <span class="comment"># 时间</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment"># 分类</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">分类</span>  <span class="comment"># 只能由一个</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment"># 标签</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">PS3</span>  <span class="comment"># 能有多个</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Games</span>  <span class="comment"># 一个标签一行</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">摘要</span></span><br><span class="line"><span class="string">&lt;!--more--&gt;</span></span><br><span class="line"><span class="string">正文</span></span><br></pre></td></tr></table></figure><p>7、对应关系</p><table><thead><tr><th>page</th><th>type</th><th>内容</th></tr></thead><tbody><tr><td>tags</td><td>tags</td><td>标签</td></tr><tr><td>categories</td><td>categories</td><td>分类</td></tr><tr><td>archives</td><td>archives</td><td>归档</td></tr><tr><td>about</td><td>about</td><td>关于我(自我介绍)</td></tr></tbody></table><h2 id="Hexo-插件安装"><a href="#Hexo-插件安装" class="headerlink" title="Hexo 插件安装"></a>Hexo 插件安装</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架，个人只需用 Markdown 来写文档，并且拥有丰富的插件和主题。当前博客就是使用 Hexo 配合 NexT 主题搭建的</p><p>因为笔者个人在 Windows 环境下写博客，后续命令均以 <a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell?view=powershell-7.2">PowerShell</a> 为例</p><h3 id="插件汇总"><a href="#插件汇总" class="headerlink" title="插件汇总"></a>插件汇总</h3><table><thead><tr><th>插件</th><th>功能</th><th>文档链接</th></tr></thead><tbody><tr><td><strong>hexo-git-backup</strong></td><td><strong>支持 hexo b 一键备份</strong></td><td></td></tr><tr><td><strong>hexo-deployer-git</strong></td><td><strong>支持一键部署网站到 git 仓库上</strong></td><td></td></tr><tr><td>hexo-generator-index-pin-top</td><td>文章置顶</td><td><a href="https://github.com/netcan/hexo-generator-index-pin-top">https://github.com/netcan/hexo-generator-index-pin-top</a></td></tr><tr><td>hexo-wordcount</td><td>文章字数统计和阅读时长统计</td><td><a href="https://github.com/willin/hexo-wordcount">https://github.com/willin/hexo-wordcount</a></td></tr><tr><td><strong>hexo-abbrlink</strong></td><td><strong>生成 URL 短链接</strong></td><td><a href="https://github.com/rozbo/hexo-abbrlink">https://github.com/rozbo/hexo-abbrlink</a></td></tr><tr><td>hexo-lazyload-image</td><td>图片懒加载</td><td><a href="https://github.com/Troy-Yang/hexo-lazyload-image">https://github.com/Troy-Yang/hexo-lazyload-image</a></td></tr><tr><td>hexo-generator-baidu-sitemap</td><td>生成 baidusitemap.xml</td><td><a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">https://github.com/coneycode/hexo-generator-baidu-sitemap</a></td></tr><tr><td>hexo-generator-sitemap</td><td>生成 sitemap.xml</td><td><a href="https://github.com/hexojs/hexo-generator-sitemap">https://github.com/hexojs/hexo-generator-sitemap</a></td></tr><tr><td>hexo-generator-feed</td><td>生成 RSS 文件</td><td><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></td></tr><tr><td>hexo-external-link</td><td>外链跳转</td><td><a href="https://github.com/hvnobug/hexo-external-link">https://github.com/hvnobug/hexo-external-link</a></td></tr><tr><td>hexo-autonofollow</td><td>自动对外部链接增加 nofollow 属性</td><td><a href="https://github.com/liuzc/hexo-autonofollow">https://github.com/liuzc/hexo-autonofollow</a></td></tr><tr><td>hexo-filter-nofollow</td><td>为外链添加 <code>rel=&quot;noopener external nofollow noreferrer&quot;</code></td><td><a href="https://github.com/hexojs/hexo-filter-nofollow">https://github.com/hexojs/hexo-filter-nofollow</a></td></tr><tr><td>hexo-prism-plugin</td><td>代码高亮</td><td><a href="https://github.com/ele828/hexo-prism-plugin">https://github.com/ele828/hexo-prism-plugin</a></td></tr><tr><td>hexo-neat</td><td>博客压缩</td><td><a href="https://github.com/rozbo/hexo-neat">https://github.com/rozbo/hexo-neat</a></td></tr><tr><td>hexo-allminifier</td><td>博客压缩</td><td><a href="https://developer.aliyun.com/mirror/npm/package/hexo-all-minifier">https://developer.aliyun.com/mirror/npm/package/hexo-all-minifier</a></td></tr><tr><td>hexo-tag-aplayer</td><td>aplayer 音乐播放器</td><td><a href="https://github.com/MoePlayer/hexo-tag-aplayer">https://github.com/MoePlayer/hexo-tag-aplayer</a></td></tr><tr><td>hexo-tag-dplayer</td><td>dplayer 视频播放器</td><td><a href="https://github.com/MoePlayer/hexo-tag-dplayer">https://github.com/MoePlayer/hexo-tag-dplayer</a></td></tr><tr><td>hexo-douban</td><td>添加豆瓣读书，电影，游戏页面</td><td><a href="https://github.com/mythsman/hexo-douban">https://github.com/mythsman/hexo-douban</a></td></tr><tr><td>hexo-generator-searchdb</td><td>本地搜索, 生成 search.xml</td><td><a href="https://github.com/theme-next/hexo-generator-searchdb">https://github.com/theme-next/hexo-generator-searchdb</a></td></tr><tr><td>hexo-algoliasearch</td><td>搜索系统</td><td><a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">https://github.com/LouisBarranqueiro/hexo-algoliasearch</a></td></tr><tr><td>hexo-algolia</td><td>搜索系统</td><td><a href="https://github.com/oncletom/hexo-algolia">https://github.com/oncletom/hexo-algolia</a></td></tr><tr><td>hexo-generator-search</td><td>本地搜索系统</td><td><a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></td></tr><tr><td>hexo-baidu-url-submit</td><td>百度站长主动推送</td><td><a href="https://github.com/huiwang/hexo-baidu-url-submit">https://github.com/huiwang/hexo-baidu-url-submit</a></td></tr><tr><td>hexo-offline</td><td>开启 PWA</td><td><a href="https://github.com/JLHwung/hexo-offline">https://github.com/JLHwung/hexo-offline</a></td></tr><tr><td>hexo-pwa</td><td>开启 PWA</td><td><a href="https://github.com/lavas-project/hexo-pwa">https://github.com/lavas-project/hexo-pwa</a></td></tr><tr><td>hexo-helper-live2d</td><td>看板娘</td><td><a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></td></tr><tr><td>hexo-addlink</td><td>文末添加当前文章链接和版权声明</td><td><a href="https://github.com/acwong00/hexo-addlink">https://github.com/acwong00/hexo-addlink</a></td></tr><tr><td><strong>hexo-blog-encrypt</strong></td><td><strong>博客文章加密</strong></td><td><a href="https://github.com/MikeCoder/hexo-blog-encrypt">https://github.com/MikeCoder/hexo-blog-encrypt</a></td></tr><tr><td>hexo-simple-mindmap</td><td>博客添加脑图</td><td><a href="https://github.com/HunterXuan/hexo-simple-mindmap">https://github.com/HunterXuan/hexo-simple-mindmap</a></td></tr><tr><td>hexo-pdf</td><td>博客展示 pdf</td><td><a href="https://github.com/superalsrk/hexo-pdf">https://github.com/superalsrk/hexo-pdf</a></td></tr><tr><td>hexo-tag-echarts</td><td>博客添加图表</td><td><a href="https://github.com/zhoulvjun/hexo-tag-echarts">https://github.com/zhoulvjun/hexo-tag-echarts</a></td></tr><tr><td>hexo-steam-games</td><td>添加 Steam 游戏界面</td><td><a href="https://github.com/HCLonely/hexo-steam-games">https://github.com/HCLonely/hexo-steam-games</a></td></tr><tr><td>hexo-bilibili-bangumi</td><td>添加 bilibili 番剧页面</td><td><a href="https://github.com/HCLonely/hexo-bilibili-bangumi">https://github.com/HCLonely/hexo-bilibili-bangumi</a></td></tr><tr><td>hexo-generator-random</td><td>生成随机文章页面</td><td><a href="https://github.com/Drew233/hexo-generator-random">https://github.com/Drew233/hexo-generator-random</a></td></tr></tbody></table><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><h4 id="hexo-deployer-git"><a href="#hexo-deployer-git" class="headerlink" title="hexo-deployer-git"></a><a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></h4><p>Hexo 支持一键部署网站到 git 仓库上，其他的一键部署方式参考 <a href="https://hexo.io/zh-cn/docs/one-command-deployment">官网介绍</a></p><ul><li>安装</li></ul><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;仓库链接&gt;</span> <span class="comment"># 可以是 https 链接也可以是 git 链接</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">分支</span>] <span class="comment"># GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span></span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>] <span class="comment"># 默认是 Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>默认的提交信息只有时间信息，没有过多的参考价值推荐使用自定义提交信息，具体参考 <a href="#t7">后续小节</a></p><!--more--><h4 id="hexo-word-counter"><a href="#hexo-word-counter" class="headerlink" title="hexo-word-counter"></a><a href="https://github.com/next-theme/hexo-word-counter">hexo-word-counter</a></h4><p>显示每篇文章的字数统计以及大致阅读时长，需要主题支持</p><ul><li>安装</li></ul><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-word-counter</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-word-counter</span></span><br><span class="line"><span class="comment">## https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure><p>具体配置可以参考官方给出的说明：</p><blockquote><p>Note for Chinese users: because in Chinese language average word length about ~1.5 and if you at most cases write posts in Chinese (without mixed English), recommended to set awl to 2 and wpm to 300.<br>But if you usualy mix your posts with English, awl to 4 and wpm to 275 will be nice.</p></blockquote><p>也就是说纯中文时推荐 <code>awl</code> 设为 2，<code>wpm</code> 设为 300；而中英文混合时推荐 <code>awl</code> 设为 4，<code>wpm</code> 设为 275</p><h4 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></h4><p>Hexo 默认的文章链接是以时间以及文件名命名的，如果文件名为中文时转译之后会很长，并且不美观。而该插件可以利用 hash 值替换原有的文章链接</p><ul><li>安装</li></ul><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-abbrlink</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><p>首先修改 <code>_config.yml</code> 文件中的 <code>permalink</code> 的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure><p>再增加以下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="comment">## https://github.com/rozbo/hexo-abbrlink</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># support dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">true</span> <span class="comment"># (true)Process draft,(false)Do not process draft. false(default)</span></span><br><span class="line">  <span class="comment"># Generate categories from directory-tree</span></span><br><span class="line">  <span class="comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">  <span class="attr">auto_category:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># true(default)</span></span><br><span class="line">     <span class="attr">depth:</span> <span class="number">3</span> <span class="comment"># 3(default)</span></span><br><span class="line">     <span class="attr">over_write:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">auto_title:</span> <span class="literal">false</span> <span class="comment"># enable auto title, it can auto fill the title by path</span></span><br><span class="line">  <span class="attr">auto_date:</span> <span class="literal">false</span> <span class="comment"># enable auto date, it can auto fill the date by time today</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span> <span class="comment"># enable force mode, in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span></span><br></pre></td></tr></table></figure><h4 id="hexo-generator-sitemap"><a href="#hexo-generator-sitemap" class="headerlink" title="hexo-generator-sitemap"></a><a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></h4><p>为了使博客能被谷歌、bing、百度收录，最好生成 <code>sitemap</code> 方便爬取，整体流程可以先参考 <a href="https://ywang-wnlo.github.io/posts/abac0c46/">这篇博文</a></p><ul><li>安装</li></ul><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-sitemap</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-sitemap</span></span><br><span class="line"><span class="comment">## https://github.com/hexojs/hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="comment"># template: ./sitemap_template.xml</span></span><br><span class="line">  <span class="attr">rel:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><h4 id="自定义提交信息"><a href="#自定义提交信息" class="headerlink" title="自定义提交信息"></a>自定义提交信息</h4><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="literal">-m</span> <span class="string">&quot;自定义提交信息&quot;</span></span><br></pre></td></tr></table></figure><p>例如使用 <code>hexo</code> 仓库的提交信息来提交到 <code>deploy</code> 仓库</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="literal">-m</span> (git log <span class="literal">-1</span> <span class="literal">--pretty</span>=format:%s)</span><br></pre></td></tr></table></figure><p>如果中文乱码，可以参考 <a href="https://blog.csdn.net/weixin_43426860/article/details/83348284">这篇博客</a> 修改 UTF-8 编码</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://hexo.io/zh-cn/docs/one-command-deployment">【Hexo】一键部署</a></li><li><a href="https://github.com/hexojs/hexo-deployer-git">【GitHub】hexo-deployer-git</a></li><li><a href="https://github.com/next-theme/hexo-word-counter">【GitHub】hexo-word-counter</a></li><li><a href="https://github.com/rozbo/hexo-abbrlink">【GitHub】hexo-abbrlink</a></li><li><a href="https://github.com/hexojs/hexo-generator-sitemap">【GitHub】hexo-generator-sitemap</a></li><li><a href="https://git-scm.com/docs/git-log#_pretty_formats">【Git】git log 自定义输出格式</a></li><li><a href="https://blog.csdn.net/weixin_43426860/article/details/83348284">【CSDN】解决 Windows PowerShell 乱码</a></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​可能需要 hexo clean 后再次 hexo g 生成页面才会生效</p><h2 id="hexo-typora-图片插入解决办法"><a href="#hexo-typora-图片插入解决办法" class="headerlink" title="hexo + typora 图片插入解决办法"></a>hexo + typora 图片插入解决办法</h2><h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><p>博客的 Markdown 文档都存储在 <code>source/_posts</code> 下，然后博客相关图片都存在 <code>source/imgs</code> 下，接着来修改 typora 的设置。</p><p>打开 <code>文件 - 偏好设置 - 图像</code> 进行修改如下图修改</p><p><img src="/imgs/image-20240319105445610-1711088584797-161-1711095546048-162.png" alt="image-20240319105445610"></p><p>这样拖拽或粘贴过来的图片会自动复制到 <code>source/imgs</code> 下面，不过这样只是可以在 typora 中查看图片了，要想在 hexo 中查看就需要图片路径与服务器中相符合， <code>source/imgs</code> 文件夹下的图片在 hexo 中可以用如 <code>/images/abc.png</code> 的路径访问到，而 typora 可以设置图片根目录，设置完了后图片路径都是 <code>/images/abc.png</code> 这样的，这样一配合就解决了图片路径问题，具体做法是在 <code>格式 - 图像 - 设置图片根目录</code> 中 将 <code>source</code> 文件夹设置为图片根目录，也可在每篇 Markdown 文档中 YAML Front Matter 中添加 <code>typora-root-url: ..</code>，或者直接在 <code>scaffolds</code> 中的模板里直接添加，这样每次 <code>hexo new post</code> 时就会自动生成了。</p><!--more--><p>注意先设置图片根目录，再进行图片的插入。</p><ul><li>设置插入图片时复制到指定目录【设置博客的的 source\imgs】</li><li>进行图片的插入，格式–&gt; 图像–&gt; 复制所有图片到 source\imgs</li></ul><h3 id="上传到图床"><a href="#上传到图床" class="headerlink" title="上传到图床"></a>上传到图床</h3><p>上边的方法适用于博客文件放在根目录的情况，如果文件放在子目录下的话暂时没找到解决办法，便直接上传到图床采用绝对路径了。</p><p>在 typora 里可以设置插入图片时自动上传，如下图设置，这里使用 <code>PicGo</code> App 来上传图片。</p><p><img src="/imgs/1091021-20220524194252672-542041269-1711088584796-145.png" alt="BaiduShurufa_2021-5-21_20-12-18"></p><p>PicGo 可以点击下载按钮到浏览器下载，安装完成后配置好图床，就可以上传图片了。这里使用 GitHub 图床（SM.MS 体验应该更好）。</p><p><img src="/imgs/1091021-20220524194252670-1702853471-1711088584797-147.png" alt="image-20210521202345259"></p><p>具体就是在 GitHub 新建一个仓库专门用来存放图片，然后在 PicGo 里填写 用户名&#x2F;仓库名，分支一般写 main ，token 在 GitHub 设置里生成。</p><p>下边是 PicGo 文档里 GitHub 图床的详细步骤，其他图床可参考官方文档。<br>如果 GitHub 图片访问过慢的话，可以将自定义域名设置为 <code>https://fastly.jsdelivr.net/gh/&#123;用户名&#125;/&#123;仓库名&#125;@&#123;分支名&#125;</code>。<br>鉴于网络环境，建议自行寻找可用的图床。</p><blockquote><p><strong>1.</strong> 首先你得有一个 GitHub 账号。注册 GitHub 就不用我多言。</p><p><strong>2.</strong> 新建一个仓库</p><p><img src="/imgs/1091021-20220524194252154-1831561448-1711088584797-149.png" alt="img"></p><p>记下你取的仓库名。</p><p><strong>3.</strong> 生成一个 token 用于 PicGo 操作你的仓库：</p><p>访问：<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p>然后点击 <code>Generate new token</code>。</p><p><img src="/imgs/1091021-20220524194252718-2133629352-1711088584797-151.png" alt="img"></p><p>把 repo 的勾打上即可。然后翻到页面最底部，点击 <code>Generate token</code> 的绿色按钮生成 token。</p><p><img src="/imgs/1091021-20220524194252716-1501971244-1711088584797-153.png" alt="img"></p><p><strong>注意：</strong> 这个 token 生成后只会显示一次！你要把这个 token 复制一下存到其他地方以备以后要用。</p><p><img src="/imgs/1091021-20220524194252169-302405467-1711088584797-155.png" alt="img"></p><p><strong>4.</strong> 配置 PicGo</p><p><strong>注意：</strong> 仓库名的格式是 <code>用户名/仓库</code>，比如我创建了一个叫做 <code>test</code> 的仓库，在 PicGo 里我要设定的仓库名就是 <code>Molunerfinn/test</code>。一般我们选择 <code>main</code> 分支即可。然后记得点击确定以生效，然后可以点击 <code>设为默认图床</code> 来确保上传的图床是 GitHub。</p><p><img src="/imgs/1091021-20220524194252673-1828432535-1711088584797-157.png" alt="img"></p><p>至此配置完毕，已经可以使用了。当你上传的时候，你会发现你的仓库里也会增加新的图片了：</p><p><img src="/imgs/1091021-20220524194252744-231276602-1711088584797-159.png" alt="img"></p></blockquote><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://blog.csdn.net/qq_32623363/article/details/100524856">typora + hexo 博客中插入图片</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html">PicGo 文档</a></p><h2 id="从目录中移除那些没有在目录-Markdown-文件引用的图片"><a href="#从目录中移除那些没有在目录-Markdown-文件引用的图片" class="headerlink" title="从目录中移除那些没有在目录 Markdown 文件引用的图片"></a>从目录中移除那些没有在目录 Markdown 文件引用的图片</h2><ul><li><p>md 文件目录   E:\test\imgs</p></li><li><p>图片目录  E:\test\zfile1</p></li><li><p>查找图片样式 <img src="/imgs/image.jpg" alt="alt"></p><p>python 代码(Typora.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_referenced_images</span>(<span class="params">md_dir, img_subdir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取Markdown文件中引用的所有图片路径&quot;&quot;&quot;</span></span><br><span class="line">    referenced_images = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(md_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.md&#x27;</span>):</span><br><span class="line">                md_file_path = os.path.join(root, file)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(md_file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    content = f.read()</span><br><span class="line">                    <span class="comment"># 查找图片链接，并假定链接以 &#x27;/imgs/&#x27; 开头</span></span><br><span class="line">                    image_links = re.findall(<span class="string">r&#x27;!\[.*?\]\(/imgs/(.*?)\)&#x27;</span>, content)</span><br><span class="line">                    referenced_images.update(image_links)</span><br><span class="line">    <span class="keyword">return</span> referenced_images</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unused_images</span>(<span class="params">img_dir, referenced_images</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;移除目录中未被Markdown文件引用的图片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(img_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            img_path = os.path.join(root, file)</span><br><span class="line">            <span class="comment"># 如果图片路径不在引用的图片集合中，则删除它</span></span><br><span class="line">            <span class="keyword">if</span> os.path.relpath(img_path, img_dir) <span class="keyword">not</span> <span class="keyword">in</span> referenced_images:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    os.remove(img_path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Removed unused image: <span class="subst">&#123;img_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Error removing image: <span class="subst">&#123;e.strerror&#125;</span>. <span class="subst">&#123;img_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路径</span></span><br><span class="line">md_directory = <span class="string">&quot;E:\\test\\zfile1&quot;</span> <span class="comment"># Markdown文件文件夹路径</span></span><br><span class="line">img_directory = <span class="string">&quot;E:\\test\\imgs&quot;</span>  <span class="comment"># 图片所在目录路径</span></span><br><span class="line">img_subdir = os.path.relpath(img_directory, md_directory)  <span class="comment"># 图片目录相对于Markdown文件目录的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Markdown文件中引用的图片路径</span></span><br><span class="line">referenced_images = get_referenced_images(md_directory, img_subdir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除未引用的图片</span></span><br><span class="line">remove_unused_images(img_directory, referenced_images)</span><br></pre></td></tr></table></figure><p>修改 md_directory、img_directory，图片样式需要是&#x2F;imgs&#x2F;image.jpg 样式的，否则需要修改 image_links 正则</p></li></ul><p>运行(最好先备份 img_directory 目录文件)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Typora.py</span><br></pre></td></tr></table></figure><h2 id="接入-Valine-评论系统"><a href="#接入-Valine-评论系统" class="headerlink" title="接入 Valine 评论系统"></a>接入 Valine 评论系统</h2><p>RT，增加对 Valine 评论系统的支持。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前配置系统一直用的 gitment，用 github 账号登录即可评论。详见之前的文章：<a href="http://xiaqunfeng.cc/2018/03/26/hexo-gitment/">添加 gitment 评论系统</a></p><p>展示效果也很好：</p><p><img src="/imgs/gitment-show.png" alt="show"></p><p>但是，现在已经凉凉了，一直登录不上去，其他人也有类似的反馈：</p><p><img src="/imgs/gitment.png" alt="1"></p><p>一直转圈圈，几分钟后就失败。</p><p>本来不想再折腾评论系统了，初衷就是自己总结写给自己看的。想想万一能帮到他人，就像之前的评论一样，同时能有更多交流，也是一件很开心的事情。</p><h3 id="Valine-配置"><a href="#Valine-配置" class="headerlink" title="Valine 配置"></a>Valine 配置</h3><p>官方文档：<a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p><h4 id="获取-APP-ID-和-APP-Key"><a href="#获取-APP-ID-和-APP-Key" class="headerlink" title="获取 APP ID 和 APP Key"></a>获取 APP ID 和 APP Key</h4><p>1、先注册 leancloud，然后实名认证</p><p><a href="https://leancloud.cn/dashboard/login.html#/signup">https://leancloud.cn/dashboard/login.html#/signup</a></p><p>2、创建应用</p><p><img src="/imgs/valine-create.png" alt="create"></p><p>3、设置应用 key</p><p>进入应用，设置-&gt; 应用 keys</p><p><img src="/imgs/valine-app.png" alt="set"></p><h4 id="配置安全域名"><a href="#配置安全域名" class="headerlink" title="配置安全域名"></a>配置安全域名</h4><p>设置成博客的域名地址和本地地址即可。不设置也可以 ，主要还是为了安全。</p><p><img src="/imgs/valine-security.png" alt="security"></p><h3 id="yilia-主题配置"><a href="#yilia-主题配置" class="headerlink" title="yilia 主题配置"></a>yilia 主题配置</h3><p>所有 hexo 主题配置可在这里找：<a href="https://valine.js.org/hexo.html">https://valine.js.org/hexo.html</a></p><p>1、<code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#6、Valine https://valine.js.org</span><br><span class="line">valine: </span><br><span class="line"> appid:  #Leancloud应用的appId</span><br><span class="line"> appkey:  #Leancloud应用的appKey</span><br><span class="line"> verify: false #验证码</span><br><span class="line"> notify: false #评论回复提醒</span><br><span class="line"> avatar: mp #评论列表头像样式：&#x27;&#x27;/mp/identicon/monsterid/wavatar/retro/hide</span><br><span class="line"> placeholder: Just go go #评论框占位符</span><br></pre></td></tr></table></figure><p>2、<code>layout/_partial/article.ejs</code></p><p>给文章新增评论 style</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class="line">    &lt;section id=&quot;comments&quot; style=&quot;margin:10px;padding:10px;background:#fff;&quot;&gt;</span><br><span class="line">      &lt;%- partial(&#x27;post/valine&#x27;, &#123;</span><br><span class="line">        key: post.slug,</span><br><span class="line">        title: post.title,</span><br><span class="line">        url: config.url+url_for(post.path)</span><br><span class="line">        &#125;) %&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>3、<code>layout/_partial/post/valine.ejs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt; </span><br><span class="line">&lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   var notify = &#x27;&lt;%= theme.valine.notify %&gt;&#x27; == true ? true : false;</span><br><span class="line">   var verify = &#x27;&lt;%= theme.valine.verify %&gt;&#x27; == true ? true : false;</span><br><span class="line">    window.onload = function() &#123;</span><br><span class="line">        new Valine(&#123;</span><br><span class="line">            el: &#x27;.comment&#x27;,</span><br><span class="line">            notify: notify,</span><br><span class="line">            verify: verify,</span><br><span class="line">            app_id: &quot;&lt;%= theme.valine.appid %&gt;&quot;,</span><br><span class="line">            app_key: &quot;&lt;%= theme.valine.appkey %&gt;&quot;,</span><br><span class="line">            placeholder: &quot;&lt;%= theme.valine.placeholder %&gt;&quot;,</span><br><span class="line">            avatar:&quot;&lt;%= theme.valine.avatar %&gt;&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>1、评论测试</p><p><img src="/imgs/valine-test.png" alt="test"></p><p>2、查看 leancloud 数据仓库</p><p><img src="/imgs/valine-comment-detail.png" alt="detail"></p><p>可以看到，评论的详细信息都被记录到这里。</p><h3 id="gravatar-头像"><a href="#gravatar-头像" class="headerlink" title="gravatar 头像"></a>gravatar 头像</h3><p>详见头像配置：<a href="https://valine.js.org/avatar.html">https://valine.js.org/avatar.html</a></p><p>之前使用的是默认的 mp 匿名头像。</p><p>1、登录 <a href="https://cn.gravatar.com/">gravatar</a>，注册账号并设置头像，我的头像如下，和博客头像一致。</p><p><img src="/imgs/valine-gravatar.png" alt="gravatar"></p><p>2、主题配置文件增加 avatar_cdn 参数：</p><p>在上面 <code>_config.yml</code> 配置中增加：（和参数 avatar 同级）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar_cdn: https://www.gravatar.com/avatar/</span><br></pre></td></tr></table></figure><p>3、设置 gravatar CDN</p><p>目前 Valine 的版本不支持 avatar_cdn 参数，这里手工加一个并设置成 Gravatar 的 CDN。</p><p>在上面的配置文件 <code>layout/_partial/post/valine.ejs</code> 中新增：（和参数 avatar 同级）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar_cdn:&#x27;&#123;&#123; theme.valine.avatar_cdn &#125;&#125;&#x27;,</span><br></pre></td></tr></table></figure><p>4、评论，输入邮箱，发现头像已可正确显示</p><p><img src="/imgs/valine-gravatars-test.png" alt="11"></p><p>评论接入引用：</p><h2 id="hexo-中-cdn-jsdelivr-net-无法访问"><a href="#hexo-中-cdn-jsdelivr-net-无法访问" class="headerlink" title="hexo 中 cdn.jsdelivr.net 无法访问"></a>hexo 中 cdn.jsdelivr.net 无法访问</h2><p>更换 <strong>cdn 产商，</strong> 使用 cdn.jsdelivr <a href="https://so.csdn.net/so/search?q=.net&spm=1001.2101.3001.7020">.net</a> 未受污染的子域：</p><p>将 <strong>cdn.jsdelivr.net</strong> 域名替换为 <strong>fastly.jsdelivr.net</strong> 或者 <strong>gcore.jsdelivr.net</strong></p><h2 id="使用-Hexo-Qiniu-Sync：一键部署静态博客到七牛云的利器"><a href="#使用-Hexo-Qiniu-Sync：一键部署静态博客到七牛云的利器" class="headerlink" title="使用 Hexo-Qiniu-Sync：一键部署静态博客到七牛云的利器"></a>使用 Hexo-Qiniu-Sync：一键部署静态博客到七牛云的利器</h2><p>​<a href="https://gitcode.com/gyk001/hexo-qiniu-sync?utm_source=artical_gitcode">Hexo-Qiniu-Sync</a> 是一个便捷的工具，它将 Hexo 静态博客与七牛 <a href="https://so.csdn.net/so/search?q=%E4%BA%91%E5%AD%98%E5%82%A8&spm=1001.2101.3001.7020">云存储</a> 服务紧密集成，允许用户通过简单的命令行操作，快速、稳定地将本地博客内容同步到云端并自动发布。如果你是 Hexo 的用户并且正在寻找一种高效且可靠的云存储解决方案，那么这个项目绝对值得你尝试。</p><p>​详情见《2024-04-15-七牛云搭建hexo博客》、《2024-04-15-hexo使用qshell一键部署静态博客到七牛云》</p><h2 id="hexo-多电脑同步管理一个博客"><a href="#hexo-多电脑同步管理一个博客" class="headerlink" title="hexo 多电脑同步管理一个博客"></a>hexo 多电脑同步管理一个博客</h2><p>​主要的思路是利用 git 分支实现。hexo 生成的静态博客文件默认放在 master 分支上。 hexo 的源文件（部署环境文件）可以都放在 backup分支上（可以新创建一个 backup 分支），换新电脑时，直接 <code>git clone hexo分支</code> 进行博客的书写和编译等工作 。</p><p>在 Github 的 username.github.io 仓库上新建一个 hexo 分支</p><p><strong>A 电脑备份博客内容到 github</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方式一（未使用hexo-git-backup插件）：</span><br><span class="line">git init  #第一次可能需要</span><br><span class="line">git add . #添加目录下所有文件 </span><br><span class="line">git commit -m “更新说明” #提交并添加更新说明 </span><br><span class="line">git remote add github https://github.com/yourname/yourname.github.io.git </span><br><span class="line">git push -u github backup:backup #推送更新到远程仓库，出错加  -f （强制推送） -u（设定默认）</span><br><span class="line"></span><br><span class="line">方式一（使用hexo-git-backup插件）：</span><br><span class="line">hexo b</span><br></pre></td></tr></table></figure><p><strong>B 电脑拉下远程仓库文件</strong></p><p>在 B 电脑上同样先安装好 node、git、ssh、hexo，然后建好 hexo 文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add github https://github.com/yourname/yourname.github.io.git </span><br><span class="line">git pull github backup:backup</span><br><span class="line"></span><br><span class="line">npm install #第一次下拉需要安装一下依赖项，后面如果更改仍然需要刷新</span><br></pre></td></tr></table></figure><p><strong>发布博客后同步</strong></p><p>在 B 电脑发布完博客之后，记得将博客备份同步到远程仓库。<br>执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方式一（git默认方式）：</span><br><span class="line">git add #可以用git master 查看更改内容  </span><br><span class="line">git commit -m &quot;更新信息&quot;  </span><br><span class="line">git push -u origin hexo:hexo #以后每次提交可以直接git push</span><br><span class="line"></span><br><span class="line">方式二（hexo默认方式）：</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">方式三（hexo-git-backup结合GitHub Actions方式）：</span><br><span class="line">hexo b</span><br><span class="line">自动触发GitHub Actions，部署到静态页面分支（正常是master）</span><br></pre></td></tr></table></figure><p><strong>平时同步管理</strong></p><p>每次想写博客时，先执行：</p><p><img src="/imgs/image-20240417093815731.png" alt="image-20240417093815731"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull github backup:backup #github为远程主机名</span><br><span class="line">#git pull gitee backup:backup  </span><br></pre></td></tr></table></figure><p>进行同步更新。</p><p>发布完文章后同样按照上面的 发布博客后同步。 同步到远程仓库。</p><p>参考命令</p><p><a href="https://www.yiibai.com/git/git_push.html">Git push 命令</a></p><p><a href="https://www.yiibai.com/git/git_pull.html">Git pull 命令</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line">$ git clone &lt;版本库的网址&gt;</span><br><span class="line">$ git fetch origin master</span><br><span class="line">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><h2 id="安装和部署-hexo-admin-插件"><a href="#安装和部署-hexo-admin-插件" class="headerlink" title="安装和部署 hexo-admin 插件"></a>安装和部署 hexo-admin 插件</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在博客根目录下运行下列指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、安装hexo-admin</span><br><span class="line">npm install --save hexo-admin -y</span><br><span class="line"></span><br><span class="line">2、获取配置hexo 的admin authentification(未配置时，直接进入配置后复制到根目录_config.yml)</span><br><span class="line">vim _config.yml</span><br><span class="line">admin:</span><br><span class="line">  username: xx</span><br><span class="line">  password_hash: xxx</span><br><span class="line">  secret: xxx</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">3、配置脚本（根目录执行）</span><br><span class="line">echo &quot;hexo clean &amp;&amp; hexo g -d&quot;&gt;hexo-deploy.bat</span><br><span class="line"></span><br><span class="line">4、配置脚本位置</span><br><span class="line">vim _config.yml</span><br><span class="line">admin:</span><br><span class="line">...</span><br><span class="line">  deployCommand: &#x27;.\\hexo-deploy.bat‘</span><br><span class="line"></span><br><span class="line">5、发布</span><br><span class="line">hexo server -d</span><br></pre></td></tr></table></figure><p>指令解释</p><p>第一行，下载插件，<br>第二行，生成一个内容为”hexo clean &amp;&amp; hexo g -d”，名为”hexo-deploy”的bat文件。这个教程是对于github的部署的。如果想用来管理gitee的博客，建议修改成echo “hexo clean &amp;&amp; hexo g -d &amp;&amp; start <a href="https://gitee.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D/pages%22%3Ehexo-deploy.bat%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%96%B9%E4%BE%BF%E5%9C%A8%E7%BD%91%E9%A1%B5%E7%AB%AF%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0gitee">https://gitee.com/用户名/用户名/pages&quot;&gt;hexo-deploy.bat，这样方便在网页端同步更新gitee</a> page。</p><p>第三、四行，配置_config.yml文件，<br>第五行，开启hexo服务。</p><p>在浏览器打开localhost:4000&#x2F;admin&#x2F;，即可编辑博文。<br>如果没出意外的话应该是可以的，如果出了意外哪一行没执行成功，就查看代码解释，看看是否完成了相应功能。</p><p>在网页中编辑完，直接左上角Deploy，直接点deploy按钮，就可以完成博客的部署。</p><p>可能遇到的问题(每次都要输入密码)：查看一下你的_config.yml，将文档最后的deploy的repo从http改为git@github类型。</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1、安装hexo-admin</span><br><span class="line">npm install --save hexo-admin -y</span><br><span class="line"></span><br><span class="line">2、获取配置hexo 的admin authentification(未配置时，直接进入配置后复制到根目录_config.yml)</span><br><span class="line">vim _config.yml</span><br><span class="line">admin:</span><br><span class="line">  username: xx</span><br><span class="line">  password_hash: xxx</span><br><span class="line">  secret: xxx</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">3、配置脚本</span><br><span class="line">vi hexo-deploy.sh</span><br><span class="line">#!/usr/bin/env sh</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line">4、授权脚本</span><br><span class="line">chmod +x hexo-deploy.sh</span><br><span class="line"></span><br><span class="line">5、配置脚本位置</span><br><span class="line">vim _config.yml</span><br><span class="line">admin:</span><br><span class="line">...</span><br><span class="line">deployCommand: ./hexo-deploy.sh</span><br><span class="line"></span><br><span class="line">6、发布</span><br><span class="line">hexo server -d</span><br></pre></td></tr></table></figure><p><strong>admin authentification</strong></p><p><img src="/imgs/image-20240418153522170.png" alt="image-20240418153522170"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="fatal-‘gitee’-does-not-appear-to-be-a-git-repository"><a href="#fatal-‘gitee’-does-not-appear-to-be-a-git-repository" class="headerlink" title="fatal: ‘gitee’ does not appear to be a git repository"></a>fatal: ‘gitee’ does not appear to be a git repository</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fatal: &#x27;gitee&#x27; does not appear to be a git repository</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">INFO  Backup done: git</span><br></pre></td></tr></table></figure><p>提示’gitee’ does not appear to be a git repository，需要确认远程仓库是否存在，不存在的话进行添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有远程仓库</span><br><span class="line">git remote -v</span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><h3 id="fatal-refusing-to-merge-unrelated-histories"><a href="#fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="fatal: refusing to merge unrelated histories"></a>fatal: refusing to merge unrelated histories</h3><p>​错误通常发生在尝试合并两个不相关的Git仓库历史时。</p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>这个错误的根本原因是Git无法确定两个不相关仓库的历史如何彼此关联。Git通过历史记录来跟踪每个提交的父提交，以便构建提交的关系图。当尝试合并两个没有共同祖先的历史时，Git会认为它们是不相关的，因此默认情况下拒绝合并。</p><p>这通常发生在以下情况下：</p><p>创建了一个新的本地仓库并进行了一些提交，然后尝试将其与远程仓库合并，但远程仓库也已经有了自己的提交历史。</p><p>从一个独立的仓库克隆了一个项目，并且这两个仓库没有任何历史共享。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>要解决fatal: refusing to merge unrelated histories错误，我们可以采取以下几种方法：</p><h5 id="–allow-unrelated-histories标志"><a href="#–allow-unrelated-histories标志" class="headerlink" title="–allow-unrelated-histories标志"></a>–allow-unrelated-histories标志</h5><p>使用–allow-unrelated-histories标志允许合并不相关的历史。这是一种解决问题的快速方法，但请谨慎使用，因为它将两个不同的历史合并到一个新的共同历史中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>请注意，这可能会导致冲突，我们需要解决这些冲突后再次提交。</p><h5 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h5><p>如果不想混合两个不相关的历史，我们可以创建一个新的分支，然后将远程仓库的内容合并到该分支中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#创建新分支</span><br><span class="line">git checkout -b new-branch</span><br><span class="line"></span><br><span class="line">#拉取远程仓库内容并合并到新分支</span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line">#提交更改</span><br><span class="line">git commit -m &quot;Merge remote branch into new branch&quot;</span><br><span class="line"></span><br><span class="line"># 推送到远程仓库</span><br><span class="line">git push origin new-branch</span><br></pre></td></tr></table></figure><h5 id="重新克隆仓库"><a href="#重新克隆仓库" class="headerlink" title="重新克隆仓库"></a>重新克隆仓库</h5><p>如果两个仓库的历史确实是完全不相关的，并且不希望将它们合并在一起，那么我们可以重新克隆一个干净的仓库。这将创建一个全新的本地仓库，不包含任何不相关的历史。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除当前仓库目录</span><br><span class="line">rm -rf your-repo-directory</span><br><span class="line"></span><br><span class="line"># 重新克隆远程仓库</span><br><span class="line">git clone &lt;repository-url&gt;</span><br></pre></td></tr></table></figure><h5 id="合并并重写历史（谨慎使用）"><a href="#合并并重写历史（谨慎使用）" class="headerlink" title="合并并重写历史（谨慎使用）"></a>合并并重写历史（谨慎使用）</h5><p>如果确定两个仓库的历史应该合并，可以使用–allow-unrelated-histories标志来合并，并使用–rebase选项来重写历史以创建一个干净的合并历史。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 拉取远程仓库内容并合并并重写历史</span><br><span class="line">git pull origin master --rebase=interactive --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line"># 解决任何冲突并继续重写历史</span><br><span class="line"></span><br><span class="line"># 提交更改</span><br><span class="line">git commit -m &quot;Merge and rewrite history&quot;</span><br><span class="line"></span><br><span class="line"># 推送到远程仓库</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>这种方法会重写历史，所以请小心使用，尤其是在多人协作项目中。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>fatal: refusing to merge unrelated histories错误通常是由于尝试合并不相关的Git历史而引起的。根据我们的需求，可以使用上述不同的解决方法来处理这个问题。谨慎使用–allow-unrelated-histories和–rebase选项，以确保不会破坏项目的完整性。最终的解决方案取决于项目需求和历史记录。</p><h3 id="Permission-denied-publickey"><a href="#Permission-denied-publickey" class="headerlink" title="Permission denied (publickey)."></a>Permission denied (publickey).</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &#x27;gitee.com&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">git@gitee.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><p>问题：缺少SSH公钥，在gitee新增电脑公钥即可</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;按照模版创建-md&quot;&gt;&lt;a href=&quot;#按照模版创建-md&quot; class=&quot;headerlink&quot; title=&quot;按照模版创建 md&quot;&gt;&lt;/a&gt;按照模版创建 md&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new [layout] &amp;lt;title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;layout 是文章的布局，在 scaffolds 中，默认为 post，可以先不写，其他的有 page、draft 等&lt;/li&gt;
&lt;li&gt;Hexo 有三种默认布局：&lt;code&gt;post&lt;/code&gt;、&lt;code&gt;page&lt;/code&gt; 和 &lt;code&gt;draft&lt;/code&gt; 在创建者三种不同类型的文件时，它们将会被保存到不同的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;布局&lt;/th&gt;
&lt;th&gt;路径&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;source&amp;#x2F;_posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;page&lt;/td&gt;
&lt;td&gt;source&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;draft&lt;/td&gt;
&lt;td&gt;source&amp;#x2F;_drafts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo插件hexo-generator-index-pin-top实现文章的排序</title>
    <link href="https://github.com/jiangjiawei520/post/3225ac4f.html"/>
    <id>https://github.com/jiangjiawei520/post/3225ac4f.html</id>
    <published>2024-04-02T09:19:33.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo如何修改-文章排序"><a href="#hexo如何修改-文章排序" class="headerlink" title="hexo如何修改: 文章排序"></a>hexo如何修改: 文章排序</h1><p>hexo默认情况下以编写时间的先后来排序，后写的后出现</p><p>按照以下方法可为文章添加top属性来排序</p><p>首先在cmd中输入以下命令</p><p>首先要切入hexo所在的文件夹，否则生成页面会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在文章当中添加top属性即可</p><p>数字越大，排在越上面</p><p><img src="/imgs/3285662-20240208155353623-1901434418.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo如何修改-文章排序&quot;&gt;&lt;a href=&quot;#hexo如何修改-文章排序&quot; class=&quot;headerlink&quot; title=&quot;hexo如何修改: 文章排序&quot;&gt;&lt;/a&gt;hexo如何修改: 文章排序&lt;/h1&gt;&lt;p&gt;hexo默认情况下以编写时间的先后来排序，后写的</summary>
      
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo 插件hexo-git-backup实现对文章的备份</title>
    <link href="https://github.com/jiangjiawei520/post/a8dc1525.html"/>
    <id>https://github.com/jiangjiawei520/post/a8dc1525.html</id>
    <published>2024-03-29T00:00:00.000Z</published>
    <updated>2024-04-25T08:47:13.406Z</updated>
    
    <content type="html"><![CDATA[<p>一篇关于Hexo博客的备份与恢复的，用的是一个插件：<a href="https://github.com/coneycode/hexo-git-backup">hexo-git-backup</a>，Hexo官网的插件里搜不到，这个插件发布在了GitHub上，关于安装使用官方也给了很简洁易懂的说明文档。</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>如果你的Hexo版本是2.x.x（查看Hexo版本可使用命令：<code>hexo version</code>）在终端中使用如下命令安装：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install hexo-git-backup<span class="variable">@0</span>.<span class="number">0.91</span> --save</span><br></pre></td></tr></table></figure><p>如果你的Hexo版本是3.x.x<strong>及后续版本</strong>，则使用如下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="插件升级"><a href="#插件升级" class="headerlink" title="插件升级"></a>插件升级</h2><p>如果你是通过 <code>--save</code>安装的，那么升级之前你必须先删除旧的版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm remove hexo-git-backup</span><br><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><h3 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h3><p>新建一个 GitHub 仓库用来备份博客（具体操作不再赘述）</p><p>复制仓库ＳＳＨ链接备用，此处需确保你的电脑已通过SSH连接到 GitHub ，具体操作可参考 <a href="https://help.github.com/en/articles/connecting-to-github-with-ssh">GitHub 官方帮助文档</a>。</p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>在博客根目录下的 <code>_config.yml</code> 文件中配置插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure><h4 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h4><p>如果你想连同主题一起备份，在 <code>_config.yml</code> 文件中添加主题名即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    theme: coney,landscape,xxx</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure><p><strong>注意：如果你选择了备份主题例如landscape，那么landscape主题文件夹下的 themes&#x2F;landscape&#x2F;.git 文件就会被删除</strong></p><p>如果你想自定义 commit 信息，添加一行 <code>message: update xxx</code> 即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    message: update xxx</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><p>现在就可以使用以下命令备份你的博客到GitHub了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b 或者 hexo backup</span><br></pre></td></tr></table></figure><p>博客备份至此就已经结束！安全起见可以每次 <code>hexo d</code> 的时候同步 <code>hexo b</code> 备份一下博文。</p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>有时候换了另一台电脑或者另一个系统环境下，想要写博客就不得不把博客文件迁移过去，这一部分是关于博客的迁移，接上文使用 hexo-git-backup 插件的情况下（其他方法备份的博客原理类似）。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>根据 Hexo 官网说明安装 Hexo 即可</p><p>附上官网地址：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>要部署博客到 GitHub 还需要安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>下载或者 clone 前文所述备份的博客到本地任意位置，复制备份文件夹内所有文件到新安装的博客目录下，重复文件保留备份的即可。</p><p>至此博客迁移已完成，可以”三部曲“测试一下是否迁移成功：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br><span class="line"><span class="variable">$ </span>hexo g</span><br><span class="line"><span class="variable">$ </span>hexo s</span><br></pre></td></tr></table></figure><h2 id="操作过程可能遇到的问题"><a href="#操作过程可能遇到的问题" class="headerlink" title="操作过程可能遇到的问题"></a><strong>操作过程可能遇到的问题</strong></h2><h3 id="如何忽略一些文件"><a href="#如何忽略一些文件" class="headerlink" title="如何忽略一些文件"></a>如何忽略一些文件</h3><p>​根目录下配置.gitignore文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p><strong>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</strong></p><h3 id="如何配置SSH"><a href="#如何配置SSH" class="headerlink" title="如何配置SSH"></a><strong>如何配置<code>SSH</code></strong></h3><p>找到<code>id_rsa.pub</code>文件，一般在<code>C:\Users\Administrator\.ssh</code>这个目录下，复制<code>id_rsa.pub</code>内容，打开<code>gitee/github</code>的<code>SSH</code>公钥，然后填写进去。</p><p>如果你之前已经有绑定过本电脑的<code>SSH</code>到<code>github</code>，那么就不需要再绑定一次了。还没绑定的或者提交失败的，可以重新绑定以此，操作如图，也是将<code>id_rsa.pub</code>文件内容填写到这里。</p><p><img src="/imgs/v2-7f0b49856fcbbacc47e0d887d49ebe87_b.jpg"></p><p><img src="/imgs/v2-9a01ad00be24e1864f687cf1ed562a55_b.jpg"></p><h3 id="hexo-b失败"><a href="#hexo-b失败" class="headerlink" title="hexo b失败"></a><strong><code>hexo b</code>失败</strong></h3><p><strong>github成功，gitee失败</strong></p><p>可能是<code>SSH</code>的公钥还没有绑定到<code>gitee</code>，可以试试把根目录下的<code>.git</code>目录删掉再提交一次，删掉<code>不</code>需要<code>git init</code></p><p><img src="/imgs/v2-73ba04474814111811d69e29b4eeeae9_b.jpg"></p><p><strong>提交成功</strong></p><p><img src="/imgs/v2-ebaa161639e43296a326cc71e8a0f2d0_b.jpg"></p><h4 id="原因一：-git文件夹存在"><a href="#原因一：-git文件夹存在" class="headerlink" title="原因一：.git文件夹存在"></a><strong>原因一：<code>.git</code>文件夹存在</strong></h4><p>​目录下有<code>.git</code>文件夹，删掉<code>.git</code>文件夹即可</p><p><img src="/imgs/v2-8719fc6b1d86b1031fd2bdbf95c915f1_b.jpg"></p><p>​删掉重新提交(hexo b)</p><h4 id="原因二：本地仓库和远程仓库没有连上"><a href="#原因二：本地仓库和远程仓库没有连上" class="headerlink" title="原因二：本地仓库和远程仓库没有连上"></a><strong>原因二：本地仓库和远程仓库没有连上</strong></h4><p><strong>可以试试添加远程链接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add backup-gitee git@gitee.com:Lilbai518/backup-blog.git</span><br><span class="line">git remote add backup-github git@github.com:0000rookie/backup-blog.git</span><br></pre></td></tr></table></figure><p><strong>添加完检查一下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">gitee   git@gitee.com:Lilbai518/backup-blog.git (fetch)</span><br><span class="line">gitee   git@gitee.com:Lilbai518/backup-blog.git (push)</span><br><span class="line">githu   git@github.com:0000rookie/backup-blog.git (fetch)</span><br><span class="line">githu   git@github.com:0000rookie/backup-blog.git (push)</span><br></pre></td></tr></table></figure><p><strong>重新提交试试</strong></p><h2 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h2><h3 id="Could-not-read-from-remote-repository"><a href="#Could-not-read-from-remote-repository" class="headerlink" title="Could not read from remote repository."></a><strong>Could not read from remote repository.</strong></h3><p>今天在备份博客的时候，突然报错了，然后重新生成公钥，放到Gitee和GitHub上，重新hexo b就好了</p><p><strong>错误</strong></p><p><img src="/imgs/v2-b05b78c8692cc702f0cb9c298db807a7_b.jpg"></p><p><strong>生成新的公钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;aa134***@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><p><strong>删除目录下的.git文件夹</strong></p><p><img src="/imgs/v2-2206d4e24b294de5679390b20606f85a_b.jpg"></p><p><strong>将公钥放到Github和Gitee上</strong></p><p>将改文件<code>C:\Users\用户名\.ssh\id_rsa.pub</code>复制公钥到Gitee和GitHub</p><p><strong>重新部署</strong></p><p>不需要初始化本地仓库<code>git init</code>，直接使用<code>hexo b</code>就行，因为我们在博客根目录下的<code>_config.yml</code>已经添加我们的仓库地址了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">butterfly</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">这是我的博客文件</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:***地址.git,main</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:***地址.git,master</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一篇关于Hexo博客的备份与恢复的，用的是一个插件：&lt;a href=&quot;https://github.com/coneycode/hexo-git-backup&quot;&gt;hexo-git-backup&lt;/a&gt;，Hexo官网的插件里搜不到，这个插件发布在了GitHub上，关于安装使用官方也给了很简洁易懂的说明文档。&lt;/p&gt;
&lt;h2 id=&quot;备份&quot;&gt;&lt;a href=&quot;#备份&quot; class=&quot;headerlink&quot; title=&quot;备份&quot;&gt;&lt;/a&gt;备份&lt;/h2&gt;&lt;h3 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h3&gt;&lt;p&gt;如果你的Hexo版本是2.x.x（查看Hexo版本可使用命令：&lt;code&gt;hexo version&lt;/code&gt;）在终端中使用如下命令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;npm install hexo-git-backup&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.91&lt;/span&gt; --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果你的Hexo版本是3.x.x&lt;strong&gt;及后续版本&lt;/strong&gt;，则使用如下命令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo-git-backup --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="博客" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/categories/%E5%8D%9A%E5%AE%A2/hexo/"/>
    
    
    <category term="hexo" scheme="https://github.com/jiangjiawei520/tags/hexo/"/>
    
  </entry>
  
</feed>
